/**********************************************************************
 *
 * Module:  CNLM.pc
 * Date:    30-JUN-2000
 * Author:  Jeremy Cooper (jrmc)
 *
 * Description: Loan mass conversion program. 
 *
 * To set Debug: setenv CNLM_DEBUG_LEVEL TRUE or MAX
 *
 * Processing Outline:
 *
 * CNLM requires 4 variables: 1. USER_ID
 *                            2. GA_ID
 *                            3. EV_ID
 *                            4. EFFDATE
 *
 * Modifications:
 *      02/05 kwai - Modified CNLM.pc to accept one more parameter 
 *                   (cnlm_use_prior_id) to determine if the prior loan
 *                   id should be used on ISIS                            
 *                 - use ssn_ext when loading loan info.
 *                 - also called by the mass loan program GQ19CNML.pc
 *      05/05 kwai - Modified CNLM.pc to use individual ssn ext if 
 *                   none exists in automation.  Due to MADD change.
 *      04/06 kwai - Modified CNLM.pc to not load the LOAN_MNTY_SPLT
 *                   table if the total loan percent ne 100.
 *      05/07 kwai - Modified CNLM.pc to call LAMS with a '0' for doc
 *                   type.  This will load the loans to isis, but it
 *                   won't create any documentation (AR#2486101).
 *      10/07 kwai - Added user_id parm for 10g.
 *      01/10 kwai - Added code to check for active GRP_LOAN_STRUC
 *      02/10 kwai - Removed code to not create a 0 LOAN_ACCT row for
 *                   12 mos highest loan balance
 *     09/12 jlvg - Remove references to Participant Agreement status 
 *                  code ARLN and DFAR. Refer to 134232-07 for reason
 *     05/2014 dken changed the LOAN_ACTY.DPDATE to be sysdate per SRticket 636053
 *
 *********************************************************************/

#include "GQ19CNLM.h"

/* Forward Declarations */

int cnlm_add_event_and_step(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr, 
	LOAN_ACCT_INFO* lainfo_ptr, char* user_id);

int cnlm_calc_amortization_sched(char* user_id, char* ga_id, long master_ev_id, char* effdate);

int cnlm_calc_next_due_date(char* current_date, char* repay_freq, char* next_date);

int cnlm_complete_event(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr);

int cnlm_create_assessments(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr,
	LOAN_ACCT_INFO *lainfo_ptr);

int cnlm_create_loan_acct(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr,
	LOAN_ACCT_INFO *lainfo_ptr, long l_cnlm_inlnag_seqnbr,
	double cnlm_loan_amt, char *cnlm_effdate);

int cnlm_create_loan_acty(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr,
	LOAN_ACCT_INFO *lainfo_ptr, long l_cnlm_inlnag_seqnbr,
	double cnlm_loan_amt, char *cnlm_effdate);

int cnlm_create_loan_bal(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr,
	LOAN_ACCT_INFO *lainfo_ptr, long cnlm_inlnag_seqnbr,
	char *cnlm_bal_reason_code, char *cnlm_bal_effdate,
	double l_cnlm_principal_amt, double l_cnlm_int_amt);

int cnlm_create_snapshots(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr,
	LOAN_ACCT_INFO *lainfo_ptr);

int cnlm_derive_loan_info(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr,
	LOAN_ACCT_INFO *lainfo_ptr);

int cnlm_handle_error(char *error_code, char *error_prim, char *error_scnd,
	char *error_tert, char *error_msg, CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr);

int cnlm_hist_mnty_splt(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr,
	LOAN_ACCT_INFO *lainfo_ptr);

int cnlm_insert_assessments(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr,
	LOAN_ACCT_INFO *lainfo_ptr, LOAN_ASSESS_INFO *lsinfo_ptr);

int cnlm_log_new_event(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr,
	char *prev_loan_id);

int cnlm_mail_error_file(char* user_id);

int cnlm_open_error_file(char *ga_id);

int cnlm_process_assessments(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr,
	LOAN_ACCT_INFO *lainfo_ptr);

int cnlm_process_conv_loan_info(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr,
	char* user_id);

int cnlm_process_loan_history(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr,
	LOAN_ACCT_INFO *lainfo_ptr);

int cnlm_process_mnty_splt(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr,
	LOAN_ACCT_INFO *lainfo_ptr);

int cnlm_update_part_info(CNLM_INFO *lcinfo_ptr,LOAN_IND_INFO *liinfo_ptr,
	char* ar_sysdate);

int cnlm_validate_assessments(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr,
	LOAN_ACCT_INFO *lainfo_ptr);

int cnlm_validate_conv_info(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr,
	LOAN_ACCT_INFO *lainfo_ptr);

/* Extern Function Prototypes */

extern char *loan_current_time(void);
extern int LAMS(char *in_ind_id, char *in_ga_id, char *in_ev_id, char*in_gc_id,
        char *in_inlnag_seqnbr, char *in_txn_code, char *in_doc_type, char *in_effdate,
        char *in_start_date, char *in_loan_amount, char *in_loan_term, char *in_loan_term_qual,
        char *in_interest_rate, char *in_repay_mthd, char *in_repay_freq, char *in_tot_acct_bal,
        char *in_tot_vest_bal, char *in_tot_avail_bal, char *in_tot_bal, 
	char *in_refi_maturity_date, double in_orig_fee);

extern int MACL(char *in_txn_code, char *in_subject_id, long  *in_ev_id, 
        char *in_evty_code, long in_master_ev_id, char *in_sub_subject_id,
        char *in_user_id, char *in_creation_source, long *in_step_seqnbr);

extern int SNCR(char *SNCR_GA_ID, long SNCR_IND_ID, long SNCR_INLNAG_SEQNBR,
         long SNCR_EV_ID, long SNCR_STEP_SEQNBR, char *SNCR_EFFDATE, char *SNCR_FAT_CODE,
         double SNCR_AMOUNT, char *SNCR_SNAP_TYPE, char *SNCR_CALLING_MOD,
         char *SNCR_SDMT_CODE, long SNCR_GDMT_SEQNBR, char *SNCR_TXAE_CODE,
         char *SNCR_LAST_CASH_UPD_DATE, char *SNCR_DSTCAC_DSDB_SEQNBR,
         long  SNCR_TXCUIF_SEQNBR, long SNCR_DSBA_ID, long SNCR_INRM_SEQNBR,
         long SNCR_RMNC_ID, long SNCR_TFDA_SEQNBR, long SNCR_TFBA_ID, long SNCR_LBTY_CODE);

/*---------------------------------------------------------------------------------------*/

int CNLM(char *cnlm_user_id, char *cnlm_ga_id, long cnlm_master_ev_id,
         char *cnlm_effdate, char *cnlm_process_amm, char *cnlm_doc_type,
         char *cnlm_use_prior_id)

{
  int rc = 0;
  char msgbuf[MAX_BUF_LEN];
  int  i = 0;
  int  num_fetched = 0;
  int  total_num_fetched = 0;
  int  more_to_fetch = TRUE;
  CNLM_INFO      lcinfo;
  LOAN_IND_INFO  liinfo;
  char cnlm_start_time[30]; 
  int loans_processed = 0;
  
  EXEC SQL BEGIN DECLARE SECTION;
   VARCHAR  v_cnlm_user_id[10];
   VARCHAR  v_cnlm_ga_id[14];
   VARCHAR  v_cnlm_effdate[12];
   long     l_cnlm_master_ev_id = 0;
	int 		l_cnlm_unprocessed_loans = 0;
   int   	l_cnlm_error_count = 0;
   long     cnlm_gc_id = 0;
   short    cnlm_gc_id_ind = -1;
   VARCHAR  v_cnlm_ar_sysdate[75];
   short    v_cnlm_ar_sysdate_ind  = -1;
   VARCHAR  v_less_one_yr_effdate[12];
   short    v_less_one_yr_effdate_ind = -1;
   VARCHAR  v_cnlm_grlnst_effdate[12];
   short    v_cnlm_grlnst_effdate_ind = -1;
   VARCHAR  v_cnlm_sdlnst_code[20];
   short    v_cnlm_sdlnst_code_ind = -1;
   VARCHAR  v_cnlm_loan_type_code[10];
   short    v_cnlm_loan_type_code_ind;
   long	   l_v_cnlm_cvpa_id;
   short   l_v_cnlm_ssn_ext;
   long	   v_cnlm_cvpa_id[MAX_ROWS];
   short    v_cnlm_cvpa_id_ind[MAX_ROWS];
	VARCHAR  v_cnlm_ssn[MAX_ROWS][10];
	short		v_cnlm_ssn_ind[MAX_ROWS];
   short    v_cnlm_ssn_ext[MAX_ROWS];
   short    v_cnlm_ssn_ext_ind[MAX_ROWS];
   long     cnlm_ind_id = 0;
   short    cnlm_ind_id_ind = -1;
	int		grp_loan_term_count;
	int      grp_loan_struc_count;

  EXEC SQL END DECLARE SECTION;
  
  
	if (strcmp(cnlm_process_amm, "Y") == 0)
		{
		rc = cnlm_calc_amortization_sched(cnlm_user_id, cnlm_ga_id, cnlm_master_ev_id, cnlm_effdate);
		return (rc);
		}
	
	msgbuf[0] = '\0';
	strcpy(cnlm_start_time,"");
        stov(v_cnlm_user_id,"");
	stov(v_cnlm_ga_id,"");
	stov(v_cnlm_ar_sysdate,"");
	stov(v_cnlm_effdate,"");
	stov(v_less_one_yr_effdate,"");
	
	
	/* if(!dbg_get_level())
		dbg_setup("CNLM","pa"); */
	
	memset(&lcinfo, 0, sizeof(lcinfo));
	memset(&liinfo, 0, sizeof(liinfo));

	if(getenv("CNLM_COMMIT") != NULL)
		strcpy(lcinfo.cnlm_commit,getenv("CNLM_COMMIT"));
	else
		strcpy(lcinfo.cnlm_commit,"TRUE");
		
	if (cnlm_open_error_file(cnlm_ga_id))
		{
		dbg_print_lvl(1, "Cannot open error file");
		return(FAILURE);
		}
		
	fprintf(err_file_ptr, "\n**** Scroll to end of email for statistics *****\n\n\n\n");

        strcpy(lcinfo.user_id,cnlm_user_id);
        stov(v_cnlm_user_id, cnlm_user_id);
	strcpy(lcinfo.ga_id,cnlm_ga_id);
	stov(v_cnlm_ga_id,cnlm_ga_id);
	lcinfo.master_ev_id = cnlm_master_ev_id;
	l_cnlm_master_ev_id = lcinfo.master_ev_id;
        strcpy(lcinfo.doc_type,cnlm_doc_type);
	strcpy(lcinfo.effdate,cnlm_effdate);
        strcpy(lcinfo.use_prior_id,cnlm_use_prior_id);
	stov(v_cnlm_effdate,cnlm_effdate); 
	
	
	

	
	EXEC SQL
	SELECT to_char(add_months(to_date(:v_cnlm_effdate,'DD-MON-YYYY'),-12),'DD-MON-YYYY')
	INTO :v_less_one_yr_effdate:v_less_one_yr_effdate_ind
	FROM DUAL;
	
	rc = ODB_chk_rc(NOEXIT,"ERROR - Selecting less_one_yr_effdate");
	
	if (!rc)
		{
		if (v_less_one_yr_effdate_ind != -1)
			{
			vtos(v_less_one_yr_effdate);
			strcpy(lcinfo.less_one_yr_effdate, (char*)v_less_one_yr_effdate.arr);
			}
		}
	else
		{
		rc = SQL_ERROR;
						
		fprintf(err_file_ptr, "Loan Conversion Effdate is invalid\n");
		fprintf(err_file_ptr, "SQL error message is %s\n\n", sqlca.sqlerrm.sqlerrmc);

      sprintf(msgbuf,"ERROR -  %d occurred while selecting less one year effdate"
                    ,sqlca.sqlcode);

      dbg_print_lvl(1,"%s",msgbuf);

      cnlm_handle_error("E",
                        "9999",
                        "0005",
                        "0000",
                        msgbuf,
                        &lcinfo,
                        &liinfo); 
								
		if (cnlm_mail_error_file(cnlm_user_id)) 
	  		{
	     	dbg_print_lvl(1,"Unable to email error file");  
	  	  	return (FAILURE);
	  		}

      return(rc); 
    }
	 
	EXEC SQL
	SELECT gc_id
	INTO :cnlm_gc_id:cnlm_gc_id_ind
	FROM GROUP_ACCOUNT
	WHERE ID = :v_cnlm_ga_id;
	
	rc = ODB_chk_rc(NOEXIT,"ERROR - Selecting gc_id from group_account");
	
	if (!rc)
		{
		if (cnlm_gc_id_ind != -1)
			{
			lcinfo.gc_id = cnlm_gc_id;
			}
		}
	else
		{
		rc = SQL_ERROR;
						
		fprintf(err_file_ptr, "Error - Could not find Group Client ID.\n");
		fprintf(err_file_ptr, "SQL error message is %s\n\n", sqlca.sqlerrm.sqlerrmc);

      sprintf(msgbuf,"ERROR -  %d occurred while selecting gc_id"
                    ,sqlca.sqlcode);

      dbg_print_lvl(1,"%s",msgbuf);

      cnlm_handle_error("E",
                        "9999",
                        "0005",
                        "0000",
                        msgbuf,
                        &lcinfo,
                        &liinfo); 
								
		if (cnlm_mail_error_file(cnlm_user_id)) 
	  		{
	     	dbg_print_lvl(1,"Unable to email error file");  
	  	  	return (FAILURE);
	  		}

      return(rc); 
    }
	 
	EXEC SQL
	SELECT COUNT(*)
	INTO :grp_loan_term_count
	FROM GRP_LOAN_TERM
	WHERE GA_ID = :v_cnlm_ga_id;
	
	if (grp_loan_term_count == 0)
		{
		rc = GRP_LOAN_ERROR;
						
		fprintf(err_file_ptr, "Error - Group Loan Term does not exist for ga_id: %s.\n", 
		      (char*)v_cnlm_ga_id.arr);
		
      sprintf(msgbuf,"ERROR -  %d occurred while selecting grp_loan_term count"
                    ,sqlca.sqlcode);

      dbg_print_lvl(1,"%s",msgbuf);

      cnlm_handle_error("E",
                        "9999",
                        "0005",
                        "0000",
                        msgbuf,
                        &lcinfo,
                        &liinfo); 
								
		if (cnlm_mail_error_file(cnlm_user_id)) 
	  		{
	     	dbg_print_lvl(1,"Unable to email error file");  
	  	  	return (FAILURE);
	  		}

      return(rc); 
		}
		
	EXEC SQL
	SELECT COUNT(*)
	INTO :grp_loan_struc_count
	FROM GRP_LOAN_STRUC
	WHERE GA_ID = :v_cnlm_ga_id;
	
	if (grp_loan_term_count == 0)
		{
		rc = GRP_LOAN_ERROR;
						
		fprintf(err_file_ptr, "Error - Group Loan Structure does not exist for ga_id: %s.\n", 
		      (char*)v_cnlm_ga_id.arr);
		
      sprintf(msgbuf,"ERROR -  %d occurred while selecting grp_loan_struc"
                    ,sqlca.sqlcode);

      dbg_print_lvl(1,"%s",msgbuf);

      cnlm_handle_error("E",
                        "9999",
                        "0005",
                        "0000",
                        msgbuf,
                        &lcinfo,
                        &liinfo); 
								
		if (cnlm_mail_error_file(cnlm_user_id)) 
	  		{
	     	dbg_print_lvl(1,"Unable to email error file");  
	  	  	return (FAILURE);
	  		}

      return(rc); 
		}

	strcpy(cnlm_start_time,loan_current_time());

	dbg_print_lvl(1,"\nWelcome to CNLM, Start time: %s",cnlm_start_time);
	dbg_print_lvl(1,  "-------------------------------");
	dbg_print_lvl(1,"Received variables");
        dbg_print_lvl(1," USER_ID.................: %s",(char*)v_cnlm_user_id.arr);
	dbg_print_lvl(1," GA_ID...................: %s",lcinfo.ga_id);
	dbg_print_lvl(1," MASTER_EV_ID............: %d",lcinfo.master_ev_id);
	dbg_print_lvl(1," EFFDATE.................: %s\n",lcinfo.effdate);
	dbg_print_lvl(1,"DOC_TYPE.................: %s\n",lcinfo.doc_type);

	EXEC SQL
	SELECT COUNT(*)
	INTO :l_cnlm_unprocessed_loans
	FROM WORK_CONV_PART_LOAN_ACCT
	WHERE LOAN_EV_ID IS null
	AND CVPA_ID IN (SELECT ID
	                FROM WORK_CONV_PART
						 WHERE EV_ID = :l_cnlm_master_ev_id);
  
  

      dbg_print_lvl(1,"Select all the individuals for conversion");
   
      EXEC SQL DECLARE cnlm_get_conv_parts_cur CURSOR FOR
      SELECT la.cvpa_id, p.ssn, p.ssn_ext
      FROM work_conv_part_loan_acct la, work_conv_part p
      WHERE p.ev_id = :l_cnlm_master_ev_id
		AND p.id = la.cvpa_id
		AND la.loan_ev_id is null
		GROUP BY la.cvpa_id, p.ssn, p.ssn_ext;
   
      EXEC SQL OPEN cnlm_get_conv_parts_cur;

      rc = ODB_chk_norow_rc(NOEXIT,"ERROR - Openning the cnlm_get_conv_parts_cur");

      if(!rc)
      {
        do
        {
          for (i = 0; i < MAX_ROWS; i++)
          {
            v_cnlm_cvpa_id[i] = -1;
            v_cnlm_cvpa_id_ind[i] = -1;
            stov(v_cnlm_ssn[i],"");
            v_cnlm_ssn_ext[i] = -1;
            v_cnlm_ssn_ind[i] = -1;
          }

          EXEC SQL FETCH cnlm_get_conv_parts_cur
                   INTO  :v_cnlm_cvpa_id:v_cnlm_cvpa_id_ind,
						       :v_cnlm_ssn:v_cnlm_ssn_ind,
                         :v_cnlm_ssn_ext:v_cnlm_ssn_ext_ind;

          rc = ODB_chk_rc(NOEXIT,"ERROR - Fetching the cnlm_get_conv_parts_cur");

          if(!rc)
          {
            num_fetched = sqlca.sqlerrd[2] - total_num_fetched;
            total_num_fetched = sqlca.sqlerrd[2];

            if(sqlca.sqlcode == ORA_NOROW)
            {
              more_to_fetch = FALSE;
            }

            dbg_print_lvl(1,"Num_fetched %d",num_fetched);

            while(num_fetched > 0)
            {
              for(i = 0; i < num_fetched; i++)
              {
                memset(&liinfo, 0, sizeof(liinfo));
               
                liinfo.errors = 0;

                if(v_cnlm_cvpa_id_ind[i] == -1)
                {
                  v_cnlm_cvpa_id[i] = -1; 
                }
                else
                {
                  l_v_cnlm_cvpa_id = v_cnlm_cvpa_id[i];
                  liinfo.cvpa_id = v_cnlm_cvpa_id[i];
                }
					 
	        if (v_cnlm_ssn_ind[i] == -1)
		    stov(v_cnlm_ssn[i],"");
                else
	 	{
                    vtos(v_cnlm_ssn[i]);
	            strcpy(liinfo.ssn,(char*)v_cnlm_ssn[i].arr);
		}
                if (v_cnlm_ssn_ext_ind[i] == -1)
                    v_cnlm_ssn_ext[i] = -1;
                else
                {
                    l_v_cnlm_ssn_ext = v_cnlm_ssn_ext[i];
                    liinfo.ssn_ext = v_cnlm_ssn_ext[i];              
                }
                
                dbg_print_lvl(1,"\n---->Processing new converson for cvpa_id %ld\n",v_cnlm_cvpa_id[i]);
                dbg_print_lvl(1,"Selecting the ind_id..."); 
					 
                cnlm_ind_id = 0;
                cnlm_ind_id_ind = -1;
					 
					 dbg_print_lvl(1, "ev_id is %ld", l_cnlm_master_ev_id);
					 dbg_print_lvl(1, "ga_id is %s", v_cnlm_ga_id.arr);
					 dbg_print_lvl(1, "cvpa_id is %ld", l_v_cnlm_cvpa_id);

					 EXEC SQL
					 SELECT i.id
					 INTO :cnlm_ind_id:cnlm_ind_id_ind
					 FROM part_agrmt p,
					      work_conv_part w,
					      individual i
					 WHERE w.ev_id = :l_cnlm_master_ev_id
					 AND   p.ga_id = :v_cnlm_ga_id
					 AND   w.id = :l_v_cnlm_cvpa_id
					 AND   w.ssn = i.ssn
                                         AND   nvl(nvl(w.ssn_ext,i.ssn_ext),0) = nvl(i.ssn_ext,0)
					 AND   p.ind_id = i.id
                                         AND   p.status_code = 'A';

                rc =  ODB_chk_norow_rc(NOEXIT,"ERROR - Selecting individual id");

                if(!rc)
                {
                  if(cnlm_ind_id_ind == -1)
                  {
                    cnlm_ind_id = 0;
                  }
                  else
                  {
                    liinfo.ind_id = cnlm_ind_id;
                  }

                  dbg_print_lvl(1,"Returned...");
                  dbg_print_lvl(1," IND_ID................:%d\n",cnlm_ind_id);

                  dbg_print_lvl(1,"Calling cnlm_process_conv_loan_info");

                  rc = cnlm_process_conv_loan_info(&lcinfo, &liinfo, cnlm_user_id);
                  if(!rc)
                  {
                    dbg_print_lvl(1,"Processing for individual %d Successful!!\n",cnlm_ind_id);
                  }
                  else
                  {
						  EXEC SQL ROLLBACK WORK;
                    dbg_print_lvl(1,"ERROR - An error occurred in cnlm_process_conv_loan_info"); 
                  }
                }
                else
                {
                  rc = SQL_ERROR;
						
						fprintf(err_file_ptr, "ssn %s is not a participant in group %s\n", liinfo.ssn, (char*)v_cnlm_ga_id.arr);
						fprintf(err_file_ptr, "SQL error message is %s\n\n", sqlca.sqlerrm.sqlerrmc);
						
                  sprintf(msgbuf,"ERROR -  %d occurred while selecting the individual id"
                                ,sqlca.sqlcode);
										  
						if (cnlm_mail_error_file(cnlm_user_id)) 
	  						{
	     					dbg_print_lvl(1,"Unable to email error file");  
	  	  					return (FAILURE);
	  						}

                  dbg_print_lvl(1,"%s",msgbuf);
                  
                  cnlm_handle_error("E",
                                    "9999",
                                    "0005",
                                    "0000",
                                    msgbuf,
                                    &lcinfo,
                                    &liinfo); 
											
                  /* return(rc); */
                }
              }
              num_fetched = 0;
            }/*  End of while(num_fetched > 0) */
          }
          else
          {
            rc = SQL_ERROR;
				
				fprintf(err_file_ptr, "\nERROR - Could not find any loans to convert.\n");
				fprintf(err_file_ptr, "        Make sure there is at least one loan with\n");
				fprintf(err_file_ptr, "        a blank Loan EV ID\n\n");
				
				if (cnlm_mail_error_file(cnlm_user_id)) 
	  				{
	     			dbg_print_lvl(1,"Unable to email error file");  
	  	  			return (FAILURE);
	  				}
				

            sprintf(msgbuf,"ERROR -  %d occurred while fetching the cnlm_get_conv_parts_cur"
                          ,sqlca.sqlcode);

            dbg_print_lvl(1,"%s",msgbuf);

            cnlm_handle_error("E",
                              "9999",
                              "0010",
                              "0000",
                              msgbuf,
                              &lcinfo,
                              &liinfo);
            return(rc);
          }
        }
        while(more_to_fetch);
      }
      else
      {
        rc = SQL_ERROR;
		  
		  fprintf(err_file_ptr, "\nERROR - Could not find any ppts with loans to convert.\n");
		  fprintf(err_file_ptr, "        Make sure there is at least one loan with\n");
		  fprintf(err_file_ptr, "        a blank Loan EV ID\n\n");
		  
		  if (cnlm_mail_error_file(cnlm_user_id)) 
	  		{
	     	dbg_print_lvl(1,"Unable to email error file");  
	  	  	return (FAILURE);
	  		}
		  

        sprintf(msgbuf,"ERROR -  %d occurred while openning the cnlm_get_conv_parts_cur"
                      ,sqlca.sqlcode);

        dbg_print_lvl(1,"%s",msgbuf);

        cnlm_handle_error("E",
                          "9999",
                          "0015",
                          "0000",
                          msgbuf,
                          &lcinfo,
                          &liinfo);
        return(rc);
      }
    /* } */
	 
   EXEC SQL
	SELECT COUNT(*)
	INTO :l_cnlm_error_count
	FROM WORK_CONV_PART_LOAN_ACCT
	WHERE LOAN_EV_ID IS null
	AND CVPA_ID IN (SELECT ID
	                FROM WORK_CONV_PART
						 WHERE EV_ID = :l_cnlm_master_ev_id);
						 
  loans_processed = l_cnlm_unprocessed_loans - l_cnlm_error_count;
  
  fprintf(err_file_ptr, "\n\n*****************************************************************\n\n");
  fprintf(err_file_ptr, "                 LOAN CONVERSION STATISTICS\n");
  fprintf(err_file_ptr, "                 --------------------------\n\n");
  fprintf(err_file_ptr, "Number of Loans Processed is %d\n", l_cnlm_unprocessed_loans);
  fprintf(err_file_ptr, "Number of Successfully Converted Loans is %d\n", loans_processed);
  fprintf(err_file_ptr, "Number of Loans NOT Converted is %d\n", l_cnlm_error_count);
  
  
  if (cnlm_mail_error_file(cnlm_user_id)) 
	  {
	     dbg_print_lvl(1,"Unable to email error file");  
	  	  return (FAILURE);
	  }
    

  dbg_print_lvl(1, "Leaving CNLM, Start time: %s",cnlm_start_time);
  dbg_print_lvl(1, "              Stop  time: %s\n",loan_current_time()); 

  return(rc);
}


/**********************************************************************
 * Function    :   cnlm_process_conv_loan_info
 *
 * Parameters  :   cnlm_info, loan_acct_info
 *
 * Called by   :   CNLM()
 *
nt cnlm_validate_conv_info(CNLM_INFO *lcinfo_ptr,
                            LOAN_IND_INFO *liinfo_ptr,
                            LOAN_ACCT_INFO *lainfo_ptr)
 * Calls       :   cnlm_handle_error (errors) 
 *
 * Returns     :   rc  - Success (0) or Failure (anything else)
 *
 * Description :   
 *
 * Assumptions :   dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_process_conv_loan_info(CNLM_INFO *lcinfo_ptr,
                                LOAN_IND_INFO *liinfo_ptr,
                                char* user_id)
{
  int rc = 0;
  long cnlm_process_hist_once = 0; 
  char msgbuf[MAX_BUF_LEN];
  int  i = 0;
  int  num_fetched = 0;
  int  total_num_fetched = 0;
  int  more_to_fetch = TRUE;
  long rtrn_acty_ev_id;
  LOAN_ACCT_INFO lainfo;
 
  char lams_ind_id[11];
  char lams_ga_id[14];
  char lams_gc_id[11];
  char lams_ev_id[11];
  char lams_inlnag_seqnbr[11];
  char lams_doc_type[7];
  char lams_effdate[13];
  char lams_start_date[13];
  char lams_loan_amt[19];
  char lams_loan_term[4];
  char lams_fixed_int_rate[10];
  char lams_repay_mthd_code[11];
  char lams_repay_freq[3];
  char lams_repay_amt[19];

  EXEC SQL BEGIN DECLARE SECTION;
   long    cnlm_chk_for_hist = 0;
   long    cnlm_master_ev_id = 0;
   long    cnlm_inlnag_seqnbr = 0;
   long    cnlm_ind_id = 0;
   VARCHAR v_cnlm_ga_id[14];
   VARCHAR v_cnlm_bal_effdate[12];
   double  cnlm_int_amt = 0;
   short   cnlm_int_amt_ind = -1; 
   long    v_cnlm_cvpa_id;
   VARCHAR cnlm_prev_loan_id[MAX_ROWS][21]; 
   short   cnlm_prev_loan_id_ind[MAX_ROWS];
   VARCHAR cnlm_loan_type[MAX_ROWS][25]; 
   short   cnlm_loan_type_ind[MAX_ROWS];   
	long    v_cnlm_ev_id;
   VARCHAR v_cnlm_prev_loan_id[21]; 
   VARCHAR v_cnlm_loan_type[25];
   long    cnlm_loan_term[MAX_ROWS]; 
   short   cnlm_loan_term_ind[MAX_ROWS];
   VARCHAR cnlm_loan_term_qual[MAX_ROWS][3];
   short   cnlm_loan_term_qual_ind[MAX_ROWS];
   VARCHAR cnlm_maturity_date[MAX_ROWS][13];
   short   cnlm_maturity_date_ind[MAX_ROWS];
   double  cnlm_loan_amt[MAX_ROWS];
   short   cnlm_loan_amt_ind[MAX_ROWS];
   double  cnlm_plan_yr_end_prin_bal[MAX_ROWS];
   short   cnlm_plan_yr_end_prin_bal_ind[MAX_ROWS];
   VARCHAR cnlm_repay_freq[MAX_ROWS][3];
   short   cnlm_repay_freq_ind[MAX_ROWS];
   VARCHAR cnlm_repay_mthd_code[MAX_ROWS][11];
   short   cnlm_repay_mthd_code_ind[MAX_ROWS];
   VARCHAR cnlm_default_ind[MAX_ROWS][2];
   short   cnlm_default_ind_ind[MAX_ROWS];
   VARCHAR cnlm_default_date[MAX_ROWS][13];
   short   cnlm_default_date_ind[MAX_ROWS];
   double  cnlm_repay_amt[MAX_ROWS];
   short   cnlm_repay_amt_ind[MAX_ROWS];
   VARCHAR cnlm_first_due_date[MAX_ROWS][13];
   short   cnlm_first_due_date_ind[MAX_ROWS];
   double  cnlm_orig_loan_amt[MAX_ROWS];
   short   cnlm_orig_loan_amt_ind[MAX_ROWS];
   VARCHAR cnlm_orig_effdate[MAX_ROWS][13];
   short   cnlm_orig_effdate_ind[MAX_ROWS];
   double  cnlm_fixed_int_rate[MAX_ROWS];
   short   cnlm_fixed_int_rate_ind[MAX_ROWS];
   double  cnlm_origination_fee[MAX_ROWS];
   short   cnlm_origination_fee_ind[MAX_ROWS];
	double  cnlm_principal_amount_paid[MAX_ROWS];
	short   cnlm_principal_amount_paid_ind[MAX_ROWS];
	int	  cnlm_history_provided;
  EXEC SQL END DECLARE SECTION;

  msgbuf[0] = '\0';
  stov(v_cnlm_bal_effdate,"");
  stov(v_cnlm_ga_id,"");
  stov(v_cnlm_prev_loan_id,"");
  stov(v_cnlm_loan_type,"");
  memset(&lainfo, 0, sizeof(lainfo));
  
  cnlm_master_ev_id = lcinfo_ptr->master_ev_id;
  stov(v_cnlm_bal_effdate,lcinfo_ptr->effdate);  
  v_cnlm_cvpa_id = liinfo_ptr->cvpa_id;
  stov(v_cnlm_ga_id,lcinfo_ptr->ga_id);
  cnlm_ind_id = liinfo_ptr->ind_id;

  dbg_print_lvl(1,"Entering cnlm_process_conv_loan_info");
  dbg_print_lvl(1,"------------------------------------");
  dbg_print_lvl(1, "Selecting all the conversion loan information...");
  dbg_print_lvl(1," MASTER_EV_ID................:%d",cnlm_master_ev_id);
  dbg_print_lvl(1," CVPA_ID.........................:%ld",v_cnlm_cvpa_id);

  EXEC SQL DECLARE cnlm_get_conv_info_cur CURSOR FOR
  SELECT  la.prior_loan_id,
          nvl(la.LOAN_TERM,0),
          nvl(la.LOAN_TERM_QUAL,'X'),    
          to_char(la.MATURITY_DATE,'DD-MON-YYYY'),    
          nvl(la.LOAN_AMT,0),        
          nvl(la.PLAN_YR_END_PRIN_BAL,0),    
          nvl(la.REPAY_FREQ,'x'),           
          nvl(la.REPAY_MTHD_CODE,'x'),     
          nvl(la.DEFAULT_IND,'N'),    
          to_char(la.DEFAULT_DATE,'DD-MON-YYYY'),       
          nvl(la.REPAY_AMT,0),
          to_char(la.FIRST_DUE_DATE,'DD-MON-YYYY'),  
          nvl(la.ORIG_LOAN_AMT, 0),
          to_char(la.ORIG_EFFDATE,'DD-MON-YYYY'),                     
          nvl(la.FIXED_INT_RATE, 0),
          nvl(la.ORIGINATION_FEE,0),
		  nvl(la.PRINCIPAL_AMOUNT_PAID, 0),
		  la.loan_reason_code
  FROM    work_conv_part_loan_acct la
  WHERE la.cvpa_id = :v_cnlm_cvpa_id
  AND   la.loan_ev_id IS null; 

  EXEC SQL OPEN cnlm_get_conv_info_cur;

  rc = ODB_chk_norow_rc(NOEXIT,"ERROR - Openning the cnlm_get_conv_info_cur");

  if(!rc)
  {
    do
    {
      for (i = 0; i < MAX_ROWS; i++)
      {
        stov(cnlm_prev_loan_id[i],"");
        cnlm_prev_loan_id_ind[i] = -1;	
        stov(cnlm_loan_type[i],"");
        cnlm_loan_type_ind[i] = -1;		
        cnlm_loan_term[i] = 0;
        cnlm_loan_term_ind[i] = -1;
        stov(cnlm_loan_term_qual[i],"");
        cnlm_loan_term_qual_ind[i] = -1;
        stov(cnlm_maturity_date[i],"");
        cnlm_maturity_date_ind[i] = -1;
        cnlm_loan_amt[i] = 0;
        cnlm_loan_amt_ind[i] = -1;
        cnlm_plan_yr_end_prin_bal[i] = 0;
        cnlm_plan_yr_end_prin_bal_ind[i] = -1;
        stov(cnlm_repay_freq[i],"");
        cnlm_repay_freq_ind[i] = -1;
        stov(cnlm_repay_mthd_code[i],"");
        cnlm_repay_mthd_code_ind[i] = -1;
        stov(cnlm_default_ind[i],"");
        cnlm_default_ind_ind[i] = -1;
        stov(cnlm_default_date[i],"");
        cnlm_default_date_ind[i] = -1;
        cnlm_repay_amt[i] = 0;
        cnlm_repay_amt_ind[i] = -1;
        stov(cnlm_first_due_date[i],"");
        cnlm_first_due_date_ind[i] = -1;
        cnlm_orig_loan_amt[i] = 0;
        cnlm_orig_loan_amt_ind[i] = -1;
        stov(cnlm_orig_effdate[i],"");
        cnlm_orig_effdate_ind[i] = -1;
        cnlm_fixed_int_rate[i] = 0;
        cnlm_fixed_int_rate_ind[i] = -1;
        cnlm_origination_fee[i] = 0;
        cnlm_origination_fee_ind[i] = -1;
		  cnlm_principal_amount_paid[i] = 0;
		  cnlm_principal_amount_paid_ind[i] = -1;
      }

      EXEC SQL FETCH cnlm_get_conv_info_cur
               INTO  :cnlm_prev_loan_id:cnlm_prev_loan_id_ind,
                     :cnlm_loan_term:cnlm_loan_term_ind,
                     :cnlm_loan_term_qual:cnlm_loan_term_qual_ind,
                     :cnlm_maturity_date:cnlm_maturity_date_ind,
                     :cnlm_loan_amt:cnlm_loan_amt_ind,
                     :cnlm_plan_yr_end_prin_bal:cnlm_plan_yr_end_prin_bal_ind,
                     :cnlm_repay_freq:cnlm_repay_freq_ind,
                     :cnlm_repay_mthd_code:cnlm_repay_mthd_code_ind,
                     :cnlm_default_ind:cnlm_default_ind_ind,
                     :cnlm_default_date:cnlm_default_date_ind,
                     :cnlm_repay_amt:cnlm_repay_amt_ind,
                     :cnlm_first_due_date:cnlm_first_due_date_ind,
                     :cnlm_orig_loan_amt:cnlm_orig_loan_amt_ind,
                     :cnlm_orig_effdate:cnlm_orig_effdate_ind,
                     :cnlm_fixed_int_rate:cnlm_fixed_int_rate_ind,
                     :cnlm_origination_fee:cnlm_origination_fee_ind,
					 :cnlm_principal_amount_paid:cnlm_principal_amount_paid_ind,
					 :cnlm_loan_type:cnlm_loan_type_ind;

      
      rc = ODB_chk_rc(NOEXIT,"ERROR - Fetching the cnlm_get_conv_info_cur");

      if(!rc)
      {
        num_fetched = sqlca.sqlerrd[2] - total_num_fetched;
        total_num_fetched = sqlca.sqlerrd[2];

        if(sqlca.sqlcode == ORA_NOROW)
        {
          more_to_fetch = FALSE;
        }

        dbg_print_lvl(1,"Num_fetched %d",num_fetched);

        while(num_fetched > 0)
        {
          for(i = 0; i < num_fetched; i++)
          {
            EXEC SQL SAVEPOINT cnlm_start_new_loan;

            memset(&lainfo, 0, sizeof(lainfo));

            if(cnlm_prev_loan_id_ind[i] == -1)
            {
              stov(cnlm_prev_loan_id[i],"");
            }
            else
            {
              stov(v_cnlm_prev_loan_id,"");
              vtos(cnlm_prev_loan_id[i]);
              stov(v_cnlm_prev_loan_id,(char *)cnlm_prev_loan_id[i].arr);
            }

            if(cnlm_loan_term_ind[i] == -1)
            {
              cnlm_loan_term[i] = 0;
            }

            if(cnlm_loan_term_qual_ind[i] == -1)
            {
              stov(cnlm_loan_term_qual[i],"");
            }
            else
            {
              vtos(cnlm_loan_term_qual[i]);
            }

            if(cnlm_maturity_date_ind[i] == -1)
            {
              stov(cnlm_maturity_date[i],"");
            }
            else
            {
              vtos(cnlm_maturity_date[i]);
            }

            if(cnlm_loan_amt_ind[i] == -1)
            { 
              cnlm_loan_amt[i] = 0;
            }

            if(cnlm_plan_yr_end_prin_bal_ind[i] == -1)
            {
              cnlm_plan_yr_end_prin_bal[i] = 0;
            }

            if(cnlm_repay_freq_ind[i] == -1)
            {
              stov(cnlm_repay_freq[i],"");
            }
            else
            {
              vtos(cnlm_repay_freq[i]);
            }
 
            if(cnlm_repay_mthd_code_ind[i] == -1)
            {
              stov(cnlm_repay_mthd_code[i],"");
            }
            else
            {
              vtos(cnlm_repay_mthd_code[i]);
            }
  
            if(cnlm_default_ind_ind[i] == -1)
            {
              stov(cnlm_default_ind[i],"");
            }
            else
            {
              vtos(cnlm_default_ind[i]);
            } 
        
            if(cnlm_default_date_ind[i] == -1)
            { 
              stov(cnlm_default_date[i],"");
            }
            else
            {
              vtos(cnlm_default_date[i]);
            }

            if(cnlm_repay_amt_ind[i] == -1)
            {
              cnlm_repay_amt[i] = 0;
            }
 
            if(cnlm_first_due_date_ind[i] == -1)
            {
              stov(cnlm_first_due_date[i],"");
            }
            else
            {
              vtos(cnlm_first_due_date[i]);
            }
        
            if(cnlm_orig_loan_amt_ind[i] == -1)
            {
              cnlm_orig_loan_amt[i] = 0;
            }
 
            if(cnlm_orig_effdate_ind[i] == -1)
            {
              stov(cnlm_orig_effdate[i],"");
            }
            else
            {
              vtos(cnlm_orig_effdate[i]);
            }

            if(cnlm_fixed_int_rate_ind[i] == -1)
            {
              cnlm_fixed_int_rate[i] = 0;
            }
       
            if(cnlm_origination_fee_ind[i] == -1)
            { 
              cnlm_origination_fee[i] = 0;
            }
				
				if(cnlm_principal_amount_paid_ind[i] == -1)
					cnlm_principal_amount_paid[i] = 0;

			if(cnlm_loan_type_ind[i] == -1)
            {
              stov(cnlm_loan_type[i],"");
            }
            else
            {
              stov(v_cnlm_loan_type,"");
              vtos(cnlm_loan_type[i]);
              stov(v_cnlm_loan_type,(char *)cnlm_loan_type[i].arr);
            }
			
            strcpy(lainfo.prev_loan_id,(char *)cnlm_prev_loan_id[i].arr); 
            lainfo.loan_term = cnlm_loan_term[i];
            strcpy(lainfo.loan_term_qual,(char *)cnlm_loan_term_qual[i].arr);
            strcpy(lainfo.maturity_date,(char *)cnlm_maturity_date[i].arr);
            lainfo.plan_yr_end_prin_bal = cnlm_plan_yr_end_prin_bal[i];
            lainfo.loan_amt = cnlm_loan_amt[i];
            strcpy(lainfo.repay_freq,(char *)cnlm_repay_freq[i].arr);
            strcpy(lainfo.repay_mthd_code,(char *)cnlm_repay_mthd_code[i].arr);
            strcpy(lainfo.default_ind,(char *)cnlm_default_ind[i].arr);
            strcpy(lainfo.default_date,(char *)cnlm_default_date[i].arr);
            lainfo.repay_amt = cnlm_repay_amt[i];
            strcpy(lainfo.first_due_date,(char *)cnlm_first_due_date[i].arr);  
            lainfo.orig_loan_amt = cnlm_orig_loan_amt[i];
            strcpy(lainfo.orig_effdate,(char *)cnlm_orig_effdate[i].arr);
            lainfo.fixed_int_rate = cnlm_fixed_int_rate[i]; 
            lainfo.origination_fee = cnlm_origination_fee[i];
			lainfo.principal_amount_paid = cnlm_principal_amount_paid[i];
			strcpy(lainfo.loan_type,(char *)cnlm_loan_type[i].arr); 
			
            dbg_print_lvl(1,"\nProcessing conversion for cvpa_id %ld, loan[%s]..."
                           ,v_cnlm_cvpa_id,cnlm_prev_loan_id[i].arr);
            dbg_print_lvl(1,"This participant currently has %d error(s)",liinfo_ptr->errors);
            dbg_print_lvl(2," prev_loan_id........:%s",cnlm_prev_loan_id[i].arr);
            dbg_print_lvl(2," LOAN_TERM............:%d", cnlm_loan_term[i]);
            dbg_print_lvl(2," LOAN_TERM_QUAL.......:%s",cnlm_loan_term_qual[i].arr);
            dbg_print_lvl(2," MATURITY_DATE........:%s",cnlm_maturity_date[i].arr);
            dbg_print_lvl(2," PLAN_YR_END_PRIN_BAL.:%f",cnlm_plan_yr_end_prin_bal[i]);
            dbg_print_lvl(2," LOAN_AMT.............:%f",cnlm_loan_amt[i]);
            dbg_print_lvl(2," REPAY_FREQ...........:%s",cnlm_repay_freq[i].arr);
            dbg_print_lvl(2," REPAY_MTHD_CODE......:%s",cnlm_repay_mthd_code[i].arr);
            dbg_print_lvl(2," DEFAULT_IND..........:%s",cnlm_default_ind[i].arr);
            dbg_print_lvl(2," DEFAULT_DATE.........:%s",cnlm_default_date[i].arr);
            dbg_print_lvl(2," REPAY_AMT............:%f",cnlm_repay_amt[i]);
            dbg_print_lvl(2," FIRST_DUE_DATE.......:%s",cnlm_first_due_date[i].arr);
            dbg_print_lvl(2," ORIG_LOAN_AMT........:%f",cnlm_orig_loan_amt[i]);
            dbg_print_lvl(2," ORIG_EFFDATE.........:%s",cnlm_orig_effdate[i].arr);
            dbg_print_lvl(2," FIXED_INT_RATE.......:%f",cnlm_fixed_int_rate[i]);
            dbg_print_lvl(2," ORIGINATION_FEE......:%f\n",cnlm_origination_fee[i]);
			dbg_print_lvl(2," LOAN_REASON_CODE......:%f\n",cnlm_loan_type[i].arr);
				
            dbg_print_lvl(1,"Calling cnlm_validate_conv_info");
  
            rc = cnlm_validate_conv_info(lcinfo_ptr,
                                         liinfo_ptr,
                                         &lainfo);
				if(!rc)
            	{
				  
             	cnlm_inlnag_seqnbr = 0;
                                if(strcmp(lcinfo_ptr->use_prior_id, "Y") == 0)
                                   cnlm_inlnag_seqnbr = strtol(lainfo.prev_loan_id,NULL,10);
                                else
                                   cnlm_inlnag_seqnbr = lainfo.inlnag_seqnbr;

        			dbg_print_lvl(1,"Calling cnlm_create_loan_acct");
        			dbg_print_lvl(2," INLNAG_SEQNBR.....:%d",cnlm_inlnag_seqnbr);
        			dbg_print_lvl(2," LOAN_AMT..........:%f",cnlm_loan_amt[i]);
        			dbg_print_lvl(2," EFFDATE...........:%s\n",v_cnlm_bal_effdate.arr); 

        			rc = cnlm_create_loan_acct(lcinfo_ptr,
                                          		 liinfo_ptr,
                                          		 &lainfo,
                                          		 cnlm_inlnag_seqnbr,
                                          		 cnlm_loan_amt[i],
                                          		 (char *)v_cnlm_bal_effdate.arr);

        			if(!rc)
        				{
			
						dbg_print_lvl(1,"Calling cnlm_add_event_and_step");
				  		rc = cnlm_add_event_and_step(lcinfo_ptr, liinfo_ptr, &lainfo, user_id);
              
              		if(!rc)
              			{
				    		v_cnlm_ev_id = liinfo_ptr->ev_id;
                  	dbg_print_lvl(1,"Calling cnlm_create_loan_bal"); 

                  	rc = cnlm_create_loan_bal(lcinfo_ptr,
                                            liinfo_ptr,
                                            &lainfo,
                                            cnlm_inlnag_seqnbr, 
                                            "Z",
                                            "01-JAN-1950",
                                             0,
                                             0);

                  	if(!rc)
								{
                  		dbg_print_lvl(1,"Calling cnlm_create_loan_acty");
                  		dbg_print_lvl(2," INLNAG_SEQNBR.....:%d",cnlm_inlnag_seqnbr);
                  		dbg_print_lvl(2," LOAN_AMT..........:%f",cnlm_loan_amt[i]);
                  		dbg_print_lvl(2," EFFDATE...........:%s\n",v_cnlm_bal_effdate.arr);

                  		rc = cnlm_create_loan_acty(lcinfo_ptr,
                                             		liinfo_ptr,
                                             		&lainfo,
                                             		cnlm_inlnag_seqnbr,
                                             		cnlm_loan_amt[i],
                                             		(char *)v_cnlm_bal_effdate.arr);

                  		if(!rc)
                    			{
                      		dbg_print_lvl(1,"Calling cnlm_process_assessments");

                     		rc = cnlm_process_assessments(lcinfo_ptr,
                                                    liinfo_ptr,
                                                    &lainfo);
                      		if(!rc)
                      			{
                					dbg_print_lvl(1,"Calling cnlm_create_snapshots");

                					rc = cnlm_create_snapshots(lcinfo_ptr,
                                                   liinfo_ptr,
                                                   &lainfo); 
                					if(!rc)
                						{
                          			dbg_print_lvl(1,"Calling cnlm_process_mnty_splt");

                          			rc = cnlm_process_mnty_splt(lcinfo_ptr,
                                                     liinfo_ptr,
                                                     &lainfo);

                          			if(!rc)
                          				{
                            			if(!cnlm_process_hist_once)
                            				{
                              			dbg_print_lvl(1," PROCESS_HIST_ONCE...........:%d",cnlm_process_hist_once);

                              			cnlm_process_hist_once++;
										
													EXEC SQL
													SELECT COUNT(*)
													INTO :cnlm_history_provided
													FROM WORK_CONV_PART_LOAN_HIST
													WHERE CVPA_ID = :v_cnlm_cvpa_id;

                              			EXEC SQL
                              			SELECT count(*)
                              			INTO  :cnlm_chk_for_hist 
                              			FROM  loan_bal 
                              			WHERE ga_id = :v_cnlm_ga_id
                              			AND   ind_id = :cnlm_ind_id
                              			AND   inlnag_seqnbr = 0;

                              			rc = ODB_chk_rc(NOEXIT,"ERROR - Checking if loan history has been processed");                  


                              			if(!rc)
                              				{
                                				dbg_print_lvl(1," CHECK_FOR_HISTORY...........:%d\n",cnlm_chk_for_hist);

                                				if(cnlm_chk_for_hist == 0 && cnlm_history_provided > 0) 
                                					{
										  	  
                              	 				rc = cnlm_process_loan_history(lcinfo_ptr,
                                                                 liinfo_ptr,
                                                                 &lainfo); 

                                  				if(rc)
                                  					{
                                    				dbg_print_lvl(1,"ERROR - An error occurred in cnlm_process_loan_history");
																}
                                					}
                                				else
                                					{
                              	  				dbg_print_lvl(1,"Loan history already exists");
                                					} 
                              				}
                              			else
                              				{
                                				rc = SQL_ERROR;


                              				sprintf(msgbuf,"ERROR - Selecting for loan hist cvpa_id %ld, inlnag_seqnbr %ld", 
                                             			  v_cnlm_cvpa_id,cnlm_inlnag_seqnbr);

                              				dbg_print_lvl(1,"%s",msgbuf);

                              				cnlm_handle_error("E",
                                                				"9999",
                                                				"0023",
                                                				"0000",
                                                				msgbuf,
                                                				lcinfo_ptr,
                                                				liinfo_ptr);

                              				return(rc);
                              			 	}
                            				}
                            			else
                            				{
                              			dbg_print_lvl(1,"Loan history has already been processed");
                            				}

                            			if(!rc)
                            				{
                              			EXEC SQL
                              			UPDATE work_conv_part_loan_acct
                              			SET loan_ev_id = :v_cnlm_ev_id
                              			WHERE cvpa_id = :v_cnlm_cvpa_id
                              			AND   prior_loan_id = :v_cnlm_prev_loan_id
                              			AND   loan_ev_id is null;
/************ CALL LAMS TO CREATE DOCUMENT ******************/
if ((strcmp(lcinfo_ptr->doc_type,"0") == 0) || (strcmp(lcinfo_ptr->doc_type,"1") == 0) || (strcmp(lcinfo_ptr->doc_type,"2") == 0))
  {

    dbg_print_lvl(1,"Calling LAMS with...");

  sprintf(lams_ind_id,"%ld",liinfo_ptr->ind_id);
  strcpy(lams_ga_id,lcinfo_ptr->ga_id);
  sprintf(lams_ev_id,"%ld",lcinfo_ptr->master_ev_id);
  sprintf(lams_gc_id,"%ld",lcinfo_ptr->gc_id);

  if(strcmp(lcinfo_ptr->use_prior_id, "Y") == 0)
     strcpy(lams_inlnag_seqnbr, lainfo.prev_loan_id); 
  else
     sprintf(lams_inlnag_seqnbr,"%ld",lainfo.inlnag_seqnbr);
  strcpy(lams_doc_type,lcinfo_ptr->doc_type);
  strcpy(lams_effdate,lcinfo_ptr->effdate);
  strcpy(lams_start_date,lainfo.first_due_date);
  sprintf(lams_loan_amt,"%f",lainfo.loan_amt);
  sprintf(lams_loan_term,"%ld",lainfo.loan_term);
  sprintf(lams_fixed_int_rate,"%f",lainfo.fixed_int_rate);
  strcpy(lams_repay_mthd_code,lainfo.repay_mthd_code);
  strcpy(lams_repay_freq,lainfo.repay_freq);
  sprintf(lams_repay_amt,"%f",lainfo.repay_amt);
 
   dbg_print_lvl(1," IND_ID...............:%s",lams_ind_id);
   dbg_print_lvl(1," GA_ID................:%s",lams_ga_id);
   dbg_print_lvl(1," EV_ID................:%s",lams_ev_id);
   dbg_print_lvl(1," GC_ID................:%s",lams_gc_id);
   dbg_print_lvl(1," INLNAG_SEQNBR........:%s",lams_inlnag_seqnbr);
   dbg_print_lvl(1," EFFDATE..............:%s",lams_effdate);
   dbg_print_lvl(1," FIRST_DUE_DATE.......:%s",lams_start_date);
   dbg_print_lvl(1," LOAN_AMT.............:%s",lams_loan_amt);
   dbg_print_lvl(1," LOAN_TERM............:%s",lams_loan_term);
   dbg_print_lvl(1," FIXED_INT_RATE.......:%s",lams_fixed_int_rate);
   dbg_print_lvl(1," REPAY_MTHD_CODE......:%s",lams_repay_mthd_code);
   dbg_print_lvl(1," REPAY_FREQ...........:%s",lams_repay_freq);
   dbg_print_lvl(1," REPAY_AMT............:%s",lams_repay_amt);

  rc = LAMS(lams_ind_id,
            lams_ga_id,
            lams_ev_id,
            lams_gc_id,
            lams_inlnag_seqnbr,
            "LCNV",
            lams_doc_type,
            lams_effdate,
            lams_start_date,
            lams_loan_amt,
            lams_loan_term,
             "M",
            lams_fixed_int_rate,
            lams_repay_mthd_code,
            lams_repay_freq,
            lams_repay_amt,
            "",
            "",
            "",
            "",
            0);

   if(!rc)
    {
      dbg_print_lvl(1,"Document successfully created");
    }
    else
    {
      rc = LAMS_ERROR;

                fprintf(err_file_ptr, "ERROR - Could not generate document for \n");
                fprintf(err_file_ptr, "        ssn %s ext %ld Orig Loan ID %s\n",
                       liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo.prev_loan_id);

      fprintf(err_file_ptr, "        Contact Systems for help.\n\n");

      sprintf(msgbuf,"ERROR - An error occurred while calling LAMS to create document");

      dbg_print_lvl(1,"%s",msgbuf);

      cnlm_handle_error("E",

                        "9999",

                        "0125",
                        "0000",
                        msgbuf,
                        lcinfo_ptr,
                        liinfo_ptr);
      return(rc);
    }
  }



 





                              			rc = ODB_chk_norow_rc(NOEXIT,"ERROR - Updating work_conv_part_loan_acct loan_ev_id");

                              			if(!rc)
                              			{
										
                            	  			dbg_print_lvl(1,"Loan %s for cvpa_id %ld successfully converted!!"
                                                 ,v_cnlm_prev_loan_id.arr,v_cnlm_cvpa_id);

                                  		dbg_print_lvl(1,"CNLM_COMMIT.........:%s",lcinfo_ptr->cnlm_commit);

                                  		if((strcmp(lcinfo_ptr->cnlm_commit,"TRUE")==0)
                                    	 ||(strcmp(lcinfo_ptr->cnlm_commit,"true")==0))
                                  			{
                                    		dbg_print_lvl(1,"Committing work...");

                                    		EXEC SQL COMMIT WORK;
                                  			}
                                  		else
                                  			{
                                    		dbg_print_lvl(1,"Rolling back work...");

                                    		EXEC SQL ROLLBACK WORK;
                                  			}
                              			}
                              		else
                              			{
										
													EXEC SQL ROLLBACK WORK;

                              			rc = UPDATE_STATUS_ERROR;

													fprintf(err_file_ptr, "ERROR - Could not set loan event id for \n");
													fprintf(err_file_ptr, "        ssn %s ext %ld s orig loan id %s\n", 
										                        		 liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo.prev_loan_id);
													fprintf(err_file_ptr, "SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
													fprintf(err_file_ptr, "        Contact Systems for help.\n\n");

                              			sprintf(msgbuf,"ERROR - Updating conversion status for cvpa_id %ld, prev_loan_id %s"
                                             		  ,v_cnlm_cvpa_id,v_cnlm_prev_loan_id.arr);

                              			dbg_print_lvl(1,"%s",msgbuf);

                              			cnlm_handle_error("E",
                                              				"9999",
                                                			"0025",
                                                			"0000",
                                                			msgbuf,
                                                			lcinfo_ptr,
                                                			liinfo_ptr);

                              			return(rc);
                              			}
                            			}
                          			}
                          		else
                          			{
                            		dbg_print_lvl(1,"ERROR - An error occurred in cnlm_process_mnty_splt");
                          			}
                					}
                				else
                					{
                          		dbg_print_lvl(1,"ERROR - An error occurred in cnlm_create_snapshots");
                					}
                      		}
                      	else
                      		{
                				dbg_print_lvl(1,"ERROR - An error occurred in cnlm_process_assessments");
                      		}
                    		}
                    	else
                    		{
                      	dbg_print_lvl(1,"ERROR - An error occurred in cnlm_create_loan_acty");
                    		}
                  	}
                  else
                  	{
                    	dbg_print_lvl(1,"ERROR - An error occurred in cnlm_create_loan_bal");
                  	}
        				}
        			else
        				{
                  dbg_print_lvl(1,"ERROR - An error occurred in cnlm_create_loan_acct");
        				}
              	}
            else
              {
              dbg_print_lvl(1,"ERROR - An error occurred while logging a new event");
              }
            }
         else
            {
            dbg_print_lvl(1,"ERROR - An error occurred in cnlm_validate_conv_info");
            } 
          }
          num_fetched = 0;
        }/*  End of while(num_fetched > 0) */ 
      }
      else
      {
        rc = SQL_ERROR;
		  
		  fprintf(err_file_ptr, "ERROR - Could not find loan information for ssn %s ext %ld\n", liinfo_ptr->ssn, 
				liinfo_ptr->ssn_ext);
		  fprintf(err_file_ptr, "        SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
		  fprintf(err_file_ptr, "        Contact Systems for help.\n\n");
		  

        sprintf(msgbuf,"ERROR - Fetching the cnlm_get_conv_info_cur");

        dbg_print_lvl(1,"%s",msgbuf);

        cnlm_handle_error("E",
                          "9999",
                          "0035",
                          "0000",
                          msgbuf,
                          lcinfo_ptr,
                          liinfo_ptr);
        return(rc);
      }
    }
    while(more_to_fetch);

    if(!rc)
    {
      dbg_print_lvl(1,"Calling cnlm_update_part_info");

      rc = cnlm_update_part_info(lcinfo_ptr,
                                 liinfo_ptr,
											lainfo.ar_sysdate);
      if(!rc)
      {
        if((strcmp(lcinfo_ptr->cnlm_commit,"TRUE")==0)
           ||(strcmp(lcinfo_ptr->cnlm_commit,"true")==0))
        {
          dbg_print_lvl(1,"Committing work...");
      
          EXEC SQL COMMIT WORK;    
        }
        else
        {
          dbg_print_lvl(1,"Rolling back...");

          EXEC SQL ROLLBACK WORK;
        }
      }
      else
      {
        dbg_print_lvl(1,"ERROR - An error occurred while calling cnlm_update_part_info");
      }
    }
  }
  else
  {
    rc = SQL_ERROR;
	 
	 fprintf(err_file_ptr, "ERROR - Could not retrieve loan information for ssn %s ext %ld\n", liinfo_ptr->ssn, 
				liinfo_ptr->ssn_ext);
	 fprintf(err_file_ptr, "        SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
	 fprintf(err_file_ptr, "        Contact Systems for help\n\n");  
	 

    sprintf(msgbuf,"ERROR - Openning the cnlm_get_conv_info_cur");

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0040",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  }
      
  dbg_print_lvl(1,"Leaving cnlm_process_conv_loan_info, rc = %d\n",rc); 
 
  return(rc);
}



/**********************************************************************
 * Function    :   cnlm_validate_conv_info
 *
 * Parameters  :   cnlm_info, loan_acct_info
 *
 * Called by   :   cnlm_process_conv_loan_info()
 *
 * Calls       :   cnlm_handle_error (errors)
 *
 * Returns     :   rc  - Success (0) or Failure (anything else)
 *
 * Description :
 *
 * Assumptions :   dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_validate_conv_info(CNLM_INFO *lcinfo_ptr,
                            LOAN_IND_INFO *liinfo_ptr,
                            LOAN_ACCT_INFO *lainfo_ptr)
{
  char msgbuf[MAX_BUF_LEN];
  int  rc = 0;
  char cnlm_term_qual[3];

  EXEC SQL BEGIN DECLARE SECTION;
   long    v_cnlm_cvpa_id;
   VARCHAR v_cnlm_ga_id[14];
   VARCHAR v_cnlm_effdate[13]; 
   VARCHAR v_cnlm_sdlnst_code[20];
   VARCHAR v_cnlm_grlnst_effdate[13];
   VARCHAR v_cnlm_loan_type_code[11];
   VARCHAR v_cnlm_maturity_date[13];
   VARCHAR v_cnlm_orig_effdate[13];
   long    cnlm_loan_term_count = 0;
   short   cnlm_loan_term_count_ind = -1;
   long    cnlm_loan_term = 0;
   VARCHAR v_cnlm_loan_term_qual[3];
   short   v_cnlm_loan_term_qual_ind = -1;
   VARCHAR v_cnlm_loan_reason_code[11];
   short   v_cnlm_loan_reason_code_ind = -1;
   VARCHAR v_cnlm_repay_mthd_code[11];
   VARCHAR v_cnlm_repay_freq[3];
   long    cnlm_chk_repay_codes = 0;
  EXEC SQL END DECLARE SECTION;

  msgbuf[0] = '\0';
  cnlm_term_qual[0] = '\0';
  stov(v_cnlm_ga_id,"");
  stov(v_cnlm_effdate,"");
  stov(v_cnlm_sdlnst_code,"");
  stov(v_cnlm_grlnst_effdate,"");
  stov(v_cnlm_loan_type_code,"");
  stov(v_cnlm_maturity_date,"");
  stov(v_cnlm_orig_effdate,"");
  stov(v_cnlm_loan_term_qual,"");
  stov(v_cnlm_loan_reason_code,"");
  stov(v_cnlm_repay_mthd_code,"");
  stov(v_cnlm_repay_freq,"");

  v_cnlm_cvpa_id = liinfo_ptr->cvpa_id;
  stov(v_cnlm_ga_id,lcinfo_ptr->ga_id);
  stov(v_cnlm_effdate,lcinfo_ptr->effdate);
  stov(v_cnlm_maturity_date,lainfo_ptr->maturity_date);
  stov(v_cnlm_orig_effdate,lainfo_ptr->orig_effdate);
  cnlm_loan_term = lainfo_ptr->loan_term;
  strcpy(cnlm_term_qual,lainfo_ptr->loan_term_qual);
  stov(v_cnlm_repay_mthd_code,lainfo_ptr->repay_mthd_code);
  stov(v_cnlm_repay_freq,lainfo_ptr->repay_freq);
  stov(v_cnlm_sdlnst_code,lainfo_ptr->sdlnst_code);
  stov(v_cnlm_grlnst_effdate,lainfo_ptr->grlnst_effdate);
  stov(v_cnlm_loan_type_code,lainfo_ptr->loan_type_code);
   
  dbg_print_lvl(1,"Entering cnlm_validate_conv_info");
  dbg_print_lvl(1,"--------------------------------");
  dbg_print_lvl(2," CVPA_ID................:%ld",v_cnlm_cvpa_id);
  dbg_print_lvl(2," GA_ID..............:%s",v_cnlm_ga_id.arr);
  dbg_print_lvl(2," EFFDATE............:%s",v_cnlm_effdate.arr);
  dbg_print_lvl(2," LOAN_TERM..........:%d",cnlm_loan_term);
  dbg_print_lvl(2," LOAN_TERM_QUAL.....:%s",cnlm_term_qual);
      
  dbg_print_lvl(1,"Validating the amounts");
  dbg_print_lvl(2," LOAN_AMT...........:%f",lainfo_ptr->loan_amt);
  dbg_print_lvl(2," REPAY_AMT..........:%f\n",lainfo_ptr->repay_amt); 
  
            
  if(lainfo_ptr->repay_amt <= 0)
      
  {
    rc = AMT_ERROR; 
	 
	 fprintf(err_file_ptr, "ERROR - The repayment amount must be greater than zero\n");
	 fprintf(err_file_ptr, "        for ssn %s ext %ld Orig Loan ID %s\n\n", liinfo_ptr->ssn, liinfo_ptr->ssn_ext, 
				lainfo_ptr->prev_loan_id);

    sprintf(msgbuf,"ERROR - The loan repayment amt is invalid");

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0050",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  }
  
  if (lainfo_ptr->loan_amt <= 0)
  {
    rc = AMT_ERROR; 
	 
	 fprintf(err_file_ptr, "ERROR - The Loan Amount must be greater than zero\n");
	 fprintf(err_file_ptr, "        for ssn %s ext %ld Orig Loan ID %s\n\n", liinfo_ptr->ssn, liinfo_ptr->ssn_ext, 
				lainfo_ptr->prev_loan_id);

    sprintf(msgbuf,"ERROR - The loan amt is invalid");

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0050",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  }       
  
  if (lainfo_ptr->loan_term <= 0)
  {
    rc = AMT_ERROR; 
	 
	 fprintf(err_file_ptr, "ERROR - The Loan Term must be greater than zero\n");
	 fprintf(err_file_ptr, "        for ssn %s ext %ld Orig Loan ID %s\n\n", liinfo_ptr->ssn, liinfo_ptr->ssn_ext, 
				lainfo_ptr->prev_loan_id);

    sprintf(msgbuf,"ERROR - The loan term is invalid");

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0050",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  }   
  
  if (lainfo_ptr->orig_loan_amt < 0)
  {
    rc = AMT_ERROR; 
	 
	 fprintf(err_file_ptr, "ERROR - The Original Loan Amount is invalid \n");
	 fprintf(err_file_ptr, "        for ssn %s ext %ld Orig Loan ID %s\n\n", liinfo_ptr->ssn, liinfo_ptr->ssn_ext, 
				lainfo_ptr->prev_loan_id);

    sprintf(msgbuf,"ERROR - The orig loan amt is invalid");

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0050",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  }    
  
  if (lainfo_ptr->fixed_int_rate < 0)
  {
    rc = AMT_ERROR; 
	 
	 fprintf(err_file_ptr, "ERROR - The Interest rate is invalid \n");
	 fprintf(err_file_ptr, "        for ssn %s ext %ld Orig Loan ID %s\n\n", liinfo_ptr->ssn, liinfo_ptr->ssn_ext, 
				lainfo_ptr->prev_loan_id);

    sprintf(msgbuf,"ERROR - The interest rate is invalid");

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0050",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  }           
  
    dbg_print_lvl(1,"Validating the repay_mthd_code and repay_freq");
    dbg_print_lvl(2," REPAY_MTHD_CODE....:%s",v_cnlm_repay_mthd_code.arr);
    dbg_print_lvl(2," REPAY_FREQ.........:%s\n",v_cnlm_repay_freq.arr); 

    EXEC SQL
    SELECT count(*)
    INTO  :cnlm_chk_repay_codes
    FROM isis_ref_values
    WHERE rv_domain = 'REPAY MTHD CODE'
    AND   rv_low_value = :v_cnlm_repay_mthd_code;

    rc =  ODB_chk_norow_rc(NOEXIT,"ERROR - Validating the repay_mthd_code");

    if((!rc)&&(cnlm_chk_repay_codes > 0))
    {
      cnlm_chk_repay_codes = 0;

      EXEC SQL
      SELECT count(*)
      INTO :cnlm_chk_repay_codes
      FROM isis_ref_values
      WHERE rv_domain = 'LOAN REPAY FREQUENCY'
      AND   rv_low_value = :v_cnlm_repay_freq;

      rc =  ODB_chk_norow_rc(NOEXIT,"ERROR - Validating the repay_mthd_code");

      if((!rc)&&(cnlm_chk_repay_codes > 0))
      {
        if((strcmp(lainfo_ptr->default_ind,"N") == 0)
            ||(strcmp(lainfo_ptr->default_ind,"Y") == 0))
        {

           dbg_print_lvl(1,"Calling cnlm_derive_loan_info");

           rc = cnlm_derive_loan_info(lcinfo_ptr,
                                      liinfo_ptr,
                                      lainfo_ptr);
           if(rc)
           {
             dbg_print_lvl(1,"ERROR - An error occurred in cnlm_derive_loan_info");
           } 
        }
        else
        {
          rc = DEFAULT_IND_ERROR; 
			 
			 fprintf(err_file_ptr, "ERROR - The Default Ind is invalid for ssn %s ext %ld Orig Loan ID %s\n", 
			                        liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo_ptr->prev_loan_id);
			 fprintf(err_file_ptr, "        Valid values for Default Ind are Y, N, or blank.\n\n");											
	 		 

          sprintf(msgbuf,"ERROR - An error occured while validating the default_ind");
                                                                                          
          dbg_print_lvl(1,"%s",msgbuf);

          cnlm_handle_error("E",
                            "9999",
                            "0055",
                            "0000",
                            msgbuf,
                            lcinfo_ptr,
                            liinfo_ptr);
          return(rc);
        }
      }
      else
      {
        rc = REPAY_MTHD_ERROR;
		  
		  fprintf(err_file_ptr, "ERROR - Invalid Repay Frequency for ssn %s ext %ld Orig Loan Id %s\n", 
		                        liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo_ptr->prev_loan_id);
		  fprintf(err_file_ptr, "        Valid values for repay frequency are BW, M, Q, SM, W\n\n");										

        sprintf(msgbuf,"ERROR - An error occured while validating the repay_mthd_code");
                                                                                          
        dbg_print_lvl(1,"%s",msgbuf);

        cnlm_handle_error("E",
                          "9999",
                          "0060",
                          "0000",
                          msgbuf,
                          lcinfo_ptr,
                          liinfo_ptr);
        return(rc);
      }              
    }  
    else
    {
      rc = REPAY_MTHD_ERROR;
		
		fprintf(err_file_ptr, "ERROR - Invalid Repay Type for ssn %s ext %ld Orig Loan Id %s\n",
		               liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo_ptr->prev_loan_id);
		fprintf(err_file_ptr, "        Valid values for Repay Type are CHECK or PAYROLL.\n\n");
	 	

      sprintf(msgbuf,"ERROR - An error occured while validating the repay_mthd_code");

      dbg_print_lvl(1,"%s",msgbuf);

      cnlm_handle_error("E",
                        "9999",
                        "0065",
                        "0000",
                        msgbuf,
                        lcinfo_ptr,
                        liinfo_ptr);
      return(rc);
    }
  
  dbg_print_lvl(1,"Leaving cnlm_validate_conv_info, rc = %d\n",rc);
  
  return(rc);   
}



/**********************************************************************
 * Function    :   cnlm_log_new_event
 *
 * Parameters  :   cnlm_info, loan_ind_info, prev_loan_id 
 *
 * Called by   :   CNLM()
 *
 * Calls       :   MACL
 *                 cnlm_handle_error (errors) 
 *
 * Returns     :   rc  - Success (0) or Failure (anything else)
 *
 * Description :   
 *
 * Assumptions :   dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_log_new_event(CNLM_INFO *lcinfo_ptr,
                       LOAN_IND_INFO *liinfo_ptr,
			char *prev_loan_id)
{
  char msgbuf[MAX_BUF_LEN];
  int  rc = 0;
  long cnlm_ev_id = 0L;
  long cnlm_master_ev_id = 0L;
  long cnlm_step_seqnbr = 0L;
  char cnlm_ga_id[14];
  char cnlm_ind_id[13];

  msgbuf[0] = '\0';
  cnlm_ga_id[0] = '\0';
  cnlm_ind_id[0] = '\0';

  sprintf(cnlm_ind_id,"%ld",liinfo_ptr->ind_id);
  cnlm_master_ev_id = lcinfo_ptr->master_ev_id;
  strcpy(cnlm_ga_id,lcinfo_ptr->ga_id);

  dbg_print_lvl(1,"Entering cnlm_log_new_event");
  dbg_print_lvl(1,"---------------------------"); 
  dbg_print_lvl(1,"Calling MACL to log a new event");
  dbg_print_lvl(2," SUBJECT_ID.........:%s",cnlm_ga_id);
  dbg_print_lvl(2," MASTER_EV_ID.......:%ld",cnlm_master_ev_id);
  dbg_print_lvl(2," SUB_SUBJECT_ID.....:%s",cnlm_ind_id);
   
  rc = MACL("CNLM",                        /* Transaction Code     */
             cnlm_ga_id,                   /* Subject Id           */
             &cnlm_ev_id,                  /* Event Id             */
             "CONVERSION",                  /* Event Type           */
             cnlm_master_ev_id,            /* Master Event Id      */
             cnlm_ind_id,                  /* Related Subject      */
             "",                           /* User Id              */
             "",                           /* Creation Source      */
             &cnlm_step_seqnbr             /* Step Sequence #      */
             );
  if(!rc)
  {
    dbg_print_lvl(1,"MACL returned an ev_id of %d",cnlm_ev_id); 

    liinfo_ptr->ev_id = cnlm_ev_id;
  }
  else
  {
    rc = MACL_ERROR;
	 
	 fprintf(err_file_ptr, "ERROR - MACL could not create new event for \n");
	 fprintf(err_file_ptr, "        ssn %s ext %ld Orig Loan ID %s\n", 
	       liinfo_ptr->ssn, liinfo_ptr->ssn_ext, prev_loan_id);
	 fprintf(err_file_ptr, "        Contact Systems for help.\n\n");			 
	 

    sprintf(msgbuf,"ERROR - Calling MACL to log a new event");

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0080",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  }
  
  dbg_print_lvl(1, "Leaving cnlm_log_new_event, rc=%d\n", rc);

  return(rc);
}



/**********************************************************************
 * Function    :   cnlm_derive_loan_info
 *
 * Parameters  :   cnlm_info, loan_acct_info
 *
 * Called by   :   cnlm_validate_conv_info()
 *
 * Calls       :   cnlm_handle_error (errors)
 *
 * Returns     :   rc  - Success (0) or Failure (anything else)
 *
 * Description :
 *
 * Assumptions :   dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_derive_loan_info(CNLM_INFO *lcinfo_ptr,
                          LOAN_IND_INFO *liinfo_ptr,
                          LOAN_ACCT_INFO *lainfo_ptr)
{
  char msgbuf[MAX_BUF_LEN];
  int  rc = 0;
  long cnlm_compound_freq = 0;
  double cnlm_fixed_int_rate = 0;
  double cnlm_equiv_daily_eff_rate = 0;
  char  cnlm_trf_loan_acct_id[21];

  EXEC SQL BEGIN DECLARE SECTION;
   VARCHAR v_cnlm_first_due_date[12];
   VARCHAR v_cnlm_int_start_date[12];
   short   v_cnlm_int_start_date_ind = -1;
   VARCHAR v_cnlm_repay_freq[3];
   long    cnlm_inlnag_seqnbr = 0;
   short   cnlm_inlnag_seqnbr_ind = -1;
   long    cnlm_ind_id = 0;
   VARCHAR v_cnlm_effdate[12];
   VARCHAR v_cnlm_chk_int_start_date[1];
   short   v_cnlm_chk_int_start_date_ind = -1;
  EXEC SQL END DECLARE SECTION;

  msgbuf[0] = '\0';
  cnlm_trf_loan_acct_id[0] = '\0';
  stov(v_cnlm_repay_freq,"");
  stov(v_cnlm_first_due_date,"");
  stov(v_cnlm_int_start_date,"");
  stov(v_cnlm_effdate,"");
  stov(v_cnlm_chk_int_start_date,"N");

  stov(v_cnlm_repay_freq,lainfo_ptr->repay_freq);
  stov(v_cnlm_first_due_date,lainfo_ptr->first_due_date);
  cnlm_ind_id = liinfo_ptr->ind_id;
  cnlm_fixed_int_rate = lainfo_ptr->fixed_int_rate;
  stov(v_cnlm_effdate,lcinfo_ptr->effdate);

  dbg_print_lvl(1,"Entering cnlm_derive_loan_info");
  dbg_print_lvl(1,"------------------------------");
  dbg_print_lvl(2," REPAY_FREQ.............:%s",v_cnlm_repay_freq.arr);
  dbg_print_lvl(2," FIRST_DUE_DATE.........:%s",v_cnlm_first_due_date.arr); 
  dbg_print_lvl(2," IND_ID.................:%d",cnlm_ind_id);
  dbg_print_lvl(2," FIXED_INT_RATE.........:%f",cnlm_fixed_int_rate);
  dbg_print_lvl(2," EFFDATE................:%s\n",v_cnlm_effdate.arr);

  dbg_print_lvl(1,"Determining the int_start_date");

  EXEC SQL
  SELECT 'Y'
  INTO :v_cnlm_chk_int_start_date:v_cnlm_chk_int_start_date_ind
  FROM  dual
  WHERE to_date(:v_cnlm_first_due_date,'DD-MON-YYYY') < to_date(:v_cnlm_effdate,'DD-MON-YYYY');
 
  rc =  ODB_chk_rc(NOEXIT,"ERROR - Selecting the int_start_date");
  
  if(!rc)
  {
    if(v_cnlm_chk_int_start_date_ind == -1)
    {
      stov(v_cnlm_chk_int_start_date,"N");
    }
    else
    {
      vtos(v_cnlm_chk_int_start_date);
    }

    if(strcmp((char *)v_cnlm_chk_int_start_date.arr,"Y")==0)
    {
      strcpy(lainfo_ptr->int_start_date,(char *)v_cnlm_first_due_date.arr);
    }
    else
    {
      strcpy(lainfo_ptr->int_start_date,(char *)v_cnlm_effdate.arr); 
    }

    dbg_print_lvl(2," INT_START_DATE.........:%s\n",lainfo_ptr->int_start_date);

    if(strcmp((char *)v_cnlm_repay_freq.arr,"W")==0)
    {
      cnlm_compound_freq = 52;
    }
    else if(strcmp((char *)v_cnlm_repay_freq.arr,"BW")==0)
    {
      cnlm_compound_freq = 26;
    }
    else if(strcmp((char *)v_cnlm_repay_freq.arr,"M")==0)
    {
      cnlm_compound_freq = 12;
    }
    else if(strcmp((char *)v_cnlm_repay_freq.arr,"Q")==0)
    {
      cnlm_compound_freq = 4;
    }
    else if(strcmp((char *)v_cnlm_repay_freq.arr,"SM")==0)
    {
      cnlm_compound_freq = 24;
    }

    dbg_print_lvl(1,"Determining the inlnag_seqnbr");

    EXEC SQL
    SELECT nvl(MAX(inlnag_seqnbr)+ 1,1)
    INTO :cnlm_inlnag_seqnbr:cnlm_inlnag_seqnbr_ind
    FROM  loan_acct
    WHERE ind_id = :cnlm_ind_id
    AND   status_code != 'Q';

    rc =  ODB_chk_rc(NOEXIT,"ERROR - Selecting the inlnag_seqnbr");

    if(!rc)
    {
      if(cnlm_inlnag_seqnbr_ind == -1)
      {
        cnlm_inlnag_seqnbr = 0;
      }

      if(sqlca.sqlcode == ORA_NOROW)
      {
        cnlm_inlnag_seqnbr = 1;
      }

      dbg_print_lvl(2," INLNAG_SEQNBR............:%d\n",cnlm_inlnag_seqnbr);

      lainfo_ptr->inlnag_seqnbr = cnlm_inlnag_seqnbr;

      dbg_print_lvl(1,"Computing the equiv_daily_eff_rate");

      cnlm_equiv_daily_eff_rate = ((pow(1 + ((cnlm_fixed_int_rate /100) / cnlm_compound_freq), cnlm_compound_freq) - 1) * 100);
      lainfo_ptr->equiv_daily_eff_rate = cnlm_equiv_daily_eff_rate;

      dbg_print_lvl(2," EQUIV_DAILY_EFF_RATE...:%f\n",cnlm_equiv_daily_eff_rate);

    }
    else
    {
      rc = LOAN_NUM_ERROR;
		
		fprintf(err_file_ptr, "ERROR - Could not create loan sequence number for \n");
		fprintf(err_file_ptr, "        ssn %s ext %ld Orig Loan ID %s\n", 
		            liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo_ptr->prev_loan_id);
		fprintf(err_file_ptr, "        SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
		fprintf(err_file_ptr, "        Contact Systems for help.\n\n");
		

      sprintf(msgbuf,"ERROR -  Selecting the inlnag_seqnbr");

      dbg_print_lvl(1,"%s",msgbuf);
  
      cnlm_handle_error("E",
                        "9999",
                        "0085",
                        "0000",
                        msgbuf,
                        lcinfo_ptr,
                        liinfo_ptr);
      return(rc);
    }
  }
  else
  {
    rc = INT_START_DATE_ERROR;
	 
	 fprintf(err_file_ptr, "ERROR - Could not determine start date for \n");
	 fprintf(err_file_ptr, "        ssn %s ext %ld Orig Loan ID %s\n", 
	        liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo_ptr->prev_loan_id);
    	 fprintf(err_file_ptr, "        SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
	 fprintf(err_file_ptr, "        Contact Systems for help.\n\n");
	 

    sprintf(msgbuf,"ERROR -  Determining the int_start_date");

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0090",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  } 
 

  dbg_print_lvl(1,"Leaving cnlm_derive_loan_info, rc=%d\n", rc);
 
  return(rc);
}



/**********************************************************************
 * Function    :   cnlm_create_loan_acct
 *
 * Parameters  :   cnlm_info, loan_acct_info
 *
 * Called by   :   cnlm_process_conv_info()
 *
 * Calls       :   cnlm_handle_error (errors)
 *
 * Returns     :   rc  - Success (0) or Failure (anything else)
 *
 * Description :
 *
 * Assumptions :   dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_create_loan_acct(CNLM_INFO *lcinfo_ptr,
                          LOAN_IND_INFO *liinfo_ptr,
                          LOAN_ACCT_INFO *lainfo_ptr,
                          long l_cnlm_inlnag_seqnbr,
                          double l_cnlm_loan_amt,
                          char *cnlm_effdate)
{
  char msgbuf[MAX_BUF_LEN];
  int  rc = 0;
  
  EXEC SQL BEGIN DECLARE SECTION;
   long    cnlm_inlnag_seqnbr = 0;
   VARCHAR v_cnlm_ga_id[14];
   long    cnlm_ind_id = 0;
   VARCHAR v_cnlm_sdlnst_code[20];
   VARCHAR v_cnlm_grlnst_effdate[12];
   long    cnlm_loan_term = 0;
   VARCHAR v_cnlm_loan_term_qual[3];
   VARCHAR v_cnlm_loan_reason_code[11];
   VARCHAR v_cnlm_maturity_date[12]; 
   double  cnlm_loan_amt = 0;
   VARCHAR v_cnlm_effdate[12];
   VARCHAR v_cnlm_status_code[3];
   VARCHAR v_cnlm_status_chg_effdate[12];
   VARCHAR v_cnlm_status_chg_dpdate[19];
   VARCHAR v_cnlm_repay_freq[3];
   VARCHAR v_cnlm_repay_mthd_code[11];
   VARCHAR v_cnlm_default_ind[1];
   VARCHAR v_cnlm_default_date[13]; /** added default date **/
   double  cnlm_repay_amt = 0;
   VARCHAR v_cnlm_first_due_date[12];
   double  cnlm_fixed_int_rate = 0;
   double  cnlm_equiv_daily_eff_rate = 0;
   double  cnlm_origination_fee = 0;
   VARCHAR v_cnlm_trf_loan_acct_id[20];
   VARCHAR v_cnlm_orig_effdate[12];
	VARCHAR	v_cnlm_loan_type_code[11];
	VARCHAR	v_cnlm_ar_sysdate[47];
   double  cnlm_orig_loan_amt = 0;
	long    monthly_term;
	long    annual_term;
        float   annual_term_chk = 0.0;
	VARCHAR v_cnlm_check_term_date[12];
	VARCHAR v_cnml_loan_type[25];
  EXEC SQL END DECLARE SECTION;

  msgbuf[0] = '\0';
  stov(v_cnlm_ga_id,"");
  /* stov(v_cnlm_sdlnst_code,"");
  stov(v_cnlm_grlnst_effdate,""); */
  stov(v_cnlm_loan_term_qual,"");
  /* stov(v_cnlm_loan_reason_code,""); */
  stov(v_cnlm_maturity_date,"");
  stov(v_cnlm_effdate,"");
  stov(v_cnlm_status_code,"");
  stov(v_cnlm_status_chg_effdate,"");
  stov(v_cnlm_status_chg_dpdate,"");
  stov(v_cnlm_repay_freq,"");
  stov(v_cnlm_repay_mthd_code,"");
  stov(v_cnlm_default_ind,"");
  stov(v_cnlm_default_date,""); /** added default_date **/
  stov(v_cnlm_first_due_date,"");
  stov(v_cnlm_trf_loan_acct_id,"");
  stov(v_cnlm_orig_effdate,"");
 
  cnlm_inlnag_seqnbr = l_cnlm_inlnag_seqnbr;
  stov(v_cnlm_ga_id,lcinfo_ptr->ga_id);
  cnlm_ind_id = liinfo_ptr->ind_id;
  /* stov(v_cnlm_sdlnst_code,lcinfo_ptr->sdlnst_code);
  stov(v_cnlm_grlnst_effdate,lcinfo_ptr->grlnst_effdate); 
  cnlm_loan_term = lainfo_ptr->loan_term;
  stov(v_cnlm_loan_term_qual,lainfo_ptr->loan_term_qual);
  stov(v_cnlm_loan_reason_code,lainfo_ptr->loan_reason_code); */
  stov(v_cnlm_maturity_date,lainfo_ptr->maturity_date);
  cnlm_loan_amt = l_cnlm_loan_amt;
  stov(v_cnlm_effdate,cnlm_effdate);
  stov(v_cnlm_status_code,lainfo_ptr->status_code);
  stov(v_cnlm_status_chg_effdate,lainfo_ptr->status_chg_effdate);
  stov(v_cnlm_status_chg_dpdate,lainfo_ptr->status_chg_dpdate);
  stov(v_cnlm_repay_freq,lainfo_ptr->repay_freq);
  stov(v_cnlm_repay_mthd_code,lainfo_ptr->repay_mthd_code);
  stov(v_cnlm_default_ind,lainfo_ptr->default_ind);
  stov(v_cnlm_default_date,lainfo_ptr->default_date); /** added default_date **/
  cnlm_repay_amt = lainfo_ptr->repay_amt;
  stov(v_cnlm_first_due_date,lainfo_ptr->first_due_date);
  cnlm_fixed_int_rate = lainfo_ptr->fixed_int_rate;
  cnlm_equiv_daily_eff_rate = lainfo_ptr->equiv_daily_eff_rate;
  cnlm_origination_fee = lainfo_ptr->origination_fee;
  stov(v_cnlm_trf_loan_acct_id,lainfo_ptr->trf_loan_acct_id);
  stov(v_cnlm_orig_effdate,lainfo_ptr->orig_effdate);
  cnlm_orig_loan_amt = lainfo_ptr->orig_loan_amt;
  stov(v_cnml_loan_type, lainfo_ptr->loan_type);
  
  stov(v_cnlm_status_code,"A");
  stov(v_cnlm_status_chg_effdate,cnlm_effdate);
  stov(v_cnlm_status_chg_dpdate,cnlm_effdate);
  stov(v_cnlm_check_term_date, lcinfo_ptr->effdate);

  
	if (strcmp(lainfo_ptr->loan_term_qual, "M") == 0)
  		{
		monthly_term = lainfo_ptr->loan_term;
		annual_term = lainfo_ptr->loan_term / 12;
                annual_term_chk = (float)(lainfo_ptr->loan_term / 12);

/******  Loan Less Than 12 months Do Not Get Rejected ******
		if (monthly_term < 12)
			{
			rc = INVALID_LOAN_TERM_ERROR;
			
			fprintf(err_file_ptr, "ERROR - The loan term is less than 12 months\n");
			fprintf(err_file_ptr, "        for ssn %s ext %ld Orig Loan ID %s\n\n", 
			              liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo_ptr->prev_loan_id);
			sprintf(msgbuf,"ERROR - The Loan Term Qualifier is not Valid");

    		dbg_print_lvl(1,"%s",msgbuf);

    		cnlm_handle_error("E",
                "9999",
                "0095",
                "0000",
                msgbuf,
                lcinfo_ptr,
                liinfo_ptr);
    		return(rc);
			}
************************/
		}
	else if (strcmp(lainfo_ptr->loan_term_qual, "A") == 0)
		{
		monthly_term = lainfo_ptr->loan_term * 12;
		annual_term = lainfo_ptr->loan_term;
                annual_term_chk = (float)annual_term;
		}
	else
		{
		rc = UNKNOWN_TERM_QUAL_ERROR;
		
		fprintf(err_file_ptr,"ERROR - The Loan Term Qualifier is not valid for \n");
		fprintf(err_file_ptr,"        ssn %s ext %ld Orig Loan ID %s\n", 
		         liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo_ptr->prev_loan_id);
		fprintf(err_file_ptr,"        Valid values for Qualifier are M or A.\n\n");
		

    	sprintf(msgbuf,"ERROR - The Loan Term Qualifier is not Valid");

    	dbg_print_lvl(1,"%s",msgbuf);

    	cnlm_handle_error("E",
                "9999",
                "0095",
                "0000",
                msgbuf,
                lcinfo_ptr,
                liinfo_ptr);
    	return(rc);
  		}
	dbg_print_lvl(1,"Value of 	v_cnlm_loan_reason_code :: %s",v_cnml_loan_type.arr);
	dbg_print_lvl(2,"Selecting from the Changed query \n");	
	EXEC SQL
	SELECT loan_reason_code, to_char(grlnst_effdate, 'DD-MON-YYYY'), sdlnst_code
	INTO :v_cnlm_loan_reason_code, :v_cnlm_grlnst_effdate, :v_cnlm_sdlnst_code
	FROM GRP_LOAN_TERM G1
	WHERE GA_ID = :v_cnlm_ga_id
	AND LOAN_TERM_QUAL = 'M'
	AND (CASE WHEN :v_cnml_loan_type = loan_reason_code 
									THEN 1
								 ELSE 
									CASE WHEN (:monthly_term BETWEEN LOW_THRESH AND HIGH_THRESH ) and ( trim(:v_cnml_loan_type) is null)
											THEN 1 
										ELSE 0 
									END 
							END = 1) 
	--AND :monthly_term BETWEEN LOW_THRESH AND HIGH_THRESH 
	AND GRLNST_EFFDATE <= TO_DATE(:v_cnlm_check_term_date, 'DD-MON-YYYY')
        AND GRLNST_EFFDATE = (SELECT MAX(GRLNST_EFFDATE)
		              FROM GRP_LOAN_TERM G2
		              WHERE G1.GA_ID = G2.GA_ID
					  AND G1.LOAN_TERM_QUAL = G2.LOAN_TERM_QUAL
				  	  AND (CASE WHEN :v_cnml_loan_type = loan_reason_code 
									THEN 1
								 ELSE 
									CASE WHEN (:monthly_term BETWEEN G2.LOW_THRESH AND G2.HIGH_THRESH ) and ( trim(:v_cnml_loan_type) is null)
											THEN 1 
										ELSE 0 
									END 
							END = 1) 
			      --AND :monthly_term BETWEEN G2.LOW_THRESH AND G2.HIGH_THRESH
			      AND GRLNST_EFFDATE <= TO_DATE(:v_cnlm_check_term_date, 'DD-MON-YYYY')
                              AND (G2.GA_ID, G2.GRLNST_EFFDATE, G2.SDLNST_CODE) IN
                              (SELECT G3.GA_ID, G3.EFFDATE, G3.SDLNST_CODE
                                 FROM GRP_LOAN_STRUC G3
                                WHERE G3.GA_ID = G2.GA_ID
                                  AND G3.EFFDATE = G2.GRLNST_EFFDATE
                                  AND G3.SDLNST_CODE = G2.SDLNST_CODE
                                  AND G3.TERMDATE IS null)
)
	AND G1.SDLNST_CODE = (SELECT DISTINCT G3.SDLNST_CODE                               
                              FROM GRP_LOAN_STRUC G3                                       
		              WHERE G3.GA_ID = G1.GA_ID                                    
		              AND TRIM(G3.SDLNST_CODE) = TRIM(G1.SDLNST_CODE)              
			      AND G3.TERMDATE IS null);
										
	rc =  ODB_chk_rc(NOEXIT,"ERROR - selecting grp_loan_term");

	if (!rc && sqlca.sqlcode != 1403)
		{
		dbg_print_lvl(2,"Inside the monthly check success...");
		vtos(v_cnlm_loan_reason_code);
		vtos(v_cnlm_grlnst_effdate);
		vtos(v_cnlm_sdlnst_code);
		cnlm_loan_term = monthly_term;
  		stov(v_cnlm_loan_term_qual,"M");
		
  		}

  	else if (!rc && sqlca.sqlcode == 1403)
  		{
		dbg_print_lvl(1,"ga_id is %s   ann_term is %d   effdate is %s and v_cnml_loan_type %s", v_cnlm_ga_id.arr, annual_term, v_cnlm_effdate.arr,v_cnml_loan_type.arr); 
		dbg_print_lvl(2,"Selecting from the Changed query \n");
    	EXEC SQL
		SELECT loan_reason_code, to_char(grlnst_effdate, 'DD-MON-YYYY'), sdlnst_code
		INTO :v_cnlm_loan_reason_code, :v_cnlm_grlnst_effdate, :v_cnlm_sdlnst_code
		FROM GRP_LOAN_TERM G1
		WHERE GA_ID = :v_cnlm_ga_id
		AND LOAN_TERM_QUAL = 'A'
		AND (CASE WHEN :v_cnml_loan_type = loan_reason_code 
									THEN 1
								 ELSE 
									CASE WHEN (:annual_term BETWEEN LOW_THRESH AND HIGH_THRESH ) and ( trim(:v_cnml_loan_type) is null)
											THEN 1 
										ELSE 0 
									END 
							END = 1) 
		--AND :annual_term_chk BETWEEN LOW_THRESH AND HIGH_THRESH
		AND GRLNST_EFFDATE <= TO_DATE(:v_cnlm_check_term_date, 'DD-MON-YYYY')
		AND GRLNST_EFFDATE = (SELECT MAX(GRLNST_EFFDATE)
		                      FROM GRP_LOAN_TERM G2
				      WHERE G1.GA_ID = G2.GA_ID
				      AND G1.LOAN_TERM_QUAL = G2.LOAN_TERM_QUAL
					  AND (CASE WHEN :v_cnml_loan_type = loan_reason_code 
									THEN 1
								 ELSE 
									CASE WHEN (:annual_term BETWEEN G2.LOW_THRESH AND G2.HIGH_THRESH ) and ( trim(:v_cnml_loan_type) is null)
											THEN 1 
										ELSE 0 
									END 
							END = 1) 
				      --AND :annual_term_chk BETWEEN G2.LOW_THRESH AND G2.HIGH_THRESH
				      AND GRLNST_EFFDATE <= TO_DATE(:v_cnlm_check_term_date, 'DD-MON-YYYY')
                              AND (G2.GA_ID, G2.GRLNST_EFFDATE, G2.SDLNST_CODE) IN
                              (SELECT G3.GA_ID, G3.EFFDATE, G3.SDLNST_CODE
                                 FROM GRP_LOAN_STRUC G3
                                WHERE G3.GA_ID = G2.GA_ID
                                  AND G3.EFFDATE = G2.GRLNST_EFFDATE
                                  AND G3.SDLNST_CODE = G2.SDLNST_CODE
                                  AND G3.TERMDATE IS null)
)
                AND G1.SDLNST_CODE = (SELECT DISTINCT G3.SDLNST_CODE
			              FROM GRP_LOAN_STRUC G3
			              WHERE G3.GA_ID = G1.GA_ID
				      AND TRIM(G3.SDLNST_CODE) = TRIM(G1.SDLNST_CODE)
				      AND G3.TERMDATE IS null);													

		rc =  ODB_chk_norow_rc(NOEXIT,"ERROR - selecting grp_loan_term again");

		if (!rc)
			{
			vtos(v_cnlm_loan_reason_code);
			vtos(v_cnlm_grlnst_effdate);
			vtos(v_cnlm_sdlnst_code);
			cnlm_loan_term = annual_term;
  			stov(v_cnlm_loan_term_qual,"A");
			}

		else
			{
			rc = SQL_ERROR;
			
			fprintf(err_file_ptr, "ERROR - Loan term for ssn %s ext %ld Orig Loan ID %s\n", 
			         liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo_ptr->prev_loan_id);
			fprintf(err_file_ptr, "        is not valid for the group\n");
			fprintf(err_file_ptr, "        To see valid values, access QYGR form.\n");
			fprintf(err_file_ptr, "        Select Inquire Group Loan Structure.\n");
			fprintf(err_file_ptr, "        Click on Loan Term button for each structure.\n");     						
			fprintf(err_file_ptr, "SQL error message is %s\n\n", sqlca.sqlerrm.sqlerrmc);
			

    		sprintf(msgbuf,"ERROR -  %d occurred while selecting annual grp_loan_term",sqlca.sqlcode);

    		dbg_print_lvl(1,"%s",msgbuf);

    		cnlm_handle_error("E",
                   "9999",
                   "0095",
                   "0000",
                   msgbuf,
                   lcinfo_ptr,
                   liinfo_ptr);
    		return(rc);
  			}
  		}
  	else
  		{
    	rc = SQL_ERROR;
		
		fprintf(err_file_ptr, "ERROR - Loan term for ssn %s ext %ld Orig Loan ID %s\n", 
			         liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo_ptr->prev_loan_id);
		fprintf(err_file_ptr, "        is not valid for the group\n");
		fprintf(err_file_ptr, "        To see valid values, access QYGR form.\n");
		fprintf(err_file_ptr, "        Select Inquire Group Loan Structure.\n");
		fprintf(err_file_ptr, "        Click on Loan Term button for each structure.\n");     						
		fprintf(err_file_ptr, "SQL error message is %s\n\n", sqlca.sqlerrm.sqlerrmc);

    	sprintf(msgbuf,"ERROR -  %d occurred while selecting monthly grp_loan_term",sqlca.sqlcode);

    	dbg_print_lvl(1,"%s",msgbuf);

    	cnlm_handle_error("E",
                   "9999",
                   "0095",
                   "0000",
                   msgbuf,
                   lcinfo_ptr,
                   liinfo_ptr);
    	return(rc);
  		}
		
  EXEC SQL
  SELECT LOAN_TYPE_CODE,
         DECODE(LOAN_TYPE_CODE,'ACCTREDUCN','Account Reduction Loan ','Collateral Loan ')
                         ||TO_CHAR(SYSDATE,'DD-MON-YYYY')||' '
  INTO :v_cnlm_loan_type_code,
       :v_cnlm_ar_sysdate
  FROM GRP_LOAN_STRUC
  WHERE GA_ID = :v_cnlm_ga_id
    AND SDLNST_CODE = :v_cnlm_sdlnst_code
	 AND EFFDATE = TO_DATE(:v_cnlm_grlnst_effdate, 'DD-MON-YYYY');
	 
  rc = ODB_chk_rc(NOEXIT,"ERROR - Selecting loan type code");
	
	if (!rc)
		{
		vtos(v_cnlm_loan_type_code);
		strcpy(lainfo_ptr->loan_type_code, (char*)v_cnlm_loan_type_code.arr);
		vtos(v_cnlm_ar_sysdate);
		strcpy(lainfo_ptr->ar_sysdate, (char*)v_cnlm_ar_sysdate.arr);
		}
	else
		{
		rc = SQL_ERROR;
						
		fprintf(err_file_ptr, "ERROR - Could not find loan type code for ssn %s ext %ld Orig Loan ID %s\n", 
		       liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo_ptr->prev_loan_id);
		fprintf(err_file_ptr, "        SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
		fprintf(err_file_ptr, "        Contact Systems for help.\n\n");

      sprintf(msgbuf,"ERROR -  %d occurred while selecting loan type code"
                    ,sqlca.sqlcode);

      dbg_print_lvl(1,"%s",msgbuf);

      cnlm_handle_error("E",
                        "9999",
                        "0005",
                        "0000",
                        msgbuf,
                        lcinfo_ptr,
                        liinfo_ptr); 

      return(rc); 
    }
	  
  dbg_print_lvl(1,"Determining the trf_loan_acct_id");
  
  if(strcmp(lainfo_ptr->loan_type_code,"ACCTREDUCN")==0)
  {
    sprintf((char*)v_cnlm_trf_loan_acct_id.arr, "%ld-%ld-A",cnlm_ind_id,cnlm_inlnag_seqnbr);
	 v_cnlm_trf_loan_acct_id.len = strlen((char*)v_cnlm_trf_loan_acct_id.arr);
    strcpy(lainfo_ptr->trf_loan_acct_id, (char*)v_cnlm_trf_loan_acct_id.arr);
  }
  else if((strcmp(lainfo_ptr->loan_type_code,"COLL/TRAN")==0)
        ||(strcmp(lainfo_ptr->loan_type_code,"COLLATERAL")==0))
  {
    sprintf((char*)v_cnlm_trf_loan_acct_id.arr, "%ld-%ld-C",cnlm_ind_id,cnlm_inlnag_seqnbr);
	 v_cnlm_trf_loan_acct_id.len = strlen((char*)v_cnlm_trf_loan_acct_id.arr);
    strcpy(lainfo_ptr->trf_loan_acct_id, (char*)v_cnlm_trf_loan_acct_id.arr);
  }

  dbg_print_lvl(1,"Entering cnlm_create_loan_acct");
  dbg_print_lvl(1,"------------------------------");
  dbg_print_lvl(2,"Inserting into loan_acct with...");
  dbg_print_lvl(2," INLNAG_SEQNBR...........:%d",cnlm_inlnag_seqnbr);
  dbg_print_lvl(2," GA_ID...................:%s",v_cnlm_ga_id.arr);
  dbg_print_lvl(2," IND_ID..................:%d",cnlm_ind_id);
  dbg_print_lvl(2," SDLNST_CODE.............:%s",v_cnlm_sdlnst_code.arr);
  dbg_print_lvl(2," GRLNST_EFFDATE..........:%s",v_cnlm_grlnst_effdate.arr);
  dbg_print_lvl(2," LOAN_TERM...............:%d",cnlm_loan_term);
  dbg_print_lvl(2," LOAN_TERM_QUAL..........:%s",v_cnlm_loan_term_qual.arr);
  dbg_print_lvl(2," LOAN_REASON_CODE........:%s",v_cnlm_loan_reason_code.arr);
  dbg_print_lvl(2," MATURITY_DATE...........:%s",v_cnlm_maturity_date.arr);
  dbg_print_lvl(2," LOAN_AMT................:%f",cnlm_loan_amt);
  dbg_print_lvl(2," EFFDATE.................:%s",v_cnlm_effdate.arr);
  dbg_print_lvl(2," STATUS_CODE.............:%s",v_cnlm_status_code.arr);
  dbg_print_lvl(2," STATUS_CHG_DATE.........:%s",v_cnlm_status_chg_effdate.arr);
  dbg_print_lvl(2," STATUS_CHG_DPDATE.......:%s",v_cnlm_status_chg_dpdate.arr);
  dbg_print_lvl(2," REPAY_FREQ..............:%s",v_cnlm_repay_freq.arr);
  dbg_print_lvl(2," REPAY_MTHD_CODE.........:%s",v_cnlm_repay_mthd_code.arr);
  dbg_print_lvl(2," DEFAULT_IND.............:%s",v_cnlm_default_ind.arr);
  dbg_print_lvl(2," DEFAULT_DATE............:%s", v_cnlm_default_date.arr); /** added default date **/
  dbg_print_lvl(2," REPAY_AMT...............:%f",cnlm_repay_amt);
  dbg_print_lvl(2," FIRST_DUE_DATE..........:%s",v_cnlm_first_due_date.arr);
  dbg_print_lvl(2," FIXED_INT_RATE..........:%f",cnlm_fixed_int_rate);
  dbg_print_lvl(2," EQUIV_DAILY_EFF_RATE....:%f",cnlm_equiv_daily_eff_rate);
  dbg_print_lvl(2," ORIGINATION_FEE.........:%f",cnlm_origination_fee);
  dbg_print_lvl(2," TRF_LOAN_ACCT_ID........:%s",v_cnlm_trf_loan_acct_id.arr);
  dbg_print_lvl(2," ORIG_EFFDATE............:%s",v_cnlm_orig_effdate.arr);
  dbg_print_lvl(2," ORIG_LOAN_AMT...........:%f\n",cnlm_orig_loan_amt);

  EXEC SQL 
  INSERT INTO LOAN_ACCT(INLNAG_SEQNBR,
                        GA_ID,
                        IND_ID,
                        SDLNST_CODE,
                        GRLNST_EFFDATE,
                        LOAN_TERM,
                        LOAN_TERM_QUAL,
                        LOAN_REASON_CODE,
                        MATURITY_DATE,
                        LOAN_AMT,
                        EFFDATE,
                        STATUS_CODE,
                        STATUS_CHG_EFFDATE,
                        STATUS_CHG_DPDATE,
                        REPAY_FREQ,
                        REPAY_MTHD_CODE,
                        TRF_LOAN_ACCT_IND,
                        DEFAULT_IND,
                        DEFAULT_DATE,
                        REPAY_AMT,
                        FIRST_DUE_DATE,
                        FIXED_INT_RATE,
                        EQUIV_DAILY_EFF_RATE,
                        ORIGINATION_FEE,
                        TRF_LOAN_ACCT_ID,
                        ORIG_EFFDATE,
                        ORIG_LOAN_AMT,
                        DEFAULT_HOLD_IND)
                 VALUES(:cnlm_inlnag_seqnbr,
                        :v_cnlm_ga_id,
                        :cnlm_ind_id,
                        :v_cnlm_sdlnst_code,
                        to_date(:v_cnlm_grlnst_effdate,'DD-MON-YYYY'),
                        :cnlm_loan_term,
                        :v_cnlm_loan_term_qual,
                        :v_cnlm_loan_reason_code,
                        to_date(:v_cnlm_maturity_date,'DD-MON-YYYY'),
                        :cnlm_loan_amt,
                        to_date(:v_cnlm_effdate,'DD-MON-YYYY'),
                        :v_cnlm_status_code,
                        to_date(:v_cnlm_status_chg_effdate,'DD-MON-YYYY'),
                        to_date(:v_cnlm_status_chg_dpdate,'DD-MON-YYYY'),
                        :v_cnlm_repay_freq,
                        :v_cnlm_repay_mthd_code,
                        'Y',
                        :v_cnlm_default_ind,
                        to_date(:v_cnlm_default_date,'DD-MON-YYYY'),
                        :cnlm_repay_amt,
                        to_date(:v_cnlm_first_due_date,'DD-MON-YYYY'),
                        :cnlm_fixed_int_rate,
                        :cnlm_equiv_daily_eff_rate,
                        :cnlm_origination_fee,
                        :v_cnlm_trf_loan_acct_id,
                        to_date(:v_cnlm_orig_effdate,'DD-MON-YYYY'),
                        :cnlm_orig_loan_amt,
                        'N');
  
  rc =  ODB_chk_norow_rc(NOEXIT,"ERROR - inserting loan_acct");

  if(!rc)
  {
    dbg_print_lvl(1,"Insert into loan_acct successful!!\n");
  }
  else
  {
    rc = SQL_ERROR;
	 
	 fprintf(err_file_ptr, "ERROR - Could not create a master loan record for \n");
	 fprintf(err_file_ptr, "        ssn %s ext %ld Orig Loan ID %s\n",
	         liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo_ptr->prev_loan_id);
	 fprintf(err_file_ptr, "        SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
	 fprintf(err_file_ptr, "        Contact Systems for help.\n\n");
	 

    sprintf(msgbuf,"ERROR -  %d occurred while inserting into loan_acct",sqlca.sqlcode);

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0095",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  }

  dbg_print_lvl(1,"Leaving cnlm_create_loan_acct, rc=%d\n", rc);

  return(rc);
}


/**********************************************************************
 * Function    :   cnlm_create_loan_bal
 *
 * Parameters  :   cnlm_info, loan_acct_info
 *
 * Called by   :   cnlm_process_conv_info()
 *
 * Calls       :   cnlm_handle_error (errors)
 *
 * Returns     :   rc  - Success (0) or Failure (anything else)
 *
 * Description :
 *
 * Assumptions :   dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_create_loan_bal(CNLM_INFO *lcinfo_ptr,
                         LOAN_IND_INFO *liinfo_ptr,
                         LOAN_ACCT_INFO *lainfo_ptr,
                         long cnlm_inlnag_seqnbr,
                         char *cnlm_bal_reason_code,
                         char *cnlm_bal_effdate,
                         double l_cnlm_principal_amt,
                         double l_cnlm_int_amt)
{
  char msgbuf[MAX_BUF_LEN];
  int  rc = 0;

  EXEC SQL BEGIN DECLARE SECTION;
   long    l_cnlm_inlnag_seqnbr = 0;
   VARCHAR v_cnlm_ga_id[14];
   long    cnlm_ind_id = 0;
   long    cnlm_ev_id = 0;
   double  cnlm_principal_amt = 0;
   double  cnlm_int_amt = 0;
   VARCHAR v_cnlm_bal_effdate[12];
   VARCHAR v_cnlm_dpdate_time[20];
   short   v_cnlm_dpdate_time_ind = -1;
   VARCHAR v_bal_reason_code[2];
  EXEC SQL END DECLARE SECTION;

  msgbuf[0] = '\0';
  stov(v_cnlm_ga_id,"");
  stov(v_cnlm_dpdate_time,"");
  stov(v_bal_reason_code,"");

  l_cnlm_inlnag_seqnbr = cnlm_inlnag_seqnbr;
  stov(v_cnlm_ga_id,lcinfo_ptr->ga_id);
  cnlm_ind_id = liinfo_ptr->ind_id;
  cnlm_ev_id = liinfo_ptr->ev_id;
  stov(v_cnlm_bal_effdate,cnlm_bal_effdate); 
  cnlm_principal_amt = l_cnlm_principal_amt;
  cnlm_int_amt = l_cnlm_int_amt;
  stov(v_bal_reason_code,cnlm_bal_reason_code);
  

  dbg_print_lvl(1,"Entering cnlm_create_loan_bal");
  dbg_print_lvl(1,"-----------------------------");
  dbg_print_lvl(1,"Determining the balance dpdate_time with...");
  dbg_print_lvl(2," BAL_REASON_CODE.............:%s",cnlm_bal_reason_code);

  if(strcmp(cnlm_bal_reason_code,"Z")==0)
  {
    EXEC SQL
    SELECT to_char(sysdate,'DD-MON-YYYY HH24:MI:SS')                                                          
    INTO :v_cnlm_dpdate_time:v_cnlm_dpdate_time_ind
    FROM dual;
  }
  else
  {
    EXEC SQL
    SELECT to_char(sysdate + ONE_SEC ,'DD-MON-YYYY HH24:MI:SS') 
    INTO :v_cnlm_dpdate_time:v_cnlm_dpdate_time_ind
    FROM dual;
  }
 
  rc =  ODB_chk_norow_rc(NOEXIT,"ERROR - Selecting the dpdate_time"); 

  if(!rc)
  {
    if(v_cnlm_dpdate_time_ind == -1)
    {
      stov(v_cnlm_dpdate_time,"");
    }

    dbg_print_lvl(2," DPDATE_TIME.................:%s\n",v_cnlm_dpdate_time.arr);

    dbg_print_lvl(1,"Inserting into loan_bal...");
    dbg_print_lvl(2," INLNAG_SEQNBR...........:%d",l_cnlm_inlnag_seqnbr);
    dbg_print_lvl(2," GA_ID...................:%s",v_cnlm_ga_id.arr);
    dbg_print_lvl(2," IND_ID..................:%d",cnlm_ind_id);
    dbg_print_lvl(2," EV_ID...................:%d",cnlm_ev_id);
    dbg_print_lvl(2," PRINCIPAL_AMT...........:%f",cnlm_principal_amt);
    dbg_print_lvl(2," INT_AMT.................:%f",cnlm_int_amt);
    dbg_print_lvl(2," EFFDATE.................:%s",v_cnlm_bal_effdate.arr);
    dbg_print_lvl(2," DPDATE_TIME.............:%s",v_cnlm_dpdate_time.arr);
    dbg_print_lvl(2," BAL_REASON_CODE.........:%s\n",v_bal_reason_code.arr);

    EXEC SQL
    INSERT INTO LOAN_BAL (INLNAG_SEQNBR,
                          GA_ID,
                          IND_ID,
                          EV_ID,
                          STEP_SEQNBR,
                          PRINCIPAL_AMT,
                          INT_AMT,
                          EFFDATE,
                          DPDATE_TIME,
                          BAL_REASON_CODE)
                   VALUES(:l_cnlm_inlnag_seqnbr,
                          :v_cnlm_ga_id,
                          :cnlm_ind_id,
                          :cnlm_ev_id,
                           1,
                          :cnlm_principal_amt,
                          :cnlm_int_amt,
                          to_date(:v_cnlm_bal_effdate,'DD-MON-YYYY'),
                          to_date(:v_cnlm_dpdate_time,'DD-MON-YYYY HH24:MI:SS'),
                          :v_bal_reason_code);

    rc =  ODB_chk_norow_rc(NOEXIT,"ERROR - inserting into loan_bal");

    if(!rc)
    {
      dbg_print_lvl(1,"Insert into loan_bal successful!!\n");
    }
    else
    {
      rc = SQL_ERROR;
		
		fprintf(err_file_ptr, "ERROR - Could not create a beginning loan balance for \n");
		fprintf(err_file_ptr, "        ssn %s ext %ld Orig Loan ID %s\n", 
		           liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo_ptr->prev_loan_id);
		fprintf(err_file_ptr, "        SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
		fprintf(err_file_ptr, "        Contact Systems for help.\n\n");
		

      sprintf(msgbuf,"ERROR -  %d occurred while inserting into loan_bal",sqlca.sqlcode);

      dbg_print_lvl(1,"%s",msgbuf);

      cnlm_handle_error("E",
                        "9999",
                        "0100",
                        "0000",
                        msgbuf,
                        lcinfo_ptr,
                        liinfo_ptr);
      return(rc);
    }     
  }
  else
  {
    rc = SQL_ERROR;

    sprintf(msgbuf,"ERROR -  %d occurred while selecting the dpdate_time",sqlca.sqlcode);

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0105",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  }

  dbg_print_lvl(1,"Leaving cnlm_create_loan_bal, rc=%d\n", rc);

  return(rc);
}


/**********************************************************************
 * Function    :   cnlm_create_loan_acty
 *
 * Parameters  :   cnlm_info, loan_acct_info
 *
 * Called by   :   cnlm_process_conv_info()
 *
 * Calls       :   cnlm_handle_error (errors)
 *
 * Returns     :   rc  - Success (0) or Failure (anything else)
 *
 * Description :
 *
 * Assumptions :   dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_create_loan_acty(CNLM_INFO *lcinfo_ptr,
                          LOAN_IND_INFO *liinfo_ptr,
                          LOAN_ACCT_INFO *lainfo_ptr,
                          long l_cnlm_inlnag_seqnbr,
                          double cnlm_loan_amt,
                          char *cnlm_effdate)
{
  char msgbuf[MAX_BUF_LEN];
  int  rc = 0;

  EXEC SQL BEGIN DECLARE SECTION;
   long    cnlm_inlnag_seqnbr = 0;
   VARCHAR v_cnlm_ga_id[14];
   long    cnlm_ind_id = 0;
   long    cnlm_ev_id = 0;
   double  cnlm_principal_amt = 0;
   VARCHAR v_cnlm_effdate[12];
   VARCHAR v_cnlm_dpdate_time[20];
   short   v_cnlm_dpdate_time_ind = -1;
   VARCHAR v_bal_reason_code[2];
   VARCHAR v_int_start_date[12];
  EXEC SQL END DECLARE SECTION;

  msgbuf[0] = '\0';
  stov(v_cnlm_ga_id,"");
  stov(v_cnlm_effdate,"");
  stov(v_cnlm_dpdate_time,"");
  stov(v_bal_reason_code,"");
  stov(v_int_start_date,"");

  cnlm_inlnag_seqnbr = l_cnlm_inlnag_seqnbr; 
  stov(v_cnlm_ga_id,lcinfo_ptr->ga_id);
  cnlm_ind_id = liinfo_ptr->ind_id;
  cnlm_ev_id = liinfo_ptr->ev_id;
  stov(v_cnlm_effdate,cnlm_effdate);
  cnlm_principal_amt = cnlm_loan_amt;
  stov(v_int_start_date,lainfo_ptr->int_start_date); 

  dbg_print_lvl(1,"Entering cnlm_create_loan_acty");
  dbg_print_lvl(1,"------------------------------");
  dbg_print_lvl(1,"Inserting into loan_acty");
  dbg_print_lvl(2," INLNAG_SEQNBR..........:%d",cnlm_inlnag_seqnbr);
  dbg_print_lvl(2," GA_ID..................:%s",v_cnlm_ga_id.arr);
  dbg_print_lvl(2," IND_ID.................:%d",cnlm_ind_id);
  dbg_print_lvl(2," EV_ID..................:%d",cnlm_ev_id);
  dbg_print_lvl(2," EFFDATE................:%s",v_cnlm_effdate.arr);
  dbg_print_lvl(2," INT_START_DATE.........:%s",v_int_start_date.arr); 
  dbg_print_lvl(2," PRINCIPAL_AMT..........:%f\n",cnlm_principal_amt);

  EXEC SQL 
  INSERT INTO LOAN_ACTY (INLNAG_SEQNBR,
                         GA_ID,
                         IND_ID,
                         FAT_CODE,
                         ACTIVITY_CODE,
                         EV_ID,
                         STEP_SEQNBR,
                         EFFDATE,
                         INT_START_DATE,
                         DPDATE,
                         PRINCIPAL_AMT,
                         INT_AMT,
                         SUPPRESS_IND,
                         INRM_SEQNBR,
                         RMNC_ID,
                         AFTER_DEFAULT_IND)
                VALUES (:cnlm_inlnag_seqnbr,
                        :v_cnlm_ga_id,
                        :cnlm_ind_id,
                        'LON',
                        'N',
                        :cnlm_ev_id,
                        1,
                        to_date(:v_cnlm_effdate, 'DD-MON-YYYY'),
                        to_date(:v_int_start_date, 'DD-MON-YYYY'),
                      --to_date(:v_cnlm_effdate, 'DD-MON-YYYY'),  --dken 052014 change DPDATE to sysdate per sr636053
                        sysdate,
                        :cnlm_principal_amt,
                        0,
                        'N',
                        0,
                        0,
                        'N');

  rc =  ODB_chk_norow_rc(NOEXIT,"ERROR - inserting into loan_acty");

  if(!rc)
  {
    dbg_print_lvl(1,"Insert into loan_acty successfull!!\n");
  }
  else
  {
    rc = SQL_ERROR;
	 
	 fprintf(err_file_ptr, "ERROR - Could not create initial conversion loan balance for \n");
	 fprintf(err_file_ptr, "        ssn %s ext %ld Orig Loan ID %s\n", 
	             liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo_ptr->prev_loan_id);
	 fprintf(err_file_ptr, "SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
	 fprintf(err_file_ptr, "        Contact Systems for help.\n\n");
	 
	 

    sprintf(msgbuf,"ERROR -  %d occurred while inserting into loan_acty",sqlca.sqlcode);

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0110",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  }


  dbg_print_lvl(1,"Leaving cnlm_create_loan_acty, rc=%d\n", rc);

  return(rc);
}


/**********************************************************************
 * Function    :   cnlm_process_assessments
 *
 * Parameters  :   cnlm_info, loan_acct_info
 *
 * Called by   :   cnlm_process_conv_info()
 *
 * Calls       :   cnlm_create_assessments
 *                 cnlm_insert_assessments 
 *                 cnlm_handle_error (errors)
 *
 * Returns     :   rc  - Success (0) or Failure (anything else)
 *
 * Description :
 *
 * Assumptions :   dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_process_assessments(CNLM_INFO *lcinfo_ptr,
                             LOAN_IND_INFO *liinfo_ptr,
                             LOAN_ACCT_INFO *lainfo_ptr)
{
  char msgbuf[MAX_BUF_LEN];
  int  rc = 0;
  int  i = 0;
  int  num_fetched = 0;
  int  total_num_fetched = 0;
  int  more_to_fetch = TRUE;
  LOAN_ASSESS_INFO lsinfo;

  EXEC SQL BEGIN DECLARE SECTION;
   long    v_cnlm_cvpa_id;
   VARCHAR v_cnlm_prev_loan_id[20];
   long    cnlm_inlnag_seqnbr = 0;
   VARCHAR v_cnlm_ga_id[14];
   long    cnlm_ind_id = 0;
   long    cnlm_master_ev_id = 0;
   VARCHAR v_cnlm_due_date[MAX_ROWS][13];
   short   v_cnlm_due_date_ind[MAX_ROWS];
   double  cnlm_principal_amt[MAX_ROWS];
   short   cnlm_principal_amt_ind[MAX_ROWS];
   double  cnlm_int_amt[MAX_ROWS];
   short   cnlm_int_amt_ind[MAX_ROWS];
  EXEC SQL END DECLARE SECTION;

  msgbuf[0] = '\0';
  stov(v_cnlm_prev_loan_id,"");
  stov(v_cnlm_ga_id,"");
  memset(&lsinfo, 0, sizeof(lsinfo));

  cnlm_master_ev_id = lcinfo_ptr->master_ev_id;
  v_cnlm_cvpa_id = liinfo_ptr->cvpa_id;
  stov(v_cnlm_prev_loan_id,lainfo_ptr->prev_loan_id);

  dbg_print_lvl(1,"Entering cnlm_process_assessments");
  dbg_print_lvl(1,"---------------------------------");
  dbg_print_lvl(1,"Selecting all the assessment information...");
  dbg_print_lvl(2," CVPA_ID.................:%ld",v_cnlm_cvpa_id);
  dbg_print_lvl(2," prev_loan_id.......:%s",v_cnlm_prev_loan_id.arr);
  dbg_print_lvl(2," EV_ID...............:%d\n",cnlm_master_ev_id);

  EXEC SQL DECLARE cnlm_get_assessment_info_cur CURSOR FOR
  SELECT  to_char(due_date,'DD-MON-YYYY'),
          principal_amt,
          int_amt
  FROM work_conv_part_loan_assess 
  WHERE cvpa_id = :v_cnlm_cvpa_id
  AND   prior_loan_id = :v_cnlm_prev_loan_id
  AND   (status_code = 'UNPAID' OR status_code is null);
  

  EXEC SQL OPEN cnlm_get_assessment_info_cur;

  rc = ODB_chk_norow_rc(NOEXIT,"ERROR - Openning the cnlm_get_assessment_info_cur");

  if(!rc)
  {
    do
    {
      for (i = 0; i < MAX_ROWS; i++)
      {
        stov(v_cnlm_due_date[i],"");
        v_cnlm_due_date_ind[i] = -1;
        cnlm_principal_amt[i] = 0;
        cnlm_principal_amt_ind[i] = -1;
        cnlm_int_amt[i] = 0;
        cnlm_int_amt_ind[i] = -1;
      }

      EXEC SQL FETCH cnlm_get_assessment_info_cur
               INTO  :v_cnlm_due_date:v_cnlm_due_date_ind,
                     :cnlm_principal_amt:cnlm_principal_amt_ind,
                     :cnlm_int_amt:cnlm_int_amt_ind;
		

      rc = ODB_chk_rc(NOEXIT,"ERROR - Fetching the cnlm_get_assessment_info_cur");
  
      if(!rc)
      {
        num_fetched = sqlca.sqlerrd[2] - total_num_fetched;
        total_num_fetched = sqlca.sqlerrd[2];

        if(sqlca.sqlcode == ORA_NOROW)
        {
          more_to_fetch = FALSE;
        }

        dbg_print_lvl(1,"Num_fetched %d",num_fetched);

        /* if((total_num_fetched == 0)&&(num_fetched == 0))
        {
          rc = cnlm_create_assessments(lcinfo_ptr,
                                       liinfo_ptr,
                                       lainfo_ptr);
          if(rc)
          {
            dbg_print_lvl(1,"ERROR - An error occurred in cnlm_create_assessments");
          }  
        } */

        while((num_fetched > 0)&&(!rc))
        {
          for(i = 0; i < num_fetched; i++)
          {
            if(!rc)
            {
              memset(&lsinfo, 0, sizeof(lsinfo));

              if(v_cnlm_due_date_ind[i] == -1)
              {
                stov(v_cnlm_due_date[i],"");
              }
              else
              {
                vtos(v_cnlm_due_date[i]);
                strcpy(lsinfo.due_date,(char *)v_cnlm_due_date[i].arr);
              }

              if(cnlm_principal_amt_ind[i] == -1)
              {
                cnlm_principal_amt[i] = 0;
              }
              else
              {
                lsinfo.principal_amt = cnlm_principal_amt[i];
              }

              if(cnlm_int_amt_ind[i] == -1)
              {
                cnlm_int_amt[i] = 0;
              }
              else
              {
                lsinfo.int_amt = cnlm_int_amt[i];
              } 
				  

              dbg_print_lvl(2,"Returned assessment information");
              dbg_print_lvl(2," DUE_DATE................:%s",v_cnlm_due_date[i].arr);
              dbg_print_lvl(2," PRINCIPAL_AMT...........:%f",cnlm_principal_amt[i]);
              dbg_print_lvl(2," INT_AMT.................:%f\n",cnlm_int_amt[i]);
				 
              
              dbg_print_lvl(1,"Calling cnlm_insert_assessments");

              rc = cnlm_insert_assessments(lcinfo_ptr,
                                           liinfo_ptr,
                                           lainfo_ptr,
                                           &lsinfo);
              if(rc)
              {
                dbg_print_lvl(1,"ERROR - An error occurred in cnlm_insert_assessments");
              }
            }
          } /* End of for num_fetched loop */
          num_fetched = 0;
        }/*  End of while(num_fetched > 0) */
      }
      else
      {
        rc = SQL_ERROR;

        sprintf(msgbuf,"ERROR -  %d occurred while fetching the cnlm_get_assessment_info_cur"
                      ,sqlca.sqlcode);

        dbg_print_lvl(1,"%s",msgbuf);

        cnlm_handle_error("E",
                          "9999",
                          "0115",
                          "0000",
                          msgbuf,
                          lcinfo_ptr,
                          liinfo_ptr);
        return(rc);
      }
    }
    while((more_to_fetch)&&(!rc));
  }
  else
  {
    rc = SQL_ERROR;

    sprintf(msgbuf,"ERROR -  %d occurred while openning the cnlm_get_assessment_info_cur"
                  ,sqlca.sqlcode);

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0120",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  }

  if(!rc)
  {
    dbg_print_lvl(1,"Calling cnlm_validate_assessments");

    rc = cnlm_validate_assessments(lcinfo_ptr,
                                   liinfo_ptr, 
                                   lainfo_ptr);
    if(rc)
    {
      dbg_print_lvl(1,"ERROR - An error occurred in cnlm_validate_assessments");
    }
  }

  dbg_print_lvl(1,"Leaving cnlm_process_assessments, rc=%d\n", rc);

  return(rc);
}


/**********************************************************************
 * Function    :   cnlm_create_assessments
 *
 * Parameters  :   cnlm_info, loan_acct_info
 *
 * Called by   :   cnlm_process_assessments()
 *
 * Calls       :   LAMS 
 *                 cnlm_handle_error (errors)
 *
 * Returns     :   rc  - Success (0) or Failure (anything else)
 *
 * Description :
 *
 * Assumptions :   dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_create_assessments(CNLM_INFO *lcinfo_ptr,
                            LOAN_IND_INFO *liinfo_ptr,
                            LOAN_ACCT_INFO *lainfo_ptr)
{
  char msgbuf[MAX_BUF_LEN];
  int  rc = 0;
  char cnlm_ind_id[11];
  char cnlm_ga_id[14];
  char cnlm_ev_id[11];
  char cnlm_gc_id[11];
  char cnlm_inlnag_seqnbr[11];
  char cnlm_effdate[13];
  char cnlm_loan_amt[20];
  char cnlm_loan_term_qual[3];
  char cnlm_fixed_int_rate[10];
  char cnlm_repay_mthd_code[11];
  char cnlm_repay_freq[3];
  char cnlm_repay_amt[20];

  EXEC SQL BEGIN DECLARE SECTION;
   VARCHAR v_cnlm_loan_term[3];
   short   v_cnlm_loan_term_ind = -1; 
   VARCHAR v_cnlm_maturity_date[12];
   VARCHAR v_cnlm_first_due_date[12];
  EXEC SQL END DECLARE SECTION;
 
  msgbuf[0] = '\0';
  cnlm_ind_id[0] = '\0';
  cnlm_ga_id[0] = '\0';
  cnlm_ev_id[0] = '\0';
  cnlm_gc_id[0] = '\0';
  cnlm_inlnag_seqnbr[0] = '\0';
  cnlm_effdate[0] = '\0';
  cnlm_loan_amt[0] = '\0';
  cnlm_loan_term_qual[0] = '\0';
  cnlm_fixed_int_rate[0] = '\0';
  cnlm_repay_mthd_code[0] = '\0';
  cnlm_repay_freq[0] = '\0';
  cnlm_repay_amt[0] = '\0';
  stov(v_cnlm_maturity_date,"");
  stov(v_cnlm_first_due_date,"");
  sprintf(cnlm_ind_id,"%ld",liinfo_ptr->ind_id);
  strcpy(cnlm_ga_id,lcinfo_ptr->ga_id);
  sprintf(cnlm_ev_id,"%ld",liinfo_ptr->ev_id);
  sprintf(cnlm_gc_id,"%ld",lcinfo_ptr->gc_id);
  if(strcmp(lcinfo_ptr->use_prior_id, "Y") == 0)
     sprintf(cnlm_inlnag_seqnbr,"%ld",atol(lainfo_ptr->prev_loan_id));
  else
     sprintf(cnlm_inlnag_seqnbr,"%ld",lainfo_ptr->inlnag_seqnbr);
  strcpy(cnlm_effdate,lcinfo_ptr->effdate);
  stov(v_cnlm_first_due_date,lainfo_ptr->first_due_date);
  sprintf(cnlm_loan_amt,"%f",lainfo_ptr->loan_amt);
  strcpy(cnlm_loan_term_qual,lainfo_ptr->loan_term_qual);
  sprintf(cnlm_fixed_int_rate,"%f",lainfo_ptr->fixed_int_rate);
  strcpy(cnlm_repay_mthd_code,lainfo_ptr->repay_mthd_code);
  strcpy(cnlm_repay_freq,lainfo_ptr->repay_freq);
  sprintf(cnlm_repay_amt,"%f",lainfo_ptr->repay_amt);
  stov(v_cnlm_maturity_date,lainfo_ptr->maturity_date); 

  dbg_print_lvl(1,"Entering cnlm_create_assessments");
  dbg_print_lvl(1,"--------------------------------");
  dbg_print_lvl(1,"Selecting the loan_term");

  EXEC SQL
  SELECT round(months_between(to_date(:v_cnlm_first_due_date, 'DD-MON-YYYY'),
                              to_date(:v_cnlm_maturity_date, 'DD-MON-YYYY'))) 
  INTO :v_cnlm_loan_term:v_cnlm_loan_term_ind
  FROM dual;

  rc = ODB_chk_norow_rc(NOEXIT,"ERROR - Selecting the loan term for LAMS"); 
  
  if(!rc)
  {
    if(v_cnlm_loan_term_ind == -1)
    {
      stov(v_cnlm_loan_term,""); 
    }
    else
    {
      vtos(v_cnlm_loan_term);
    }

    dbg_print_lvl(1," LOAN_TERM............:%s\n",v_cnlm_loan_term.arr);

    dbg_print_lvl(1,"Calling LAMS with...");                                                                                  
    dbg_print_lvl(1," IND_ID...............:%s",cnlm_ind_id);
    dbg_print_lvl(1," GA_ID................:%s",cnlm_ga_id);
    dbg_print_lvl(1," EV_ID................:%s",cnlm_ev_id);
    dbg_print_lvl(1," GC_ID................:%s",cnlm_gc_id);
    dbg_print_lvl(1," INLNAG_SEQNBR........:%s",cnlm_inlnag_seqnbr);
    dbg_print_lvl(1," EFFDATE..............:%s",cnlm_effdate);
    dbg_print_lvl(1," FIRST_DUE_DATE.......:%s",v_cnlm_first_due_date.arr);
    dbg_print_lvl(1," LOAN_AMT.............:%s",cnlm_loan_amt);
    dbg_print_lvl(1," LOAN_TERM............:%s",v_cnlm_loan_term.arr);
    dbg_print_lvl(1," LOAN_TERM_QUAL.......:%s",cnlm_loan_term_qual);
    dbg_print_lvl(1," FIXED_INT_RATE.......:%s",cnlm_fixed_int_rate);
    dbg_print_lvl(1," REPAY_MTHD_CODE......:%s",cnlm_repay_mthd_code);
    dbg_print_lvl(1," REPAY_FREQ...........:%s",cnlm_repay_freq);
    dbg_print_lvl(1," REPAY_AMT............:%s",cnlm_repay_amt);
    dbg_print_lvl(1," MATURITY_DATE........:%s\n",v_cnlm_maturity_date.arr);

    rc = LAMS(cnlm_ind_id,
              cnlm_ga_id,
              cnlm_ev_id,
              cnlm_gc_id,
              cnlm_inlnag_seqnbr,
              "LCNV",
              "",
              cnlm_effdate,
              (char *)v_cnlm_first_due_date.arr,
              cnlm_loan_amt,
              (char *)v_cnlm_loan_term.arr,
              "M",
              cnlm_fixed_int_rate,
              cnlm_repay_mthd_code,
              cnlm_repay_freq,
              cnlm_repay_amt,
              (char *)v_cnlm_maturity_date.arr,
              "",
              "",
              "",
              0);

    if(!rc)
    {
      dbg_print_lvl(1,"Amortization schedule successfully created");
    }
    else
    {
      rc = LAMS_ERROR;
		
		fprintf(err_file_ptr, "ERROR - Could not generate amm schedule for \n");
		fprintf(err_file_ptr, "        ssn %s ext %ld Orig Loan ID %s\n", 
		       liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo_ptr->prev_loan_id);
      fprintf(err_file_ptr, "        Contact Systems for help.\n\n");				 
		
      sprintf(msgbuf,"ERROR - An error occurred while calling LAMS to create the amortization schedule");

      dbg_print_lvl(1,"%s",msgbuf);

      cnlm_handle_error("E",                                                                                                  
                        "9999",                                                                                               
                        "0125",
                        "0000",
                        msgbuf,
                        lcinfo_ptr,
                        liinfo_ptr);
      return(rc);
    }
  }
  else
  {
    rc = SQL_ERROR;
	 
	 fprintf(err_file_ptr, "ERROR - Could not calculate the number of months between\n");
	 fprintf(err_file_ptr, "        first due date and maturity date for ssn %s ext %ld Orig Loan ID %s\n",
	         liinfo_ptr->ssn, liinfo_ptr->ssn_ext, lainfo_ptr->prev_loan_id);
	 fprintf(err_file_ptr, "        Make sure first due date and maturity date exist for the ssn.\n");
	 fprintf(err_file_ptr, "        SQL error message is %s\n\n", sqlca.sqlerrm.sqlerrmc);

    sprintf(msgbuf,"ERROR - An error occurred while selecting the loan term for LAMS");

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0127",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  }  
 
  dbg_print_lvl(1,"Leaving cnlm_create_assessments, rc=%d\n", rc);

  return(rc);
}


/*****************************************************************************************
	cnlm_calc_amortization_sched()
******************************************************************************************/

int cnlm_calc_amortization_sched(char* user_id, char* ga_id, long master_ev_id, char* effdate)
	{
	int	index = 0;
	int	past_maturity_date = 0;
	char	next_due_date[12];
	char	current_due_date[12];
	double	int_factor;
	int   rc = 0;
	char msgbuf[MAX_BUF_LEN];
   int  i = 0;
   int  num_fetched = 0;
   int  total_num_fetched = 0;
   int  more_to_fetch = TRUE;
	char* amm_err_file_name;
	FILE* amm_err_file_ptr;
	char* user;
	char command[128];
	int assessment_count;
	double repayment_amount;
	char    due_date_array[1600][12];
   char    calc_rep_ind[2];
   double  principal_amt_array[1600];
   double  interest_amt_array[1600];
   double  prin_balance_array[1600];
	int     days_between_payments;
	int     err_warn_count = 0;

	EXEC SQL BEGIN DECLARE SECTION;
		int	num_days;
		int	maturity_days;
		int  monthly_term;
		int  annual_term;
                float annual_term_chk = 0.0;
		VARCHAR ar_next_due_date[12];
		VARCHAR ar_current_due_date[12];
		VARCHAR maturity_date[12];
		long  l_grp_ev_id;
        VARCHAR l_user_id[10];
		VARCHAR v_loan_type[MAX_ROWS][25];
		short  v_loan_type_ind[MAX_ROWS];
		VARCHAR l_ga_id[14];
		VARCHAR l_effdate[12];
		VARCHAR v_cnlm_ssn[MAX_ROWS][12];
		short v_cnlm_ssn_ind[MAX_ROWS];
		VARCHAR v_cnlm_prior_loan_id[MAX_ROWS][21];
		short v_cnlm_prior_loan_id_ind[MAX_ROWS];
		long	v_cnlm_cvpa_id[MAX_ROWS];
   	short v_cnlm_cvpa_id_ind[MAX_ROWS];
		VARCHAR v_cnlm_first_due_date[MAX_ROWS][12];
		short v_cnlm_first_due_date_ind[MAX_ROWS];
		double v_cnlm_fixed_int_rate[MAX_ROWS];
		short v_cnlm_fixed_int_rate_ind[MAX_ROWS];
		int    v_cnlm_loan_term[MAX_ROWS];
		short  v_cnlm_loan_term_ind[MAX_ROWS];
		VARCHAR v_cnlm_loan_term_qual[MAX_ROWS][3];
		short  v_cnlm_loan_term_qual_ind[MAX_ROWS];
		VARCHAR v_cnlm_repay_freq[MAX_ROWS][3];
		short   v_cnlm_repay_freq_ind[MAX_ROWS];
		VARCHAR v_cnlm_maturity_date[MAX_ROWS][12];
		short   v_cnlm_maturity_date_ind[MAX_ROWS];
		double  v_cnlm_loan_amt[MAX_ROWS];
		short   v_cnlm_loan_amt_ind[MAX_ROWS];
		double  v_cnlm_repay_amt[MAX_ROWS];
		short   v_cnlm_repay_amt_ind[MAX_ROWS];
		VARCHAR v_cnlm_grlnst_effdate[12];
		VARCHAR v_cnlm_sdlnst_code[21];
		VARCHAR loan_type_code_l[11];
		long    cvpa_id_l;
		VARCHAR prior_loan_id_l[21];
		VARCHAR temp_prior_loan_id[21];
		VARCHAR tmp_loan_type[25];
		long    temp_cvpa_id;
		double  temp_repay_amt;
		VARCHAR due_date[12];
		double  principal_amt; 
      double  int_amt;
		double  balloon_payment;
		VARCHAR temp_maturity_date[12];
		int	  days_before_maturity_date;
	EXEC SQL END DECLARE SECTION;

	dbg_indent("Entering cnlm_calc_amortization_sched() function ....");
	
	/*if ((user = getenv("USER")) == (char *) NULL)
		{
		dbg_print_lvl(1, "Could not get USER env variable");
		return (FAILURE);
		}*/
        stov(l_user_id, user_id);	
		//stov(l_loan_type,loan_type);
	amm_err_file_name = tmpnam(NULL);

   if ((amm_err_file_ptr = fopen(amm_err_file_name,"w")) == (FILE *) NULL)
		return (FAILURE);	
		
	sprintf(command, "/usr/ucb/mail %s < %s", (char *)l_user_id.arr, amm_err_file_name);
		
	fprintf(amm_err_file_ptr, "SUBJECT: Amm Schedules For GA: %s\n\n\n", ga_id);
	
	stov(l_ga_id, ga_id);
	l_grp_ev_id = master_ev_id;
	stov(l_effdate, effdate);
	
	EXEC SQL DECLARE cnlm_get_amm_parts_cur CURSOR FOR
      SELECT ssn, cvpa_id, prior_loan_id, to_char(first_due_date, 'DD-MON-YYYY'), 
		       fixed_int_rate, loan_term, loan_term_qual, repay_freq, loan_amt,
		       to_char(maturity_date, 'DD-MON-YYYY'), repay_amt,loan_reason_code
      FROM work_conv_part_loan_acct la, work_conv_part p
      WHERE p.ev_id = :l_grp_ev_id
		AND p.id = la.cvpa_id
		AND la.loan_ev_id is null;
   
   EXEC SQL OPEN cnlm_get_amm_parts_cur;

   rc = ODB_chk_norow_rc(NOEXIT,"ERROR - Openning the cnlm_get_amm_parts_cur");

   if(!rc)
   	{
     	do
     		{
       	for (i = 0; i < MAX_ROWS; i++)
       		{
				stov(v_cnlm_ssn[i],"");
				v_cnlm_ssn_ind[i] = -1;
				stov(v_cnlm_prior_loan_id[i],"");
				v_cnlm_prior_loan_id_ind[i] = -1;
         	v_cnlm_cvpa_id[i] = -1;
         	v_cnlm_cvpa_id_ind[i] = -1;
				stov(v_cnlm_first_due_date[i],"");
        		v_cnlm_first_due_date_ind[i] = -1;
				v_cnlm_fixed_int_rate[i] = -1;
				v_cnlm_fixed_int_rate_ind[i] = -1;
				v_cnlm_loan_term[i] = -1;
				v_cnlm_loan_term_ind[i] = -1;
				stov(v_cnlm_loan_term_qual[i],"");
				v_cnlm_loan_term_qual_ind[i] = -1; 
				stov(v_cnlm_repay_freq[i],"");
				v_cnlm_repay_freq_ind[i] = -1;
				v_cnlm_loan_amt[i] = -1;
				v_cnlm_loan_amt_ind[i] = -1;
				stov(v_cnlm_maturity_date[i],"");
				v_cnlm_maturity_date_ind[i] = -1;
				v_cnlm_repay_amt[i] = -1;
				v_cnlm_repay_amt_ind[i] = -1;
				stov(v_loan_type[i],"");
				v_loan_type_ind[i] = -1;
      	 	}


       	EXEC SQL FETCH cnlm_get_amm_parts_cur
                INTO  :v_cnlm_ssn:v_cnlm_ssn_ind,
							 :v_cnlm_cvpa_id:v_cnlm_cvpa_id_ind,
							 :v_cnlm_prior_loan_id:v_cnlm_prior_loan_id_ind,
						    :v_cnlm_first_due_date:v_cnlm_first_due_date_ind,
							 :v_cnlm_fixed_int_rate:v_cnlm_fixed_int_rate_ind,
							 :v_cnlm_loan_term:v_cnlm_loan_term_ind,
							 :v_cnlm_loan_term_qual:v_cnlm_loan_term_qual_ind,
							 :v_cnlm_repay_freq:v_cnlm_repay_freq_ind,
							 :v_cnlm_loan_amt:v_cnlm_loan_amt_ind,
							 :v_cnlm_maturity_date:v_cnlm_maturity_date_ind,
							 :v_cnlm_repay_amt:v_cnlm_repay_amt_ind,
							 :v_loan_type:v_loan_type_ind;


      	 rc = ODB_chk_rc(NOEXIT,"ERROR - Fetching the cnlm_get_amm_parts_cur");

      	 if(!rc)
      	 	{
         	num_fetched = sqlca.sqlerrd[2] - total_num_fetched;
         	total_num_fetched = sqlca.sqlerrd[2];

         	if(sqlca.sqlcode == ORA_NOROW)
         		{
         	  	more_to_fetch = FALSE;
         		}

         	dbg_print_lvl(1,"Num_fetched %d",num_fetched);

         	while(num_fetched > 0)
         		{
         		for(i = 0; i < num_fetched; i++)
            		{
				vtos(v_cnlm_repay_freq[i]);
                                vtos(v_cnlm_ssn[i]);
                                vtos(v_cnlm_prior_loan_id[i]);
                                vtos(v_cnlm_first_due_date[i]);
	                        vtos(v_cnlm_loan_term_qual[i]);
                                vtos(v_cnlm_maturity_date[i]);

						temp_cvpa_id = v_cnlm_cvpa_id[i];
						stov(temp_prior_loan_id, (char*)v_cnlm_prior_loan_id[i].arr);
						stov(tmp_loan_type, (char*)v_loan_type[i].arr);	
						
						EXEC SQL
						DELETE FROM WORK_CONV_PART_LOAN_ASSESS
						WHERE CVPA_ID = :temp_cvpa_id
						  AND PRIOR_LOAN_ID = :temp_prior_loan_id;

						
						if (strcmp((char*)v_cnlm_loan_term_qual[i].arr, "M") == 0)
  							{
							monthly_term = v_cnlm_loan_term[i];
							annual_term = v_cnlm_loan_term[i] / 12;
							annual_term_chk = (float)v_cnlm_loan_term[i] / 12;

/******** Loan Less Than 12 months Do Not Get Rejected *****
							if (monthly_term < 12)
								{
								rc = INVALID_LOAN_TERM_ERROR;

								fprintf(amm_err_file_ptr, "ERROR - The loan term is less than 12 months\n");
								fprintf(amm_err_file_ptr, "        for ssn %s Orig Loan ID %s\n\n", 
			            					  (char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);

								sprintf(msgbuf,"ERROR - The Loan Term Qualifier is not Valid");

    							dbg_print_lvl(1,"%s",msgbuf);
								
								fclose(amm_err_file_ptr);	
								system(command);	
								remove(amm_err_file_name);

    							return(rc);
								}
**************************/

							}
						else if (strcmp((char*)v_cnlm_loan_term_qual[i].arr, "A") == 0)
							{
							monthly_term = v_cnlm_loan_term[i] * 12;
							annual_term = v_cnlm_loan_term[i];
							annual_term_chk = (float)annual_term;
							}
						else
							{
							rc = UNKNOWN_TERM_QUAL_ERROR;

							fprintf(err_file_ptr,"ERROR - The Loan Term Qualifier is not valid for \n");
							fprintf(err_file_ptr,"        ssn %s Orig Loan ID %s\n", 
		         					(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id);
							fprintf(err_file_ptr,"        Valid values for Qualifier are M or A.\n\n");


    						sprintf(msgbuf,"ERROR - The Loan Term Qualifier is not Valid");

    						dbg_print_lvl(1,"%s",msgbuf);

    						return(rc);
  							}
dbg_print_lvl(2,"Selecting from the Changed query \n");
						EXEC SQL
						SELECT to_char(grlnst_effdate, 'DD-MON-YYYY'), sdlnst_code
						INTO :v_cnlm_grlnst_effdate, :v_cnlm_sdlnst_code
						FROM GRP_LOAN_TERM G1
						WHERE GA_ID = :l_ga_id
						AND LOAN_TERM_QUAL = 'M'
						AND (CASE WHEN :tmp_loan_type = loan_reason_code 
									THEN 1
								 ELSE 
									CASE WHEN (:monthly_term BETWEEN LOW_THRESH AND HIGH_THRESH ) and ( trim(:tmp_loan_type) is null)
											THEN 1 
										ELSE 0 
									END 
							END = 1) 
						--AND :monthly_term BETWEEN G2.LOW_THRESH AND G2.HIGH_THRESH
						AND GRLNST_EFFDATE <= TO_DATE(:l_effdate, 'DD-MON-YYYY')
   			         		AND GRLNST_EFFDATE = (SELECT MAX(GRLNST_EFFDATE)
		                  			        	 FROM GRP_LOAN_TERM G2
						               		 WHERE G1.GA_ID = G2.GA_ID
									AND G1.LOAN_TERM_QUAL = G2.LOAN_TERM_QUAL
						AND (CASE WHEN :tmp_loan_type = loan_reason_code 
									THEN 1
								 ELSE 
									CASE WHEN (:monthly_term BETWEEN G2.LOW_THRESH AND G2.HIGH_THRESH ) and ( trim(:tmp_loan_type) is null)
											THEN 1 
										ELSE 0 
									END 
							END = 1) 
							        	--AND :monthly_term BETWEEN G2.LOW_THRESH AND G2.HIGH_THRESH
							 		AND GRLNST_EFFDATE <= TO_DATE(:l_effdate, 'DD-MON-YYYY')
                                                                        AND (G2.GA_ID, G2.GRLNST_EFFDATE, G2.SDLNST_CODE) IN
                                                                        (SELECT G3.GA_ID, G3.EFFDATE, G3.SDLNST_CODE
                                                                           FROM GRP_LOAN_STRUC G3
                                                                           WHERE G3.GA_ID = G2.GA_ID
                                                                             AND G3.EFFDATE = G2.GRLNST_EFFDATE
                                                                             AND G3.SDLNST_CODE = G2.SDLNST_CODE
                                                                             AND G3.TERMDATE IS null));

						rc =  ODB_chk_rc(NOEXIT,"ERROR - selecting grp_loan_term");

						if (!rc && sqlca.sqlcode != 1403)
							{
							vtos(v_cnlm_grlnst_effdate);
							vtos(v_cnlm_sdlnst_code);
							}

  						else if (!rc && sqlca.sqlcode == 1403)
  							{
dbg_print_lvl(2,"Selecting from the Changed query \n");
    						EXEC SQL
							SELECT to_char(grlnst_effdate, 'DD-MON-YYYY'), sdlnst_code
							INTO :v_cnlm_grlnst_effdate, :v_cnlm_sdlnst_code
							FROM GRP_LOAN_TERM G1
							WHERE GA_ID = :l_ga_id
							AND LOAN_TERM_QUAL = 'A'
                            --AND :annual_term_chk BETWEEN LOW_THRESH AND HIGH_THRESH
							AND (CASE WHEN :tmp_loan_type = loan_reason_code 
									THEN 1
								 ELSE 
									CASE WHEN (:annual_term BETWEEN LOW_THRESH AND HIGH_THRESH ) and ( trim(:tmp_loan_type) is null)
											THEN 1 
										ELSE 0 
									END 
							END = 1) 
							AND GRLNST_EFFDATE <= TO_DATE(:l_effdate, 'DD-MON-YYYY')
							AND GRLNST_EFFDATE = (SELECT MAX(GRLNST_EFFDATE)
		                         					 FROM GRP_LOAN_TERM G2
										 WHERE G1.GA_ID = G2.GA_ID
					   					AND G1.LOAN_TERM_QUAL = G2.LOAN_TERM_QUAL
										--AND :annual_term BETWEEN G2.LOW_THRESH AND G2.HIGH_THRESH
										AND (CASE WHEN :tmp_loan_type = loan_reason_code 
											THEN 1
												ELSE 
													CASE WHEN (:annual_term BETWEEN G2.LOW_THRESH AND G2.HIGH_THRESH ) and ( trim(:tmp_loan_type) is null)
													THEN 1 
													ELSE 0 
												END 
											END = 1) 
										AND GRLNST_EFFDATE <= TO_DATE(:l_effdate, 'DD-MON-YYYY')
                                                                                AND (G2.GA_ID, G2.GRLNST_EFFDATE, G2.SDLNST_CODE) IN
                                                                                (SELECT G3.GA_ID, G3.EFFDATE, G3.SDLNST_CODE
                                                                                   FROM GRP_LOAN_STRUC G3
                                                                                   WHERE G3.GA_ID = G2.GA_ID
                                                                                     AND G3.EFFDATE = G2.GRLNST_EFFDATE
                                                                                     AND G3.SDLNST_CODE = G2.SDLNST_CODE
                                                                                     AND G3.TERMDATE IS null));

							rc =  ODB_chk_norow_rc(NOEXIT,"ERROR - selecting grp_loan_term again");

							if (!rc)
								{
								vtos(v_cnlm_grlnst_effdate);
								vtos(v_cnlm_sdlnst_code);
									if ((annual_term_chk - annual_term) > 0)
									{
									 fprintf(amm_err_file_ptr, "WARNING: Loan term for ssn %s Orig Loan ID %s\n", 
									(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);
									fprintf(amm_err_file_ptr, "         Could not process with monthly loan term %d\n", monthly_term); 
									fprintf(amm_err_file_ptr, "         Amortization schedule will be created for annual loan term of %d\n", annual_term);
  									++err_warn_count;
									}
								}

							else
								{
								rc = SQL_ERROR;

								fprintf(amm_err_file_ptr, "ERROR - Loan term for ssn %s Orig Loan ID %s\n", 
			         					(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);
								fprintf(amm_err_file_ptr, "        is not valid for the group\n");
								fprintf(amm_err_file_ptr, "        To see valid values, access QYGR form.\n");
								fprintf(amm_err_file_ptr, "        Select Inquire Group Loan Structure.\n");
								fprintf(amm_err_file_ptr, "        Click on Loan Term button for each structure.\n");     						
								fprintf(amm_err_file_ptr, "SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
								fprintf(amm_err_file_ptr, "Make sure loan term and repay frequency are valid\n\n");
                                                                ++err_warn_count;


    							sprintf(msgbuf,"ERROR -  %d occurred while selecting annual grp_loan_term",sqlca.sqlcode);
                                                        sprintf(msgbuf,"Start Processing Next Loan");
    							dbg_print_lvl(1,"%s",msgbuf);
                                                        continue;
/*
								fclose(amm_err_file_ptr);	
								system(command);	
								remove(amm_err_file_name);

    							return(rc);
*/
  								}
  							}    /* else if (!rc && sqlca.sqlcode == 1403) */
  						else
  							{
    						rc = SQL_ERROR;

							fprintf(amm_err_file_ptr, "ERROR - Loan term for ssn %s Orig Loan ID %s\n", 
			         					(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);
							fprintf(amm_err_file_ptr, "        is not valid for the group\n");
							fprintf(amm_err_file_ptr, "        To see valid values, access QYGR form.\n");
							fprintf(amm_err_file_ptr, "        Select Inquire Group Loan Structure.\n");
							fprintf(amm_err_file_ptr, "        Click on Loan Term button for each structure.\n");     						

							fprintf(amm_err_file_ptr, "SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
                                                        fprintf(amm_err_file_ptr, "Make sure loan term and repay frequency are valid\n\n");
                                                        ++err_warn_count;

    						sprintf(msgbuf,"ERROR -  %d occurred while selecting monthly grp_loan_term",sqlca.sqlcode);
                                                sprintf(msgbuf,"Start Processing Next Loan");
    						dbg_print_lvl(1,"%s",msgbuf);
                                                continue;
							
/*
							fclose(amm_err_file_ptr);	
							system(command);	
							remove(amm_err_file_name);

    						return(rc);
*/
  							}

						EXEC SQL
						SELECT LOAN_TYPE_CODE
						INTO :loan_type_code_l
						FROM GRP_LOAN_STRUC
						WHERE SDLNST_CODE = :v_cnlm_sdlnst_code
						  AND EFFDATE = TO_DATE(:v_cnlm_grlnst_effdate, 'DD-MON-YYYY')
 						  AND GA_ID = :l_ga_id
						  AND TERMDATE IS null;
						  
						rc = ODB_chk_norow_rc(NOEXIT,"ERROR - selecting loan type code");
						
						if (!rc)
							{
							vtos(loan_type_code_l);

							if (strcmp((char *) loan_type_code_l.arr, "COLLATERAL") == 0)
								{
								/* insert 1 quarter of loan assessments */

								if (strcmp((char *) v_cnlm_repay_freq[i].arr, "W") == 0)
									{
									assessment_count = 13;
									}
								else if (strcmp((char *) v_cnlm_repay_freq[i].arr, "BW") == 0)
									{
									assessment_count = 6;
									}
								else if (strcmp((char *) v_cnlm_repay_freq[i].arr, "M") == 0)
									{
									assessment_count = 3;
									}
								else if (strcmp((char *) v_cnlm_repay_freq[i].arr, "SM") == 0)
									{
									assessment_count = 6;
									}
								else if (strcmp((char *) v_cnlm_repay_freq[i].arr, "Q") == 0)
									{
									assessment_count = 1;
									}
								}
							else if (strcmp((char *) loan_type_code_l.arr, "COLL/TRAN") == 0)
								{
								/* insert 1 year of loan assessments */

								if (strcmp((char *) v_cnlm_repay_freq[i].arr, "W") == 0)
									{
									assessment_count = 52;
									}
								else if (strcmp((char *) v_cnlm_repay_freq[i].arr, "BW") == 0)
									{
									assessment_count = 26;
									}
								else if (strcmp((char *) v_cnlm_repay_freq[i].arr, "M") == 0)
									{
									assessment_count = 12;
									}
								else if (strcmp((char *) v_cnlm_repay_freq[i].arr, "SM") == 0)
									{
									assessment_count = 24;
									}
								else if (strcmp((char *) v_cnlm_repay_freq[i].arr, "Q") == 0)
									{
									assessment_count = 4;
									}
								}
							else
								{
								assessment_count = 0;
								}

							dbg_print("assessment_count  : %d", assessment_count);

							/* calculate the interest calulation factor */

							if (strcmp((char *) v_cnlm_repay_freq[i].arr, "W") == 0)
								int_factor = v_cnlm_fixed_int_rate[i] / 5200;
							else if (strcmp((char *) v_cnlm_repay_freq[i].arr, "BW") == 0)
								int_factor = v_cnlm_fixed_int_rate[i] / 2600;
							else if (strcmp((char *) v_cnlm_repay_freq[i].arr, "M") == 0)
								int_factor = v_cnlm_fixed_int_rate[i] / 1200;
							else if (strcmp((char *) v_cnlm_repay_freq[i].arr, "SM") == 0)
								int_factor = v_cnlm_fixed_int_rate[i] / 2400;
							else if (strcmp((char *) v_cnlm_repay_freq[i].arr, "Q") == 0)
								int_factor = v_cnlm_fixed_int_rate[i] / 400;
							else
								{
								dbg_print("Invalid Repayment Frequency Code : %s\n", v_cnlm_repay_freq[i].arr);
								fprintf(amm_err_file_ptr, "ERROR - Invalid repay frequency code for ssn %s Orig Loan ID %s\n", 
			         						(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);
                                                                fprintf(amm_err_file_ptr, "Make sure loan term and repay frequency are valid \n\n");


                                                                
												
								++err_warn_count;
                                                                sprintf(msgbuf,"Start Processing Next Loan");
                                                                dbg_print_lvl(1,"%s",msgbuf);
                                                                continue;

								
/*
								fclose(amm_err_file_ptr);	
								system(command);	
								remove(amm_err_file_name);
								
								return(1);
*/
								}

   							/* calculate amortization schedule           */

							strcpy(current_due_date, (char *) v_cnlm_first_due_date[i].arr);

							repayment_amount = v_cnlm_repay_amt[i];

							if (repayment_amount == 0)
								{
								/* calculate interest assessment records for collateral loan */

								dbg_print("calculating interest assessments");

								for ( index = 1; index <= assessment_count; index++ )
									{
									strcpy(due_date_array[index], current_due_date);

									prin_balance_array[index - 1] = v_cnlm_loan_amt[i];

									principal_amt_array[index] = 0.00;

         						interest_amt_array[index] = round2(v_cnlm_loan_amt[i] * int_factor);

									/* call function to calculate next due date */

         						if (cnlm_calc_next_due_date(current_due_date, (char*)v_cnlm_repay_freq[i].arr, next_due_date))
         							{
										fprintf(amm_err_file_ptr, "ERROR - Could not determine next due date for \n");
										fprintf(amm_err_file_ptr, "        ssn %s Orig Loan ID %s\n\n", 
			         						(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);
												
										fclose(amm_err_file_ptr);	
										system(command);	
										remove(amm_err_file_name);
								
            						return(1);
         							}
         						else
         							{
            						strcpy(current_due_date, next_due_date);
         							}

									/* Display each element of amortization schedule */

         						dbg_print("%d.  Prin : %lf  Int : %lf  Bal : %lf  Due : %s",
                          							index, principal_amt_array[index], interest_amt_array[index],
                          							prin_balance_array[index], due_date_array[index]);


									}  /* for (index = 1 */

								for ( index = 1; prin_balance_array[index - 1] > 0; index++ )
   								{
      							cvpa_id_l = v_cnlm_cvpa_id[i];
									stov(prior_loan_id_l, v_cnlm_prior_loan_id[i].arr);
									stov(due_date, due_date_array[index]);
									principal_amt = principal_amt_array[index];
      							int_amt = interest_amt_array[index];

									dbg_print("Prin : %lf   Int : %lf   Date : %s", principal_amt, int_amt, due_date.arr);

									EXEC SQL INSERT INTO WORK_CONV_PART_LOAN_ASSESS
										  (CVPA_ID,
											PRIOR_LOAN_ID,
											DUE_DATE,
											INT_AMT,
											PRINCIPAL_AMT,
											STATUS_CODE)
										 VALUES
										  (:cvpa_id_l,
											:prior_loan_id_l,
											TO_DATE(:due_date, 'DD-MON-YYYY'),
											:int_amt,
           								:principal_amt,
            							'UNPAID');

   								rc =  ODB_chk_rc(NOEXIT,"ERROR - inserting loan assess");

									if (rc)
										{
										rc = SQL_ERROR;

    									sprintf(msgbuf,"ERROR -  Could not insert row into work_conv_part_loan_assess. e code: %d", sqlca.sqlcode);

    									dbg_print_lvl(1,"%s",msgbuf);
										
										++err_warn_count;

										fprintf(amm_err_file_ptr, "ERROR: Could not amm schedule row for \n");
										fprintf(amm_err_file_ptr, "       ssn %s  prior loan id %s\n\n", 
								      			(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);
										}
									}    /* for (index = 1 */
									
								temp_repay_amt = v_cnlm_repay_amt[i];

								EXEC SQL
								SELECT MAX(principal_amt + int_amt) - :temp_repay_amt  
								INTO :balloon_payment
  								FROM  work_conv_part_loan_assess 
  								WHERE cvpa_id = :temp_cvpa_id
								  AND PRIOR_LOAN_ID = :temp_prior_loan_id;

								rc =  ODB_chk_norow_rc(NOEXIT,"ERROR - selecting balloon payment");

								if (!rc)
									{
									if (balloon_payment > 5)
										{
										++err_warn_count;
										fprintf(amm_err_file_ptr, "WARNING: balloon payment created for \n");
										fprintf(amm_err_file_ptr, "         ssn: %s   prior loan id %s\n\n", 
																					(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);
										}
									}
								else
									{
									rc = SQL_ERROR;

    								sprintf(msgbuf,"ERROR -  Could not select balloon payment. e code: %d", sqlca.sqlcode);

    								dbg_print_lvl(1,"%s",msgbuf);
									
									++err_warn_count;
									
									fprintf(amm_err_file_ptr, "ERROR: Could not select balloon payment for \n");
									fprintf(amm_err_file_ptr, "       ssn %s  prior loan id %s\n\n", 
								      		(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);
									}
									
								stov(temp_maturity_date, v_cnlm_maturity_date[i].arr);
									
								EXEC SQL
								SELECT TO_DATE(:temp_maturity_date, 'DD-MON-YYYY') - MAX(DUE_DATE)
								INTO :days_before_maturity_date
								FROM WORK_CONV_PART_LOAN_ASSESS
								WHERE cvpa_id = :temp_cvpa_id
								  AND PRIOR_LOAN_ID = :temp_prior_loan_id;
								  
								rc =  ODB_chk_norow_rc(NOEXIT,"ERROR - selecting early payoff");
								
								if (!rc)
									{
									if (strcmp((char*)v_cnlm_repay_freq[i].arr, "W") == 0)
										days_between_payments = 7;
									else if (strcmp((char*)v_cnlm_repay_freq[i].arr, "BW") == 0)
										days_between_payments = 14;
									else if (strcmp((char*)v_cnlm_repay_freq[i].arr, "SM") == 0)
										days_between_payments = 15;
									else if (strcmp((char*)v_cnlm_repay_freq[i].arr, "M") == 0)
										days_between_payments = 30;
									else if (strcmp((char*)v_cnlm_repay_freq[i].arr, "Q") == 0)
										days_between_payments = 91;
									else
										days_between_payments = 0;
										
									if (days_before_maturity_date > days_between_payments)
										{
										++err_warn_count;
            dbg_indent("Error count: %d", err_warn_count);
										fprintf(amm_err_file_ptr, "WARNING: Loan pays off early for \n");
										fprintf(amm_err_file_ptr, "         ssn: %s   prior loan id %s\n\n", 
																					(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);	
										}
									}
								else
									{
									rc = SQL_ERROR;

    								sprintf(msgbuf,"ERROR -  Could not calculate early payoff. e code: %d", sqlca.sqlcode);

    								dbg_print_lvl(1,"%s",msgbuf);

									++err_warn_count;
									
									fprintf(amm_err_file_ptr, "ERROR: Could not determine early payoff for \n");
									fprintf(amm_err_file_ptr, "       ssn %s  prior loan id %s\n\n", 
								      		(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);
									}	  
								}   /* if (repayment_amount == 0) */
							else  /* repayment_amount != 0 */
								{

								prin_balance_array[0] = v_cnlm_loan_amt[i];

   							for ( index = 1; prin_balance_array[index - 1] > 0; index++ )
									{
									strcpy(due_date_array[index], current_due_date);

									interest_amt_array[index] = round2(prin_balance_array[index - 1] * int_factor);

									if ( repayment_amount - interest_amt_array[index] > prin_balance_array[index -1] )
										{

										/* set the repayment prinicpal amount equal to the remaining principal */
										/* balance, set the remaining principal balance equal to zero  */

										principal_amt_array[index] = prin_balance_array[index - 1];
										prin_balance_array[index] = 0;
										}
									else
										{
										/* principal equals repayment amount minus interest amount   */

										principal_amt_array[index] = repayment_amount - interest_amt_array[index];

										/* calculate remaining principal balance */

										prin_balance_array[index] = prin_balance_array[index - 1] - 
							   						 principal_amt_array[index];
										}

	      								/* call function to calculate next due date */

									if (cnlm_calc_next_due_date(current_due_date, (char*)v_cnlm_repay_freq[i].arr, next_due_date))
										{
										fprintf(amm_err_file_ptr, "ERROR - Could not determine next due date for \n");
										fprintf(amm_err_file_ptr, "        ssn %s Orig Loan ID %s\n\n", 
			         						(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);
												
										fclose(amm_err_file_ptr);	
										system(command);	
										remove(amm_err_file_name);
										
										return(1);
										}
									else
										{
										stov(ar_current_due_date, current_due_date);
										strcpy(current_due_date, next_due_date);
										}

									/* if called from conversion form or if called by reamortization form and we */
									/* have not recalculated repayment amounts, we need to accumulate the number */
									/* of repayments. If called by LDLY do not allow past maturity date */

									/* determine if next due date past maturity date  */
									/* if so we need to make a balloon payment        */

									stov(ar_next_due_date, next_due_date);

									dbg_print(" next_due_date    :  %s", ar_next_due_date.arr);
									dbg_print(" current_due_date : %s", ar_current_due_date.arr);

									stov(maturity_date, v_cnlm_maturity_date[i].arr);

									EXEC SQL 
				   					 SELECT TO_DATE(:ar_next_due_date, 'DD-MON-YYYY') - 
						   					  TO_DATE(:maturity_date, 'DD-MON-YYYY'),
						   					  TO_DATE(:maturity_date, 'DD-MON-YYYY') - 
												  TO_DATE(:ar_current_due_date, 'DD-MON-YYYY')
				   					 INTO :num_days,
						   					:maturity_days
				   					 FROM DUAL;

									rc =  ODB_chk_rc(NOEXIT,"ERROR - selecting num days, maturity days");

									if (!rc)
										{
										dbg_print(" num_days      : %d", num_days);
										dbg_print(" maturity_days : %d", maturity_days);

										if (num_days >= 0)
											{
											if ((past_maturity_date > 0 || index == 1) && maturity_days <= 0)
												{
												/* adjust last payment */

												principal_amt_array[index] = principal_amt_array[index] + 
									   						  prin_balance_array[index];
												prin_balance_array[index] = 0;

												strcpy(due_date_array[index], (char *) maturity_date.arr);

												}
											else
												{
												past_maturity_date = past_maturity_date + 1;
												}
											}
										}
									else
										{
										rc = SQL_ERROR;

    									sprintf(msgbuf,"ERROR -  Could not calculate days left until maturity, e code: %d", sqlca.sqlcode);

    									dbg_print_lvl(1,"%s",msgbuf);
										
										++err_warn_count;

										fprintf(amm_err_file_ptr, "ERROR: Could not calculate days left until maturity for \n");
										fprintf(amm_err_file_ptr, "       ssn %s  prior loan id %s\n\n", 
								      			(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);      

										}

									/* Display each element of amortization schedule */

									dbg_print("%d.  Prin : %lf  Int : %lf  Bal : %lf  Due : %s",
		  	  							index, principal_amt_array[index], interest_amt_array[index],
			  							prin_balance_array[index], due_date_array[index]); 
									} /* for index loop */

								for ( index = 1; prin_balance_array[index - 1] > 0; index++ )
   								{
      							cvpa_id_l = v_cnlm_cvpa_id[i];
									stov(prior_loan_id_l, v_cnlm_prior_loan_id[i].arr);
									stov(due_date, due_date_array[index]);
									principal_amt = principal_amt_array[index];
      							int_amt = interest_amt_array[index];

									dbg_print("Prin : %lf   Int : %lf   Date : %s", principal_amt, int_amt, due_date.arr);

									EXEC SQL INSERT INTO WORK_CONV_PART_LOAN_ASSESS
										  (CVPA_ID,
											PRIOR_LOAN_ID,
											DUE_DATE,
											INT_AMT,
											PRINCIPAL_AMT,
											STATUS_CODE)
										 VALUES
										  (:cvpa_id_l,
											:prior_loan_id_l,
											TO_DATE(:due_date, 'DD-MON-YYYY'),
											:int_amt,
           								:principal_amt,
            							'UNPAID');

   								rc =  ODB_chk_rc(NOEXIT,"ERROR - inserting loan assess");

									if (rc)
										{
										rc = SQL_ERROR;

    									sprintf(msgbuf,"ERROR -  Could not insert row into work_conv_part_loan_assess. e code: %d", sqlca.sqlcode);

    									dbg_print_lvl(1,"%s",msgbuf);

										++err_warn_count;
										
										fprintf(amm_err_file_ptr, "ERROR: Could not amm schedule row for \n");
										fprintf(amm_err_file_ptr, "       ssn %s  prior loan id %s\n\n", 
								      			(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);
										}
									} /* for (index = 1 */
									
								temp_repay_amt = v_cnlm_repay_amt[i];

								EXEC SQL
								SELECT MAX(principal_amt + int_amt) - :temp_repay_amt  
								INTO :balloon_payment
  								FROM  work_conv_part_loan_assess 
  								WHERE cvpa_id = :temp_cvpa_id
								  AND PRIOR_LOAN_ID = :temp_prior_loan_id;

								rc =  ODB_chk_norow_rc(NOEXIT,"ERROR - selecting balloon payment");

								if (!rc)
									{
									if (balloon_payment > 5)
										{
										++err_warn_count;
										
										fprintf(amm_err_file_ptr, "WARNING: balloon payment created for \n");
										fprintf(amm_err_file_ptr, "         ssn: %s   prior loan id %s\n\n", 
																					(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);
										}
									}
								else
									{
									rc = SQL_ERROR;

    								sprintf(msgbuf,"ERROR -  Could not select balloon payment. e code: %d", sqlca.sqlcode);

    								dbg_print_lvl(1,"%s",msgbuf);

									++err_warn_count;
									
									fprintf(amm_err_file_ptr, "ERROR: Could not select balloon payment for \n");
									fprintf(amm_err_file_ptr, "       ssn %s  prior loan id %s\n\n", 
								      		(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);
									}
									
								stov(temp_maturity_date, v_cnlm_maturity_date[i].arr);
									
								EXEC SQL
								SELECT TO_DATE(:temp_maturity_date, 'DD-MON-YYYY') - MAX(DUE_DATE)
								INTO :days_before_maturity_date
								FROM WORK_CONV_PART_LOAN_ASSESS
								WHERE cvpa_id = :temp_cvpa_id
								  AND PRIOR_LOAN_ID = :temp_prior_loan_id;
								  
								rc =  ODB_chk_norow_rc(NOEXIT,"ERROR - selecting early payoff");
								
								if (!rc)
									{
									if (strcmp((char*)v_cnlm_repay_freq[i].arr, "W") == 0)
										days_between_payments = 7;
									else if (strcmp((char*)v_cnlm_repay_freq[i].arr, "BW") == 0)
										days_between_payments = 14;
									else if (strcmp((char*)v_cnlm_repay_freq[i].arr, "SM") == 0)
										days_between_payments = 15;
									else if (strcmp((char*)v_cnlm_repay_freq[i].arr, "M") == 0)
										days_between_payments = 30;
									else if (strcmp((char*)v_cnlm_repay_freq[i].arr, "Q") == 0)
										days_between_payments = 91;
									else
										days_between_payments = 0;
										
									if (days_before_maturity_date > days_between_payments)
										{
										++err_warn_count;
										
										fprintf(amm_err_file_ptr, "WARNING: Loan pays off early for \n");
										fprintf(amm_err_file_ptr, "         ssn: %s   prior loan id %s\n\n", 
																					(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);	
										}
									}
								else
									{
									rc = SQL_ERROR;

    								sprintf(msgbuf,"ERROR -  Could not calculate early payoff. e code: %d", sqlca.sqlcode);

    								dbg_print_lvl(1,"%s",msgbuf);

									++err_warn_count;
									
									fprintf(amm_err_file_ptr, "ERROR: Could not determine early payoff for \n");
									fprintf(amm_err_file_ptr, "       ssn %s  prior loan id %s\n\n", 
								      		(char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);
									}	  

								}  /* else repayment_amount != 0 */
							} /* if (!rc) */
						else
							{
							rc = SQL_ERROR;

    						sprintf(msgbuf,"ERROR -  Could not select loan_type_code for grp_loan_struc. e code: %d", sqlca.sqlcode);

    						dbg_print_lvl(1,"%s",msgbuf);

							++err_warn_count;
							
							fprintf(amm_err_file_ptr, "ERROR: Could not determine loan type for \n");
							fprintf(amm_err_file_ptr, "       ssn %s  prior loan id %s\n\n", 
								      (char*)v_cnlm_ssn[i].arr, (char*)v_cnlm_prior_loan_id[i].arr);
							} 
						}  /* for loop */
						
					num_fetched = 0;
					
					} /* while (num_fetched > 0) */
				}  /* if (!rc) */
			else
				{
				rc = SQL_ERROR;

    			sprintf(msgbuf,"ERROR -  Could not retrieve amm cursor");

    			dbg_print_lvl(1,"%s",msgbuf);

				}
			} while((more_to_fetch)&&(!rc)); 
		}    /* if (!rc) */
	else
		{
		rc = SQL_ERROR;

    	sprintf(msgbuf,"ERROR -  Could not open amm cursor");

    	dbg_print_lvl(1,"%s",msgbuf);
		}

	fclose(amm_err_file_ptr);
	
dbg_print_lvl(1,"Committing work..."); /** added commit **/
   EXEC SQL COMMIT WORK;                  /** added commit **/


dbg_print("Command: %s", command);
	if (err_warn_count > 0)
		system(command);

	
	remove(amm_err_file_name);

	dbg_unindent();

	return(0);

/*
    fatal_error:

        (void)lams_sql_error();
        dbg_unindent();
        return(1);
*/

}	/* end of function cnlm_calc_amortization_sched()	*/


/*****************************************************************************************
   cnlm_calc_next_due_date()
******************************************************************************************/

int cnlm_calc_next_due_date(char* current_date, char* repay_freq, char* next_date)
{
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR  ar_current_date[12];
		VARCHAR	ar_next_date[12];
		VARCHAR  curr_day_of_month[3];
		VARCHAR  v_repay_freq[3];
		VARCHAR  prev_day_of_month[3];
	EXEC SQL END DECLARE SECTION;
	
	int   rc = 0;
	char msgbuf[MAX_BUF_LEN];

   dbg_indent("Entering cnlm_calc_next_due_date() function ....");

	dbg_print("Current date : %s", current_date);

	/* calculate next due date   */

   stov(prev_day_of_month,"");

   stov(ar_current_date, current_date);

	if (strcmp(repay_freq, "SM") == 0)
		{
		EXEC SQL SELECT substr(:ar_current_date,1,2)
                   INTO :curr_day_of_month
                   FROM DUAL;
						 
		rc =  ODB_chk_rc(NOEXIT,"ERROR - selecting curr day of month");
						
		if (!rc)
			{

			vtos(curr_day_of_month);

			if ((strcmp((char *) curr_day_of_month.arr, "14") == 0) || 
		   	 (strcmp((char *) curr_day_of_month.arr, "15") == 0))
				{
				EXEC SQL SELECT to_char(LAST_DAY(TO_DATE(:ar_current_date, 'DD-MON-YYYY')), 'DD-MON-YYYY')
                                 	  INTO :ar_next_date
                                 	  FROM DUAL;
												  
				rc =  ODB_chk_rc(NOEXIT,"ERROR - selecting curr day of month");
						
				if (!rc)
					stov(prev_day_of_month, curr_day_of_month.arr);
				else
					{
					rc = SQL_ERROR;

    				sprintf(msgbuf,"ERROR -  %d occurred while selecting next due date",sqlca.sqlcode);

    				dbg_print_lvl(1,"%s",msgbuf);

    				return(rc);
					}
				}
			else if ((strcmp((char *) curr_day_of_month.arr, "01") == 0) || 
				 (strcmp((char *) curr_day_of_month.arr, "02") == 0) ||
				 (strcmp((char *) curr_day_of_month.arr, "03") == 0) || 
				 (strcmp((char *) curr_day_of_month.arr, "04") == 0) ||
				 (strcmp((char *) curr_day_of_month.arr, "05") == 0) || 
				 (strcmp((char *) curr_day_of_month.arr, "06") == 0) ||
				 (strcmp((char *) curr_day_of_month.arr, "07") == 0) || 
				 (strcmp((char *) curr_day_of_month.arr, "08") == 0) ||
				 (strcmp((char *) curr_day_of_month.arr, "09") == 0) || 
				 (strcmp((char *) curr_day_of_month.arr, "10") == 0) ||
				 (strcmp((char *) curr_day_of_month.arr, "11") == 0) || 
				 (strcmp((char *) curr_day_of_month.arr, "12") == 0) || 
				 (strcmp((char *) curr_day_of_month.arr, "13") == 0))
				{
				EXEC SQL SELECT TO_CHAR(TO_DATE(:ar_current_date, 'DD-MON-YYYY') + 15, 'DD-MON-YYYY')
		      		   	INTO :ar_next_date
				   	FROM DUAL;
						
				rc =  ODB_chk_rc(NOEXIT,"ERROR - selecting curr day plus 15 of month");
				
				if (!rc)
					stov(prev_day_of_month, curr_day_of_month.arr);
				else
					{
					rc = SQL_ERROR;

    				sprintf(msgbuf,"ERROR -  %d occurred while selecting curr day plus 15",sqlca.sqlcode);

    				dbg_print_lvl(1,"%s",msgbuf);

    				return(rc);
					}
				}
			else if ((strcmp((char *) curr_day_of_month.arr, "28") == 0) ||
				 (strcmp((char *) curr_day_of_month.arr, "29") == 0) ||
				 (strcmp((char *) curr_day_of_month.arr, "30") == 0) ||
				 (strcmp((char *) curr_day_of_month.arr, "31") == 0))
				{
				if (strcmp((char *) prev_day_of_month.arr, "") == 0) 
					stov(prev_day_of_month, "15");

				EXEC SQL SELECT :prev_day_of_month || '-' || TO_CHAR(ADD_MONTHS(TO_DATE(:ar_current_date, 'DD-MON-YYYY'),1), 'MON-YYYY')
                  	INTO :ar_next_date
                  	FROM DUAL;
							
				rc =  ODB_chk_rc(NOEXIT,"ERROR - selecting prev day of month");
				
				if (rc)
					{
					rc = SQL_ERROR;

    				sprintf(msgbuf,"ERROR -  %d occurred while selecting prev day of month",sqlca.sqlcode);

    				dbg_print_lvl(1,"%s",msgbuf);

    				return(rc);
					}
				}
			else
				{
				EXEC SQL SELECT substr(to_date(:ar_current_date, 'DD-MON-YYYY') - 15,1,2)
				   	INTO :prev_day_of_month
				   	FROM DUAL;
						
				rc =  ODB_chk_rc(NOEXIT,"ERROR - selecting date minus 15");
				
				if (rc)
					{
					rc = SQL_ERROR;

    				sprintf(msgbuf,"ERROR -  %d occurred while selecting date minus 15",sqlca.sqlcode);

    				dbg_print_lvl(1,"%s",msgbuf);

    				return(rc);
					}

				vtos(prev_day_of_month);

				EXEC SQL SELECT :prev_day_of_month || '-' || TO_CHAR(ADD_MONTHS(TO_DATE(:ar_current_date, 'DD-MON-YYYY'),1), 'MON-YYYY')
				   	INTO :ar_next_date
				   	FROM DUAL;
						
				rc =  ODB_chk_rc(NOEXIT,"ERROR - selecting another date");
				
				if (rc)
					{
					rc = SQL_ERROR;

    				sprintf(msgbuf,"ERROR -  %d occurred while selecting another date",sqlca.sqlcode);

    				dbg_print_lvl(1,"%s",msgbuf);

    				return(rc);
					}
				}
			}
		else
			{
			rc = SQL_ERROR;

    		sprintf(msgbuf,"ERROR -  %d occurred while selecting curr day of month",sqlca.sqlcode);

    		dbg_print_lvl(1,"%s",msgbuf);

    		return(rc);	
			}
		}
	else if (strcmp(repay_freq, "W") == 0 ||
		 strcmp(repay_freq, "BW") == 0 ||
		 strcmp(repay_freq, "M") == 0 ||
		 strcmp(repay_freq, "Q") == 0)
		{
		stov(v_repay_freq, repay_freq);

		EXEC SQL SELECT DECODE(:v_repay_freq,
					'W',to_char(to_date(:ar_current_date, 'DD-MON-YYYY') + 7, 'DD-MON-YYYY'),
					'BW', to_char(to_date(:ar_current_date, 'DD-MON-YYYY') + 14, 'DD-MON-YYYY'),
					'Q', to_char(ADD_MONTHS(to_date(:ar_current_date, 'DD-MON-YYYY'),3), 'DD-MON-YYYY'),
					'M', to_char(ADD_MONTHS(to_date(:ar_current_date, 'DD-MON-YYYY'),1), 'DD-MON-YYYY'))
			   INTO :ar_next_date
			   FROM DUAL;

		rc =  ODB_chk_rc(NOEXIT,"ERROR - selecting ar_next_date");		

		if (rc)
			{
			rc = SQL_ERROR;

    		sprintf(msgbuf,"ERROR -  %d occurred while selecting ar_next_date",sqlca.sqlcode);

    		dbg_print_lvl(1,"%s",msgbuf);

    		return(rc);
			}		

		}
	else
		{
	   dbg_print("Invalid Repayment Frequency Code : %s\n", repay_freq);
      return (1);
		}
			
	vtos(ar_next_date);

	strcpy(next_date, (char *) ar_next_date.arr);

	dbg_print("Next Due Date : %s", next_date);

	dbg_unindent();

   return(0);


}  /* end of function cnlm_calc_next_due_date() */



/**********************************************************************
 * Function    :   cnlm_insert_assessments
 *
 * Parameters  :   cnlm_info, loan_acct_info
 *
 * Called by   :   cnlm_process_assessments()
 *
 * Calls       :   cnlm_handle_error (errors)
 *
 * Returns     :   rc  - Success (0) or Failure (anything else)
 *
 * Description :
 *
 * Assumptions :   dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_insert_assessments(CNLM_INFO *lcinfo_ptr,
                            LOAN_IND_INFO *liinfo_ptr,
                            LOAN_ACCT_INFO *lainfo_ptr,
                            LOAN_ASSESS_INFO *lsinfo_ptr)
{
  char msgbuf[MAX_BUF_LEN];
  int  rc = 0;
  
  EXEC SQL BEGIN DECLARE SECTION;
   long    cnlm_inlnag_seqnbr = 0;
   VARCHAR v_cnlm_ga_id[14];
   long    cnlm_ind_id = 0;
   VARCHAR v_cnlm_due_date[12];
   double  cnlm_principal_amt = 0;
   double  cnlm_int_amt = 0;
  EXEC SQL END DECLARE SECTION;

  msgbuf[0] = '\0';
  stov(v_cnlm_ga_id,"");
  stov(v_cnlm_due_date,"");

  if(strcmp(lcinfo_ptr->use_prior_id, "Y") == 0)
     cnlm_inlnag_seqnbr = strtol(lainfo_ptr->prev_loan_id,NULL,10);
  else
     cnlm_inlnag_seqnbr = lainfo_ptr->inlnag_seqnbr;
  stov(v_cnlm_ga_id,lcinfo_ptr->ga_id);
  cnlm_ind_id = liinfo_ptr->ind_id;
  stov(v_cnlm_due_date,lsinfo_ptr->due_date);
  cnlm_principal_amt = lsinfo_ptr->principal_amt;
  cnlm_int_amt  = lsinfo_ptr->int_amt;
  

  dbg_print_lvl(1,"Entering cnlm_insert_assessments");
  dbg_print_lvl(1,"--------------------------------");
  dbg_print_lvl(2,"Inserting into loan_assess with...");
  dbg_print_lvl(2," INLNAG_SEQNBR.............:%d",cnlm_inlnag_seqnbr);
  dbg_print_lvl(2," GA_ID.....................:%s",v_cnlm_ga_id.arr);
  dbg_print_lvl(2," IND_ID....................:%d",cnlm_ind_id);
  dbg_print_lvl(2," DUE_DATE..................:%s",v_cnlm_due_date.arr);
  dbg_print_lvl(2," PRINCIPAL_AMT.............:%f",cnlm_principal_amt);
  dbg_print_lvl(2," INT_AMT...................:%f\n",cnlm_int_amt);
  

  EXEC SQL
  INSERT INTO loan_assess(inlnag_seqnbr,
                          ga_id,
                          ind_id,
                          due_date,
                          principal_amt,
                          int_amt,
                          status_code)
                  VALUES (:cnlm_inlnag_seqnbr,
                          :v_cnlm_ga_id,
                          :cnlm_ind_id,
                          to_date(:v_cnlm_due_date,'DD-MON-YYYY'),
                          :cnlm_principal_amt,
                          :cnlm_int_amt,
                          'UNPAID');

  rc = ODB_chk_norow_rc(NOEXIT,"ERROR - inserting into loan_assess");

  if(!rc)
  {
    dbg_print_lvl(1,"Insert into loan_assess successful!!\n");
  }
  else
  {
    rc = SQL_ERROR;
	 
	 fprintf(err_file_ptr, "ERROR - Could not create part of amm schedule for \n");
	 fprintf(err_file_ptr, "        ssn %s Orig Loan ID %s\n", 
	       liinfo_ptr->ssn, lainfo_ptr->prev_loan_id);
	 fprintf(err_file_ptr, "        payment date is %s\n", (char*)v_cnlm_due_date.arr);
	 fprintf(err_file_ptr, "        SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
	 fprintf(err_file_ptr, "        Contact Systems for help.\n\n");
	
    sprintf(msgbuf,"ERROR - %d error occurred while inserting into loan_assess"
                  ,sqlca.sqlcode);

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0135",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  } 

  dbg_print_lvl(1,"Leaving cnlm_insert_assessments, rc=%d\n", rc);

  return(rc);
}


/**********************************************************************
 * Function    :   cnlm_validate_assessments
 *
 * Parameters  :   cnlm_info, loan_acct_info
 *
 * Called by   :   cnlm_process_assessments()
 *
 * Calls       :   cnlm_handle_error (errors)
 *
 * Returns     :   rc  - Success (0) or Failure (anything else)
 *
 * Description :
 *
 * Assumptions :   dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_validate_assessments(CNLM_INFO *lcinfo_ptr,
                              LOAN_IND_INFO *liinfo_ptr,
                              LOAN_ACCT_INFO *lainfo_ptr)
{
  char msgbuf[MAX_BUF_LEN];
  int  rc = 0;
  int  i = 0;
  int  num_fetched = 0;
  int  total_num_fetched = 0;

  EXEC SQL BEGIN DECLARE SECTION;
   long    cnlm_inlnag_seqnbr = 0;
   VARCHAR v_cnlm_ga_id[14];
   long    cnlm_ind_id = 0;
   double  cnlm_principal_amt = 0;
   short   cnlm_principal_amt_ind = -1;
   double  cnlm_repay_amt = 0;
   double  cnlm_loan_amt = 0;
   double  cnlm_chk_balloon = 0;
   short   cnlm_chk_balloon_ind = -1;
  EXEC SQL END DECLARE SECTION;

  msgbuf[0] = '\0';
  stov(v_cnlm_ga_id,"");

  if(strcmp(lcinfo_ptr->use_prior_id, "Y") == 0)
     cnlm_inlnag_seqnbr = strtol(lainfo_ptr->prev_loan_id,NULL,10);
  else
     cnlm_inlnag_seqnbr = lainfo_ptr->inlnag_seqnbr;
  stov(v_cnlm_ga_id,lcinfo_ptr->ga_id);
  cnlm_ind_id = liinfo_ptr->ind_id;
  cnlm_repay_amt = lainfo_ptr->repay_amt;
  cnlm_loan_amt = lainfo_ptr->loan_amt;

  dbg_print_lvl(1,"Entering cnlm_validate_assessments");
  dbg_print_lvl(1,"----------------------------------");
  dbg_print_lvl(2," GA_ID...............:%s",v_cnlm_ga_id.arr);
  dbg_print_lvl(2," IND_ID..............:%d",cnlm_ind_id);
  dbg_print_lvl(2," INLNAG_SEQNBR.......:%d\n",cnlm_inlnag_seqnbr);

  dbg_print_lvl(1,"Validating assessments...");
  dbg_print_lvl(2," LOAN_REPAY_AMT......:%f",cnlm_repay_amt);

  EXEC SQL 
  SELECT MAX(ls.principal_amt + ls.int_amt) - :cnlm_repay_amt  
  INTO :cnlm_chk_balloon:cnlm_chk_balloon_ind
  FROM  loan_assess ls
  WHERE ls.ga_id = :v_cnlm_ga_id
  AND   ls.ind_id = :cnlm_ind_id
  AND   ls.inlnag_seqnbr = :cnlm_inlnag_seqnbr;
   
  rc = ODB_chk_rc(NOEXIT,"ERROR - Checking for a balloon payment");

  if(!rc)
  {
    if(cnlm_chk_balloon_ind == -1)
    {
      cnlm_chk_balloon = 0;
    }

    dbg_print_lvl(2," BALLOON_DIFF........:%f\n",cnlm_chk_balloon);

    if(cnlm_chk_balloon > 5)
    {
	 
	   fprintf(err_file_ptr, "WARNING - Large balloon payment created for \n");
		fprintf(err_file_ptr, "          ssn %s Orig Loan ID %s\n", 
		              liinfo_ptr->ssn, lainfo_ptr->prev_loan_id);
		fprintf(err_file_ptr, "          repayment amount is %.2lf, but balloon payment is %.2lf\n\n", cnlm_repay_amt, 
		                      cnlm_repay_amt + cnlm_chk_balloon);
		
      sprintf(msgbuf,"A large balloon payment exists for ind_id %ld, inlnag_seqnbr %ld, and ga_id %s"
                    ,cnlm_ind_id,cnlm_inlnag_seqnbr, (char *) &v_cnlm_ga_id.arr[0]);
      dbg_print_lvl(1,"%s",msgbuf);

      cnlm_handle_error("W",
                        "9999",
                        "0140",
                        "0000",                                                                   
                        msgbuf,
                        lcinfo_ptr,
                        liinfo_ptr);
    }

    dbg_print_lvl(1,"Validating total loan_amt...");
    dbg_print_lvl(2," LOAN_AMT............:%f",cnlm_loan_amt);
    
    EXEC SQL
    SELECT nvl(sum(principal_amt),0)
    INTO   :cnlm_principal_amt:cnlm_principal_amt_ind
    FROM  loan_assess
    WHERE ga_id = :v_cnlm_ga_id
    AND   ind_id = :cnlm_ind_id
    AND   inlnag_seqnbr = :cnlm_inlnag_seqnbr;

    rc = ODB_chk_norow_rc(NOEXIT,"ERROR - Validating assessments"); 
  
    if(!rc)
    {

      if(cnlm_principal_amt_ind == -1)
      {
        cnlm_principal_amt = 0;
      }

      dbg_print_lvl(2," PRINCIPAL_AMT.......:%f\n",cnlm_principal_amt);
 
      if(round2(cnlm_principal_amt) != round2(cnlm_loan_amt))
      {
        rc = ASSESS_ERROR;
		  
		  fprintf(err_file_ptr, "ERROR - Loan amount does not match total principal\n");
		  fprintf(err_file_ptr, "        from the amm schedule for ssn %s Orig Loan ID %s\n\n", 
		          liinfo_ptr->ssn, lainfo_ptr->prev_loan_id);
		  
        sprintf(msgbuf,"ERROR - Total principal amount of the assessments differs from the loan_amt");

        dbg_print_lvl(1,"%s",msgbuf);

        cnlm_handle_error("E",
                          "9999",
                          "0145",
                          "0000",
                          msgbuf,
                          lcinfo_ptr,
                          liinfo_ptr);                                                            
        return(rc);
      }
    }
    else
    {
      rc = AMT_ERROR;

      sprintf(msgbuf,"ERROR - %d error occurred while checking the loan_amt"
                  ,sqlca.sqlcode);

      dbg_print_lvl(1,"%s",msgbuf);

      cnlm_handle_error("E",
                        "9999",
                        "0150",
                        "0000",
                        msgbuf,
                        lcinfo_ptr,
                        liinfo_ptr);
      return(rc);
    }
  }
  else
  {
    rc = BALLOON_ERROR;

    sprintf(msgbuf,"ERROR - %d error occurred while checking for a balloon payment"
                  ,sqlca.sqlcode);

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0155",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  }
   
  dbg_print_lvl(1,"Leaving cnlm_validate_assessments, rc=%d\n", rc);

  return(rc);
}


/**********************************************************************
 * Function    :   cnlm_create_snapshots
 *
 * Parameters  :   cnlm_info, loan_acct_info
 *
 * Called by   :   cnlm_process_conv_info()
 *
 * Calls       :   SNCR
 *                 cnlm_handle_error (errors)
 *
 * Returns     :   rc  - Success (0) or Failure (anything else)
 *
 * Description :
 *
 * Assumptions :   dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_create_snapshots(CNLM_INFO *lcinfo_ptr,
                          LOAN_IND_INFO *liinfo_ptr,
                          LOAN_ACCT_INFO *lainfo_ptr)
{
  char msgbuf[MAX_BUF_LEN];
  int  rc = 0;
  double cnlm_plan_yr_end_prin_bal = 0;
  long   cnlm_inlnag_seqnbr = 0;
  char   cnlm_ga_id[14];
  long   cnlm_ind_id = 0;
  char   cnlm_effdate[13];
  long   cnlm_ev_id = 0; 

  msgbuf[0] = '\0';
  cnlm_ga_id[0] = '\0';
  cnlm_effdate[0] = '\0';
  
  cnlm_plan_yr_end_prin_bal = lainfo_ptr->plan_yr_end_prin_bal;
  strcpy(cnlm_ga_id,lcinfo_ptr->ga_id);
  cnlm_ind_id = liinfo_ptr->ind_id;
  if(strcmp(lcinfo_ptr->use_prior_id, "Y") == 0)
     cnlm_inlnag_seqnbr = strtol(lainfo_ptr->prev_loan_id,NULL,10);
  else
     cnlm_inlnag_seqnbr = lainfo_ptr->inlnag_seqnbr;
  strcpy(cnlm_effdate,lcinfo_ptr->effdate);
  cnlm_ev_id = liinfo_ptr->ev_id; 

  dbg_print_lvl(1,"Entering cnlm_create_snapshots");
  dbg_print_lvl(1,"------------------------------");
  dbg_print_lvl(1,"Checking the plan_yr_end balances");
  dbg_print_lvl(2," PLAN_YR_END_PRIN_BAL.........:%f",cnlm_plan_yr_end_prin_bal);
  
  if(cnlm_plan_yr_end_prin_bal > 0)
  {
    dbg_print_lvl(1,"Calling SNCR to create the BEG snapshot with...");
    dbg_print_lvl(2," GA_ID...............:%s",cnlm_ga_id);
    dbg_print_lvl(2," IND_ID..............:%d",cnlm_ind_id);
    dbg_print_lvl(2," INLNAG_SEQNBR.......:%d",cnlm_inlnag_seqnbr);
    dbg_print_lvl(2," EV_ID...............:%d",cnlm_ev_id);
    dbg_print_lvl(2," EFFDATE.............:%s",cnlm_effdate);
    dbg_print_lvl(2," PLAN_YR_END_PRIN_BAL:%f\n",cnlm_plan_yr_end_prin_bal);

#ifdef COMMENT
extern int SNCR(char *SNCR_GA_ID, long SNCR_IND_ID, long SNCR_INLNAG_SEQNBR,
         long SNCR_EV_ID, long SNCR_STEP_SEQNBR, char *SNCR_EFFDATE, 
	 char *SNCR_FAT_CODE,
         double SNCR_AMOUNT,  /* Arg#: 8 */
	 char *SNCR_SNAP_TYPE, 
	 char *SNCR_CALLING_MOD,
         char *SNCR_SDMT_CODE, 
	 long SNCR_GDMT_SEQNBR,  /* Arg#: 12 */
	 char *SNCR_TXAE_CODE,
         char *SNCR_LAST_CASH_UPD_DATE, 
	 char *SNCR_DSTCAC_DSDB_SEQNBR, /* Arg#: 15 */
         long  SNCR_TXCUIF_SEQNBR, 
	 long SNCR_DSBA_ID, 
	 long SNCR_INRM_SEQNBR,
         long SNCR_RMNC_ID, 
	 long SNCR_TFDA_SEQNBR, 
	 long SNCR_TFBA_ID, 
	 long SNCR_LBTY_CODE);	/* Arg#: 22 */
#endif

    rc = SNCR(cnlm_ga_id,
              cnlm_ind_id, 
              cnlm_inlnag_seqnbr, 
              cnlm_ev_id, 
              1, 
              cnlm_effdate, 
              "BEG", 
              cnlm_plan_yr_end_prin_bal, 
              "OUTLOANBAL", 
              "CNLM", 
              "",
0L,	/* Arg#: 12 */
"",	/* Arg#: 13 */
"",	/* Arg#: 14 */
"",	/* Arg#: 15 */
0L,	/* Arg#: 16 */
0L,	/* Arg#: 17 */
0L,	/* Arg#: 18 */
0L,	/* Arg#: 19 */
0L,	/* Arg#: 20 */
0L,	/* Arg#: 21 */
0L	/* Arg#: 22 */
);

    if(!rc)
    { 
      dbg_print_lvl(1,"Snapshot creation successful!!");
    }
    else
    {
      rc = SNCR_ERROR;
		
		fprintf(err_file_ptr, "ERROR - Could not create outstanding loan balance snapshot\n"); 
		fprintf(err_file_ptr, "        for ssn %s Orig Loan ID %s\n", liinfo_ptr->ssn, lainfo_ptr->prev_loan_id);
		fprintf(err_file_ptr, "        Contact Systems for help.\n\n");
		
      sprintf(msgbuf,"ERROR - Occurred  while calling SNCR to build the plan_yr_end_prin_bal OUTLOANBAL snapshot");

      dbg_print_lvl(1,"%s",msgbuf);

      cnlm_handle_error("E",
                        "9999",
                        "0160",
                        "0000",
                        msgbuf,
                        lcinfo_ptr,
                        liinfo_ptr);
      return(rc);
    }
  } 
  

  dbg_print_lvl(1,"Leaving cnlm_create_snapshots, rc=%d\n", rc);

  return(rc);
}


/**********************************************************************
 * Function    :   cnlm_process_mnty_splt
 *
 * Parameters  :   cnlm_info, loan_acct_info
 *
 * Called by   :   cnlm_process_conv_info()
 *
 * Calls       :   cnlm_handle_error (errors)
 *
 * Returns     :   rc  - Success (0) or Failure (anything else)
 *
 * Description :
 *
 * Assumptions :   dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_process_mnty_splt(CNLM_INFO *lcinfo_ptr,
                          LOAN_IND_INFO *liinfo_ptr,
                          LOAN_ACCT_INFO *lainfo_ptr)
	{
	char msgbuf[MAX_BUF_LEN];
	int  rc = 0;
	int  i = 0;
	int  num_fetched = 0;
	int  total_num_fetched = 0;
	int  more_to_fetch = TRUE;
	char c_cnlm_sdmt_code[4];

	EXEC SQL BEGIN DECLARE SECTION;
		long    cnlm_inlnag_seqnbr = 0;
		VARCHAR v_cnlm_ga_id[12];
		long    cnlm_ind_id = 0;
		long    cnlm_master_ev_id = 0;
		VARCHAR v_cnlm_effdate[12];
		long    v_cnlm_cvpa_id;
		VARCHAR v_cnlm_prev_loan_id[20];
		double  cnlm_total_mnty_amt = 0;
		double  cnlm_orig_loan_amt = 0; 
		double  cnlm_split_percent = 0;
		double  l_cnlm_principal_amt = 0;
		short   l_cnlm_principal_amt_ind = 0;
		double  cnlm_total_mnty_principal_amt = 0;
		double  cnlm_total_split_percent = 0;
		double  cnlm_amount[MAX_ROWS];
		short   cnlm_amount_ind[MAX_ROWS];
		double  cnlm_principal_amt[MAX_ROWS];
		short	  cnlm_principal_amt_ind[MAX_ROWS];
		double  l_cnlm_amount = 0; 
		short   l_cnlm_amount_ind = 0;
		VARCHAR v_cnlm_sdmt_code[MAX_ROWS][3];
		short   v_cnlm_sdmt_code_ind[MAX_ROWS];
		VARCHAR l_v_cnlm_sdmt_code[3];
		long    cnlm_gdmt_seqnbr[MAX_ROWS];
		short   cnlm_gdmt_seqnbr_ind[MAX_ROWS];
		long    l_cnlm_gdmt_seqnbr = 0;
		double  cnlm_percent[MAX_ROWS];
		short   cnlm_percent_ind[MAX_ROWS]; 
		double  cnlm_chk_percent = 0;
		short   cnlm_chk_percent_ind = -1;
	EXEC SQL END DECLARE SECTION;

	msgbuf[0] = '\0';
	c_cnlm_sdmt_code[0] = '\0';
	stov(v_cnlm_ga_id,"");
	stov(v_cnlm_prev_loan_id,"");
	stov(l_v_cnlm_sdmt_code,"");
	stov(v_cnlm_effdate,"");

        if(strcmp(lcinfo_ptr->use_prior_id, "Y") == 0)
           cnlm_inlnag_seqnbr = strtol(lainfo_ptr->prev_loan_id,NULL,10);
        else
           cnlm_inlnag_seqnbr = lainfo_ptr->inlnag_seqnbr;
	stov(v_cnlm_ga_id,lcinfo_ptr->ga_id);
	cnlm_ind_id = liinfo_ptr->ind_id;
	v_cnlm_cvpa_id = liinfo_ptr->cvpa_id;
	stov(v_cnlm_effdate,lcinfo_ptr->effdate);
	stov(v_cnlm_prev_loan_id,lainfo_ptr->prev_loan_id);
	cnlm_orig_loan_amt = lainfo_ptr->orig_loan_amt;
	cnlm_master_ev_id = lcinfo_ptr->master_ev_id;

	dbg_print_lvl(1,"Entering cnlm_process_mnty_splt");
	dbg_print_lvl(1,"-------------------------------");
	dbg_print_lvl(1,"Selecting the loan_mnty percents");
	dbg_print_lvl(2," GA_ID..............:%s",v_cnlm_ga_id.arr);
	dbg_print_lvl(2," cvpa_id................:%ld",v_cnlm_cvpa_id);
	dbg_print_lvl(2," prev_loan_id......:%s",v_cnlm_prev_loan_id.arr);
	dbg_print_lvl(2," MASTER_EV_ID.......:%d",cnlm_master_ev_id);

	EXEC SQL 
	SELECT nvl(sum(split_percent),0)
	INTO :cnlm_chk_percent:cnlm_chk_percent_ind
	FROM  work_conv_part_loan_mnty_splt splt
	WHERE cvpa_id = :v_cnlm_cvpa_id
	AND   prior_loan_id = :v_cnlm_prev_loan_id;

	rc = ODB_chk_norow_rc(NOEXIT,"ERROR - Selecting the total money_type percent"); 

	if(!rc)
		{
		dbg_print_lvl(2," SPLIT_PERCENT_CHK..:%f\n",cnlm_chk_percent);

		if(cnlm_chk_percent == 0)
			{
			dbg_print_lvl(1,"Validating the total mnty amount");

			EXEC SQL
			SELECT nvl(sum(mnty_principal_amt),0)
			INTO :cnlm_total_mnty_principal_amt
			FROM  work_conv_part_loan_mnty_splt splt
			WHERE cvpa_id = :v_cnlm_cvpa_id
			AND   prior_loan_id = :v_cnlm_prev_loan_id;

			rc = ODB_chk_norow_rc(NOEXIT,"ERROR - Selecting the total money_type principal amount");

			if(!rc)
				{
				dbg_print_lvl(2," ORIG_LOAN_AMT.........:%f",cnlm_orig_loan_amt);
				dbg_print_lvl(2," MNTY_PRINCIPAL_AMT....:%f\n",cnlm_total_mnty_principal_amt);

				if (cnlm_total_mnty_principal_amt == 0)
					{
					dbg_print_lvl(1,"Validating the split amount");

					EXEC SQL
					SELECT nvl(sum(split_amt),0)
					INTO :cnlm_total_mnty_amt
					FROM  work_conv_part_loan_mnty_splt splt
					WHERE cvpa_id = :v_cnlm_cvpa_id
					AND   prior_loan_id = :v_cnlm_prev_loan_id; 

					rc = ODB_chk_norow_rc(NOEXIT,"ERROR - Selecting the total split amount");

					if (!rc)
						{
						if (cnlm_total_mnty_amt == 0)
							{
							rc = MNTY_ERROR;
							
							fprintf(err_file_ptr, "ERROR - No money type split info was found for \n");
							fprintf(err_file_ptr, "        ssn %s Orig Loan ID %s\n\n", 
							      liinfo_ptr->ssn, lainfo_ptr->prev_loan_id);
							
							sprintf(msgbuf,"ERROR - No money type split data loaded for ppt");

							dbg_print_lvl(1,"%s",msgbuf);

							cnlm_handle_error("E",
								"9999",
								"0175",
								"0000",
								msgbuf,
								lcinfo_ptr,
								liinfo_ptr);
							return(rc);
							}
						}
						
					else
					
						{
						rc = AMT_ERROR;

						sprintf(msgbuf,"ERROR - %d Occurred while selecting the total split amount"
						,sqlca.sqlcode);

						dbg_print_lvl(1,"%s",msgbuf);

						cnlm_handle_error("E",
							"9999",
							"0180",
							"0000",
							msgbuf,
							lcinfo_ptr,
							liinfo_ptr);
						return(rc);
				
						}

					}
					
				else if(cnlm_total_mnty_principal_amt != cnlm_orig_loan_amt)
					{
					rc = MNTY_ERROR;
					
					fprintf(err_file_ptr, "ERROR - The total of the money type split amounts do not\n");
					fprintf(err_file_ptr, "        match the Orig Loan Amount for ssn %s Orig Loan ID %s\n\n", 
					                liinfo_ptr->ssn, lainfo_ptr->prev_loan_id);
					
					sprintf(msgbuf,"ERROR - Total mnty_amt does not match the orig_loan_amt");

					dbg_print_lvl(1,"%s",msgbuf);

					cnlm_handle_error("E",
						"9999",
						"0175",
						"0000",
						msgbuf,
						lcinfo_ptr,
						liinfo_ptr);
					return(rc);
					}
				}
			else
				{
				rc = AMT_ERROR;

				sprintf(msgbuf,"ERROR - %d Occurred while selecting the total money_type amount"
				,sqlca.sqlcode);

				dbg_print_lvl(1,"%s",msgbuf);

				cnlm_handle_error("E",
					"9999",
					"0180",
					"0000",
					msgbuf,
					lcinfo_ptr,
					liinfo_ptr);
				return(rc);
				}
			}    /* if(cnlm_chk_percent == 0) */
			
		else
			{
			dbg_print_lvl(1,"Using the provided split percents");
			}

		EXEC SQL DECLARE cnlm_get_mnty_info_cur CURSOR FOR
		SELECT sum(nvl(ls.split_percent,0)),
		       sum(nvl(ls.split_amt,0)),
		       sum(nvl(ls.mnty_principal_amt,0)),
		       mt.sdmt_code,
		       mt.gdmt_seqnbr
		FROM  work_conv_money_type mt,
		work_conv_part_loan_mnty_splt ls
		WHERE mt.prior_mnty_code = ls.prior_mnty_code
		AND   mt.ev_id = :cnlm_master_ev_id
		AND   ls.cvpa_id = :v_cnlm_cvpa_id
		AND   ls.prior_loan_id = :v_cnlm_prev_loan_id
                GROUP BY  mt.sdmt_code,mt.gdmt_seqnbr;

		EXEC SQL OPEN cnlm_get_mnty_info_cur;

		rc = ODB_chk_norow_rc(NOEXIT,"ERROR - Openning the cnlm_get_mnty_info_cur");

		dbg_print_lvl(1,"Selecting the total mnty amount with...");

		if(!rc)
			{
			do
				{
				for (i = 0; i < MAX_ROWS; i++)
					{
					cnlm_percent[i] = 0;
					cnlm_percent_ind[i] = -1;
					cnlm_amount[i] = 0;
					cnlm_amount_ind[i] = 1;
					cnlm_principal_amt[i] = 0;
					cnlm_principal_amt_ind[i] = -1;
					stov(v_cnlm_sdmt_code[i],"");
					v_cnlm_sdmt_code_ind[i] = -1;
					cnlm_gdmt_seqnbr[i] = 0;
					cnlm_gdmt_seqnbr_ind[i] = -1;
					}

				EXEC SQL FETCH cnlm_get_mnty_info_cur
				INTO  :cnlm_percent:cnlm_percent_ind,
				:cnlm_amount:cnlm_amount_ind,
				:cnlm_principal_amt:cnlm_principal_amt_ind,
				:v_cnlm_sdmt_code:v_cnlm_sdmt_code_ind,
				:cnlm_gdmt_seqnbr:cnlm_gdmt_seqnbr_ind;

				rc = ODB_chk_rc(NOEXIT,"ERROR - Fetching the cnlm_get_mnty_info_cur");

				if(!rc)
					{
					num_fetched = sqlca.sqlerrd[2] - total_num_fetched;
					total_num_fetched = sqlca.sqlerrd[2];

					if(sqlca.sqlcode == ORA_NOROW)
						{
						more_to_fetch = FALSE;
						}

					dbg_print_lvl(1,"Num_fetched %d",num_fetched);

					while((num_fetched > 0)&&(!rc))
						{
						for(i = 0; i < num_fetched; i++)
							{
							if(cnlm_percent_ind[i] == -1)
								{
								cnlm_percent[i] = 0;
								}

							if(cnlm_amount_ind[i] == -1)
								{
								cnlm_amount[i] = 0;
								}
								
							if (cnlm_principal_amt_ind[i] == -1)
								{
								cnlm_principal_amt[i] = 0;
								}

							if(v_cnlm_sdmt_code_ind[i] == -1)
								{
								stov(v_cnlm_sdmt_code[i],"");
								}
							else
								{
								vtos(v_cnlm_sdmt_code[i]);
								}

							if(cnlm_gdmt_seqnbr_ind[i] == -1)
								{
								cnlm_gdmt_seqnbr[i] = 0;
								}

							dbg_print_lvl(2,"Money_type information fetched...");
							dbg_print_lvl(2," SDMT_CODE..kwai........:%s",v_cnlm_sdmt_code[i].arr);
							dbg_print_lvl(2," GDMT_SEQNBR............:%d",cnlm_gdmt_seqnbr[i]);
							dbg_print_lvl(2," PERCENT................:%f",cnlm_percent[i]);
							dbg_print_lvl(2," AMOUNT.................:%f",cnlm_amount[i]);
							dbg_print_lvl(2," PRINCIPAL AMOUNT.......:%f",cnlm_principal_amt[i]);

							if(cnlm_chk_percent == 100)
								{
dbg_print_lvl(2," 1 ");
								cnlm_split_percent = round6(cnlm_percent[i]);
								l_cnlm_amount_ind = -1;
								}
							else if (cnlm_total_mnty_principal_amt > 0)
								{
								if(i == (num_fetched -1))
									{
dbg_print_lvl(2," 2 ");
									cnlm_split_percent = round6((100.00 - cnlm_total_split_percent));
									l_cnlm_principal_amt = cnlm_principal_amt[i];
									l_cnlm_principal_amt_ind = 0;
									}
								else
									{
dbg_print_lvl(2," 3 ");
									cnlm_split_percent = round6((cnlm_principal_amt[i] / cnlm_orig_loan_amt) * 100.00);
									cnlm_total_split_percent += cnlm_split_percent;
									l_cnlm_principal_amt = cnlm_principal_amt[i];
									l_cnlm_principal_amt_ind = 0;

									dbg_print_lvl(2," RUNNING_SPLIT_PERECENT.:%f",cnlm_total_split_percent);
									}
								}
                                                        else if (cnlm_total_mnty_principal_amt == 0)
                                                                {
                                                                rc = LOAN_MNTY_SPLT_ERROR;

                                                                fprintf(err_file_ptr, "ERROR - Total loan mnty splt ne 100 for \n"); 
                                                                fprintf(err_file_ptr, "        ssn %s Orig Loan ID %s\n\n",
                                                                              liinfo_ptr->ssn, lainfo_ptr->prev_loan_id);

                                                                sprintf(msgbuf,"ERROR - Total loan mnty splt ne 100");

                                                                dbg_print_lvl(1,"%s",msgbuf);

                                                                cnlm_handle_error("E",
                                                                        "9999",
                                                                        "0183",
                                                                        "0000",
                                                                        msgbuf,
                                                                        lcinfo_ptr,
                                                                        liinfo_ptr);
                                                                return(rc);
                                                                }

                                                        if(!rc)
                                                        {
							sprintf(c_cnlm_sdmt_code,"%s",v_cnlm_sdmt_code[i].arr);
							stov(l_v_cnlm_sdmt_code,c_cnlm_sdmt_code);
							l_cnlm_gdmt_seqnbr = cnlm_gdmt_seqnbr[i];

							dbg_print_lvl(1,"\nInserting into loan_mnty_splt...");
							dbg_print_lvl(2," GDMT_SEQNBR............:%d",l_cnlm_gdmt_seqnbr);
							dbg_print_lvl(2," GA_ID..................:%s",v_cnlm_ga_id.arr);
							dbg_print_lvl(2," SDMT_CODE..............:%s",l_v_cnlm_sdmt_code.arr);
							dbg_print_lvl(2," INLNAG_SEQNBR..........:%d",cnlm_inlnag_seqnbr);
							dbg_print_lvl(2," IND_ID.................:%d",cnlm_ind_id);
							dbg_print_lvl(2," EFFDATE................:%s",v_cnlm_effdate.arr);
							dbg_print_lvl(2," MNTY_PRINCIPAL_AMT.....:%f",l_cnlm_principal_amt);
							dbg_print_lvl(2," SPLIT_PERCENT..........:%f",cnlm_split_percent);
							dbg_print_lvl(2," SPLIT_AMOUNT...........:%f\n", cnlm_amount);

							EXEC SQL
							INSERT INTO loan_mnty_splt(gdmt_seqnbr,
								ga_id,
								sdmt_code,
								inlnag_seqnbr,
								ind_id,
								effdate,
								mnty_principal_amt,
								split_percent,
								split_amt,
								tax_basis_ratio)
								VALUES(:l_cnlm_gdmt_seqnbr,
								:v_cnlm_ga_id,
								:l_v_cnlm_sdmt_code,
								:cnlm_inlnag_seqnbr,
								:cnlm_ind_id,
								to_date(:v_cnlm_effdate,'DD-MON-YYYY'),
								:l_cnlm_principal_amt,
								:cnlm_split_percent,
								:l_cnlm_amount,
								0);

							rc = ODB_chk_norow_rc(NOEXIT,"ERROR - Inserting into loan_mnty_splt");

							if(!rc)
								{
								dbg_print_lvl(1,"Insert into loan_mnty_splt successfull!!");
								}
							else
								{
								rc = SQL_ERROR;
								
								fprintf(err_file_ptr, "ERROR - Could not create money type split record for \n");
								fprintf(err_file_ptr, "        ssn %s Orig Loan ID %s\n", 
								              liinfo_ptr->ssn, lainfo_ptr->prev_loan_id);
								fprintf(err_file_ptr, "        SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
								fprintf(err_file_ptr, "        Contact Systems for help.\n\n");
								
								sprintf(msgbuf,"ERROR -  %d occurred while inserting into the loan mnty split"
								,sqlca.sqlcode);

								dbg_print_lvl(1,"%s",msgbuf);

								cnlm_handle_error("E",
									"9999",
									"0185",
									"0000",
									msgbuf,
									lcinfo_ptr,
									liinfo_ptr);
								return(rc);
								}
                                                        }
							}    /* for(i = 0; i < num_fetched; i++) */
							
						num_fetched = 0;
						
						}    /*  End of while(num_fetched > 0) */
						
					}    /* if(!rc) */
					
				else
					{
					rc = SQL_ERROR;

					sprintf(msgbuf,"ERROR -  %d occurred while fetching the cnlm_get_mnty_info_cur"
					,sqlca.sqlcode);

					dbg_print_lvl(1,"%s",msgbuf);

					cnlm_handle_error("E",
						"9999",
						"0190",
						"0000",
						msgbuf,
						lcinfo_ptr,
						liinfo_ptr);
					return(rc);
					}
				}     /* do */
				
			while((more_to_fetch)&&(!rc));
			
			}   /* if (!rc) */
			
		else
			{
			rc = SQL_ERROR;

			sprintf(msgbuf,"ERROR -  %d occurred while openning the cnlm_get_mnty_info_cur"
			,sqlca.sqlcode);

			dbg_print_lvl(1,"%s",msgbuf);

			cnlm_handle_error("E",
				"9999",
				"0200",
				"0000",
				msgbuf,
				lcinfo_ptr,
				liinfo_ptr);
			return(rc);
			}
			
		}    /* if(!rc) */
		
	else
		{
		rc = SQL_ERROR;

		sprintf(msgbuf,"ERROR - %d Occurred while selecting the total money_type percent"
		,sqlca.sqlcode);

		dbg_print_lvl(1,"%s",msgbuf);

		cnlm_handle_error("E",
			"9999",
			"0205",
			"0000",
			msgbuf,
			lcinfo_ptr,
			liinfo_ptr);
		return(rc);
		} 

	dbg_print_lvl(1,"Leaving cnlm_process_mnty_splt, rc=%d\n", rc);

	return(rc);
	}


/**********************************************************************
 * Function    :   cnlm_update_part_info
 *
 * Parameters  :   cnlm_info, loan_acct_info
 *
 * Called by   :   cnlm_process_conv_info()
 *
 * Calls       :   cnlm_handle_error (errors)
 *
 * Returns     :   rc  - Success (0) or Failure (anything else)
 *
 * Description :
 *
 * Assumptions :   dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_update_part_info(CNLM_INFO *lcinfo_ptr,LOAN_IND_INFO *liinfo_ptr,
				char* ar_sysdate)
{
  char msgbuf[MAX_BUF_LEN];
  int  rc = 0;

  EXEC SQL BEGIN DECLARE SECTION;
   VARCHAR v_cnlm_ga_id[14];
   long    cnlm_ind_id = 0;
   VARCHAR v_cnlm_ar_sysdate[75];
  EXEC SQL END DECLARE SECTION;

  msgbuf[0] = '\0';
  stov(v_cnlm_ga_id,"");
  stov(v_cnlm_ar_sysdate,"");

  stov(v_cnlm_ga_id,lcinfo_ptr->ga_id);
  cnlm_ind_id = liinfo_ptr->ind_id;
  stov(v_cnlm_ar_sysdate,ar_sysdate);

  dbg_print_lvl(1,"Entering cnlm_update_part_info");
  dbg_print_lvl(1,"------------------------------");
  dbg_print_lvl(1,"Updating part_agrmt...");
  dbg_print_lvl(2," GA_ID.................:%s",v_cnlm_ga_id.arr);
  dbg_print_lvl(2," IND_ID................:%d",cnlm_ind_id);
  dbg_print_lvl(2," AR_SYSDATE............:%s\n",v_cnlm_ar_sysdate.arr);

  EXEC SQL 
  UPDATE part_agrmt
  SET restrc_code = DECODE(restrc_code,
                           'DVCP','DVAR',
                           'FILE','FIAR',
                           'J/S', 'JSAR',
                           'MISC','MSAR',
                           'SPDT','SPAR',
                           'COLL','ARCL',
                           'DFCL','DFAC',
                           'DVCL','DVAC',
                           'FICL','FIAC',
                           'JSCL','JSAC',
                           'MSCL','MSAC',
                           'SPCL','SPAC',
                           restrc_code),
      restrc_narrative = SUBSTR(restrc_narrative ||
                                DECODE(restrc_code,
                                        null ,:v_cnlm_ar_sysdate,
                                       'DFTL',:v_cnlm_ar_sysdate,
                                       'DVCP',:v_cnlm_ar_sysdate,
                                       'FILE',:v_cnlm_ar_sysdate,
                                       'J/S' ,:v_cnlm_ar_sysdate,
                                       'MISC',:v_cnlm_ar_sysdate,
                                       'SPDT',:v_cnlm_ar_sysdate,
                                       'COLL',:v_cnlm_ar_sysdate,
                                       'DFCL',:v_cnlm_ar_sysdate,
                                       'DVCL',:v_cnlm_ar_sysdate,
                                       'FICL',:v_cnlm_ar_sysdate,
                                       'JSCL',:v_cnlm_ar_sysdate,
                                       'MSCL',:v_cnlm_ar_sysdate,
                                       'SPCL',:v_cnlm_ar_sysdate,
                                       ''),1,240 )
  WHERE ga_id = :v_cnlm_ga_id
  AND IND_ID = :cnlm_ind_id
  AND (restrc_code NOT IN ('DVAR','DVAC',
                           'FIAR','FIAC',
                           'JSAR','JSAC',
                           'MSAR','MSAC',
                           'SPAR','SPAC')
  OR restrc_code IS null);

  rc = ODB_chk_rc(NOEXIT,"ERROR - Updating part_agrmt");

  if(!rc)
  {
    dbg_print_lvl(1,"Part_agrmt update successfull!!");
  }
  else
  {
    rc = SQL_ERROR;
	 
	 fprintf(err_file_ptr, "ERROR - Could not update participant agreement for ssn %s\n", liinfo_ptr->ssn);
	 fprintf(err_file_ptr, "        SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
	 fprintf(err_file_ptr, "        Contact Systems for help.\n\n");
	 
    sprintf(msgbuf,"ERROR - %d Occurred while updating part_agrmt for ind_id %ld"
                  ,sqlca.sqlcode,cnlm_ind_id);

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0210",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  } 

  dbg_print_lvl(1,"Leaving cnlm_update_part_info, rc=%d\n", rc);

  return(rc);
}


/**********************************************************************
 * Function    :   cnlm_process_loan_history
 *
 * Parameters  :   cnlm_info, loan_acct_info
 *
 * Called by   :   CNLM()
 *
 * Calls       :   cnlm_handle_error (errors)
 *
 * Returns     :   rc  - Success (0) or Failure (anything else)
 *
 * Description :
 *
 * Assumptions :   dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_process_loan_history(CNLM_INFO *lcinfo_ptr,
                              LOAN_IND_INFO *liinfo_ptr,
                              LOAN_ACCT_INFO *lainfo_ptr)
{
  int rc = 0;
  char msgbuf[MAX_BUF_LEN];
  int  i = 0;
  int  num_fetched = 0;
  int  total_num_fetched = 0;
  int  more_to_fetch = TRUE;
  char l_less_one_yr_effdate[13];
  char cnlm_loan_type_code[11];
  char cnlm_trf_loan_acct_id[21];

  EXEC SQL BEGIN DECLARE SECTION;
   long    v_cnlm_cvpa_id;
   long    cnlm_master_ev_id = 0;
	VARCHAR cnlm_prev_loan_id[MAX_ROWS][21]; 
   short   cnlm_prev_loan_id_ind[MAX_ROWS];
   double  cnlm_bal_amount[MAX_ROWS];
   short   cnlm_bal_amount_ind[MAX_ROWS];
   VARCHAR v_cnlm_effdate[MAX_ROWS][12];
   short   v_cnlm_effdate_ind[MAX_ROWS];
   VARCHAR v_cnlm_bal_effdate[12];
   long    cnlm_ind_id = 0;
   VARCHAR v_cnlm_ga_id[12];
  EXEC SQL END DECLARE SECTION;

  msgbuf[0] = '\0';
  l_less_one_yr_effdate[0] = '\0';
  cnlm_loan_type_code[0] = '\0'; 
  cnlm_trf_loan_acct_id[0] = '\0';
  stov(v_cnlm_ga_id,"");
  stov(v_cnlm_bal_effdate,"");

  stov(v_cnlm_ga_id,lcinfo_ptr->ga_id);
  v_cnlm_cvpa_id = liinfo_ptr->cvpa_id;
  cnlm_ind_id = liinfo_ptr->ind_id; 
  cnlm_master_ev_id = lcinfo_ptr->master_ev_id;
  stov(v_cnlm_bal_effdate,lcinfo_ptr->effdate);
  strcpy(l_less_one_yr_effdate,lcinfo_ptr->less_one_yr_effdate);  
  strcpy(cnlm_loan_type_code,lainfo_ptr->loan_type_code);

  dbg_print_lvl(1,"Entering cnlm_process_loan_history");
  dbg_print_lvl(1,"----------------------------------");
  dbg_print_lvl(2," MASTER_EV_ID..........:%d",cnlm_master_ev_id);
  dbg_print_lvl(2," CVPA_ID...............:%ld",v_cnlm_cvpa_id);
  dbg_print_lvl(2," IND_ID................:%d",cnlm_ind_id);
  dbg_print_lvl(2," EFFDATE...............:%s",v_cnlm_bal_effdate.arr); 
  dbg_print_lvl(2," EFFDATE_LESS_1_YR.....:%s",l_less_one_yr_effdate);
  dbg_print_lvl(2," LOAN_TYPE_CODE........:%s\n",cnlm_loan_type_code);

  memset(lainfo_ptr, 0, sizeof(lainfo_ptr));

  strcpy(lainfo_ptr->int_start_date,l_less_one_yr_effdate);
  strcpy(lainfo_ptr->loan_reason_code,"GENERAL");
  strcpy(lainfo_ptr->loan_term_qual,"A");
  lainfo_ptr->loan_term = 1;
  
  if(strcmp(cnlm_loan_type_code,"ACCTREDUCN")==0)
  {
    sprintf(cnlm_trf_loan_acct_id,"%ld-0-A",cnlm_ind_id);
  }
  else if((strcmp(cnlm_loan_type_code,"COLL/TRAN")==0)
          ||(strcmp(cnlm_loan_type_code,"COLLATERAL")==0))
  {
    sprintf(cnlm_trf_loan_acct_id,"%ld-0-C",cnlm_ind_id);
  }
 
  strcpy(lainfo_ptr->trf_loan_acct_id,cnlm_trf_loan_acct_id);
  strcpy(lainfo_ptr->status_chg_effdate,(char *)v_cnlm_bal_effdate.arr);
  strcpy(lainfo_ptr->status_chg_dpdate,(char *)v_cnlm_bal_effdate.arr);
  strcpy(lainfo_ptr->first_due_date,l_less_one_yr_effdate);
  strcpy(lainfo_ptr->maturity_date,(char *)v_cnlm_bal_effdate.arr);
  strcpy(lainfo_ptr->status_code,"P");
  lainfo_ptr->loan_amt = 0;
  strcpy(lainfo_ptr->default_ind,"N");
  lainfo_ptr->repay_amt = 0;
  lainfo_ptr->fixed_int_rate = 0;
  lainfo_ptr->origination_fee = 0;
  lainfo_ptr->equiv_daily_eff_rate = 0;
  lainfo_ptr->orig_loan_amt = 0;

  /*kwai dbg_print_lvl(1,"Calling cnlm_create_loan_acct");
   *
   *rc = cnlm_create_loan_acct(lcinfo_ptr,
   *                          liinfo_ptr,
   *                          lainfo_ptr,
   *                          0,
   *                          0,
   *                          l_less_one_yr_effdate);
   *if(!rc)
   *{*/
   dbg_print_lvl(1,"Calling cnlm_create_loan_bal");

    rc = cnlm_create_loan_bal(lcinfo_ptr,
                              liinfo_ptr,
                              lainfo_ptr,
                              0,
                              "Z",
                              "01-JAN-1950",
                              0,
                              0);
    if(!rc)
    {
      dbg_print_lvl(1,"Calling cnlm_create_loan_acty");

      rc = cnlm_create_loan_acty(lcinfo_ptr,
                                 liinfo_ptr,
                                 lainfo_ptr,
                                 0,
                                 0,
                                 l_less_one_yr_effdate);
      if(!rc)
      {
        dbg_print_lvl(1,"Calling cnlm_hist_mnty_splt");

        rc = cnlm_hist_mnty_splt(lcinfo_ptr,
                                 liinfo_ptr,
                                 lainfo_ptr);
        if(!rc)
        {
          dbg_print_lvl(1,"Calling cnlm_create_loan_bal");

          rc = cnlm_create_loan_bal(lcinfo_ptr,
                                    liinfo_ptr,
                                    lainfo_ptr,
                                    0,
                                    "Z",
                                    (char *)v_cnlm_bal_effdate.arr,
                                    0,
                                    0);
          if(!rc)
          {
            EXEC SQL DECLARE cnlm_get_loan_history_cur CURSOR FOR
            SELECT prior_loan_id,
				       bal_amt,
                   to_char(effdate,'DD-MON-YYYY')
            FROM work_conv_part_loan_hist 
            WHERE cvpa_id = :v_cnlm_cvpa_id;
				

            EXEC SQL OPEN cnlm_get_loan_history_cur;

            rc = ODB_chk_norow_rc(NOEXIT,"ERROR - Openning the cnlm_get_loan_history_cur");

            if(!rc)
            {
              do
              {
                for (i = 0; i < MAX_ROWS; i++)
                {
					   stov(cnlm_prev_loan_id[i],"");
						cnlm_prev_loan_id_ind[i] = -1;
                  cnlm_bal_amount[i] = 0;
                  cnlm_bal_amount_ind[i] = -1;
                  stov(v_cnlm_effdate[i],"");
                  v_cnlm_effdate_ind[i] = -1;
                }

                EXEC SQL FETCH cnlm_get_loan_history_cur
                         INTO  :cnlm_prev_loan_id:cnlm_prev_loan_id_ind,
								       :cnlm_bal_amount:cnlm_bal_amount_ind,
                               :v_cnlm_effdate:v_cnlm_effdate_ind;

                rc = ODB_chk_rc(NOEXIT,"ERROR - Fetching the cnlm_get_loan_history_cur");

                if(!rc)
                {
                  num_fetched = sqlca.sqlerrd[2] - total_num_fetched;
                  total_num_fetched = sqlca.sqlerrd[2];

                  if(sqlca.sqlcode == ORA_NOROW)
                  {
                    more_to_fetch = FALSE;
                  }

                  dbg_print_lvl(1,"Num_fetched %d",num_fetched);
        
                  while((num_fetched > 0)&&(!rc))
                  {
                    for(i = 0; i < num_fetched; i++)
                    {
						  	 if (cnlm_prev_loan_id_ind[1] == -1)
							 	{
								stov(cnlm_prev_loan_id[i],"");
								}
							 else
							 	{
								vtos(cnlm_prev_loan_id[i]);
								}
                      if(cnlm_bal_amount_ind[i] == -1)
                      {
                        cnlm_bal_amount[i] = 0;
                      }

                      if(v_cnlm_effdate_ind[i] == -1)
                      {
                        stov(v_cnlm_effdate[i],"");
                      }
                      else
                      {
                        vtos(v_cnlm_effdate[i]);
                      }

                      dbg_print_lvl(1,"Calling cnlm_create_loan_bal");

                      rc = cnlm_create_loan_bal(lcinfo_ptr,
                                                liinfo_ptr,
                                                lainfo_ptr,
                                                0,
                                                "Z",
                                                (char *)v_cnlm_effdate[i].arr,
                                                cnlm_bal_amount[i],
                                                0);
                      if(rc)
                      {
                        dbg_print_lvl(1,"ERROR -  An occurred while calling cnlm_create_loan_bal\n");
                      }

                    }
                    num_fetched = 0;
                  }/*  End of while(num_fetched > 0) */
                }
                else
                {
                  rc = SQL_ERROR;

                  sprintf(msgbuf,"ERROR -  %d occurred while fetching the cnlm_get_loan_history_cur"
                                ,sqlca.sqlcode);

                  dbg_print_lvl(1,"%s",msgbuf);

                  cnlm_handle_error("E",
                                    "9999",
                                    "0220",
                                    "0000",
                                    msgbuf,
                                    lcinfo_ptr,
                                    liinfo_ptr);
                  return(rc);
                }
              }
              while((more_to_fetch)&&(!rc));
            }
            else
            {
              rc = SQL_ERROR;

              sprintf(msgbuf,"ERROR -  %d occurred while openning the cnlm_get_loan_history_cur"
                                ,sqlca.sqlcode);

              dbg_print_lvl(1,"%s",msgbuf);

              cnlm_handle_error("E",
                                "9999",
                                "0230",
                                "0000",
                                msgbuf,
                                lcinfo_ptr,
                                liinfo_ptr);
              return(rc);
            }
          }
          else
          {
            dbg_print_lvl(1,"ERROR -  Occurred while calling cnlm_create_loan_bal");
          }
        }
        else
        {
           dbg_print_lvl(1,"ERROR -  Occurred while calling cnlm_hist_mnty_splt");
        }
      }
      else
      {
        dbg_print_lvl(1,"ERROR -  Occurred while calling cnlm_create_loan_acty");
      } 
    }
    else
    {
      dbg_print_lvl(1,"ERROR -  Occurred while calling cnlm_create_loan_bal");
    }
  /*kwai}
   *else
   *{
   * dbg_print_lvl(1,"ERROR -  Occurred while calling cnlm_create_loan_acct");
   *}*/

  dbg_print_lvl(1,"Leaving cnlm_process_loan_history, rc=%d\n", rc);

  return(rc);
}


/**********************************************************************
 * Function    :   cnlm_hist_mnty_splt
 *
 * Parameters  :   cnlm_info, loan_acct_info
 *
 * Called by   :   cnlm_process_loan_history()
 *
 * Calls       :   cnlm_handle_error (errors)
 *
 * Returns     :   rc  - Success (0) or Failure (anything else)
 *
 * Description :
 *
 * Assumptions :   dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_hist_mnty_splt(CNLM_INFO *lcinfo_ptr,
                        LOAN_IND_INFO *liinfo_ptr,
                        LOAN_ACCT_INFO *lainfo_ptr)
{
  int rc = 0;
  char msgbuf[MAX_BUF_LEN];

  EXEC SQL BEGIN DECLARE SECTION;
   VARCHAR v_cnlm_ga_id[14];
   long    cnlm_ind_id = 0;
   VARCHAR v_cnlm_sdmt_code[4];
   short   v_cnlm_sdmt_code_ind = -1;
   long    cnlm_gdmt_seqnbr = 0;
   short   cnlm_gdmt_seqnbr_ind = -1;
   VARCHAR v_cnlm_effdate[12];
  EXEC SQL END DECLARE SECTION;

  msgbuf[0] = '\0';
  stov(v_cnlm_sdmt_code,"");
  stov(v_cnlm_ga_id,"");
  stov(v_cnlm_effdate,"");

  stov(v_cnlm_ga_id,lcinfo_ptr->ga_id);
  cnlm_ind_id = liinfo_ptr->ind_id;
  stov(v_cnlm_effdate,lcinfo_ptr->less_one_yr_effdate);

  dbg_print_lvl(1,"Entering cnlm_hist_mnty_splt");
  dbg_print_lvl(1,"----------------------------");
  dbg_print_lvl(1,"Selecting group level mnty info");
  dbg_print_lvl(2," GA_ID..............:%s\n",v_cnlm_ga_id.arr);

 /* We are only concerned with the first grp_mnty */

  EXEC SQL
  SELECT sdmt_code,
         seqnbr
  INTO   :v_cnlm_sdmt_code:v_cnlm_sdmt_code_ind,
         :cnlm_gdmt_seqnbr:cnlm_gdmt_seqnbr_ind
  FROM grp_def_mnty
  WHERE ga_id = :v_cnlm_ga_id
  AND   rownum = 1;  

  rc = ODB_chk_norow_rc(NOEXIT,"ERROR - Selecting group level mnty info");

  if(!rc)
  {
    if(v_cnlm_sdmt_code_ind == -1)
    {
      stov(v_cnlm_sdmt_code,"");
    }
   
    if(cnlm_gdmt_seqnbr_ind == -1)
    {
      cnlm_gdmt_seqnbr = 0;
    }

    dbg_print_lvl(1,"Inserting into loan_mnty_splt...");
    dbg_print_lvl(2," IND_ID.............:%d",cnlm_ind_id);
    dbg_print_lvl(2," GA_ID..............:%s",v_cnlm_ga_id.arr);
    dbg_print_lvl(2," SDMT_CODE..........:%s",v_cnlm_sdmt_code.arr);
    dbg_print_lvl(2," GDMT_SEQNBR........:%d",cnlm_gdmt_seqnbr);
    dbg_print_lvl(2," EFFDATE_LESS_1_YR..:%s\n",v_cnlm_effdate.arr);

    EXEC SQL
    INSERT INTO loan_mnty_splt(IND_ID,               
                               INLNAG_SEQNBR,                        
                               GA_ID,                          
                               SDMT_CODE,                     
                               GDMT_SEQNBR,                  
                               EFFDATE,                     
                               SPLIT_PERCENT)
                        VALUES(:cnlm_ind_id,
                               0,
                               :v_cnlm_ga_id,
                               :v_cnlm_sdmt_code,
                               :cnlm_gdmt_seqnbr,
                               to_date(:v_cnlm_effdate,'DD-MON-YYYY'),
                               100);              

   rc = ODB_chk_norow_rc(NOEXIT,"ERROR - While inserting into loan_mnty_splt");
  
   if(!rc)
   {
     dbg_print_lvl(1,"Insert into loan_mnty_splt successfull!!");
   }
   else
   {
     rc = SQL_ERROR;
	  
	  fprintf(err_file_ptr, "ERROR - Could not create a money type split record for \n");
	  fprintf(err_file_ptr, "        ssn %s Orig Loan ID %s\n", 
	            liinfo_ptr->ssn, lainfo_ptr->prev_loan_id);
	  fprintf(err_file_ptr, "        SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
	  fprintf(err_file_ptr, "        Contact Systems for help.\n\n");
	  

     sprintf(msgbuf,"ERROR -  %d occurred while inserting into loan_mnty_splt"
                      ,sqlca.sqlcode);

     dbg_print_lvl(1,"%s",msgbuf);

     cnlm_handle_error("E",
                       "9999",
                       "0240",
                       "0000",
                       msgbuf,
                       lcinfo_ptr,
                       liinfo_ptr);
     return(rc);
   } 
  }
  else
  {
    rc = SQL_ERROR;

    sprintf(msgbuf,"ERROR -  %d occurred while selecting group level mnty info"
                      ,sqlca.sqlcode);

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0250",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  }


  dbg_print_lvl(1,"Leaving cnlm_hist_mnty_splt, rc=%d\n", rc);

  return(rc);
}




/**********************************************************************
 * Function    :  cnlm_complete_event
 *
 * Parameters  :  cnlm_info, loan_ind_info
 *
 * Called by   :  CNLM()
 *
 * Calls       :  MACL
 *                cnlm_handle_error (errors)
 *
 * Returns     :  rc  - Success (0) or Failure (anything else)
 *
 * Description :
 *
 * Assumptions :  dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_complete_event(CNLM_INFO *lcinfo_ptr,
                        LOAN_IND_INFO *liinfo_ptr)
{
 char msgbuf[MAX_BUF_LEN];
  int  rc = 0;
  long cnlm_ev_id = 0;
  long cnlm_step_seqnbr = 0;
 
  EXEC SQL BEGIN DECLARE SECTION;
     long v_cnlm_ev_id;
  EXEC SQL END DECLARE SECTION;

  msgbuf[0] = '\0';

  cnlm_ev_id = liinfo_ptr->ev_id;
  v_cnlm_ev_id = liinfo_ptr->ev_id;

  dbg_print_lvl(1,"Entering cnlm_complete_event");
  dbg_print_lvl(1,"----------------------------");
  dbg_print_lvl(1,"Calling MACL to complete the event");
  dbg_print_lvl(1," EV_ID ............:%d",cnlm_ev_id);

  rc = MACL("CNLM",                        /* Transaction Code     */
             "",                           /* Subject Id           */
             &cnlm_ev_id,                  /* Event Id             */
             "",                           /* Event Type           */
             0,                            /* Master Event Id      */
             "",                           /* Related Subject      */
             "",                           /* User Id              */
             "",                           /* Creation Source      */
             &cnlm_step_seqnbr             /* Step Sequence #      */
             );

  if(rc)
  {
    
    rc = MACL_ERROR;
	 
    sprintf(msgbuf,"ERROR - Calling MACL to complete the event");

    dbg_print_lvl(1,"%s",msgbuf);

    cnlm_handle_error("E",
                      "9999",
                      "0260",
                      "0000",
                      msgbuf,
                      lcinfo_ptr,
                      liinfo_ptr);
    return(rc);
  }
  else
  {
  EXEC SQL
  DELETE FROM STEP
  WHERE EV_ID = :v_cnlm_ev_id
    AND SETY_CODE <> 'CNLM';
	 
  EXEC SQL
  UPDATE STEP
  SET SEQNBR = 1
  WHERE EV_ID = :v_cnlm_ev_id
    AND SETY_CODE = 'CNLM';
	 
  }

  dbg_print_lvl(1, "Leaving cnlm_log_new_event, rc=%d\n", rc);

  return(rc);
}

/**********************************************************************
 * Function    : cnlm_open_error_file FUNCTION
 *
 * Parameters  : none
 *
 * Called by   : Called by CNLM to open error message file.
 *
 * Calls       : nothing
 *
 * Returns     : Success (0) or Failure (1)
 *
 * Description : This function opens a file for writing.  The file
 *               will contain any error messages which occurred
 *               during the running of program.
 *
 * Assumptions : dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_open_error_file(char *ga_id)
	{
	
	dbg_print_lvl(1, "Entering function cnlm_open_error_file()");	
		
	err_file_name = tmpnam(NULL);

   if ((err_file_ptr = fopen(err_file_name,"w")) == (FILE *) NULL)
		return (FAILURE);	
		
	fprintf(err_file_ptr, "SUBJECT: Loan Conversion For GA: %s\n", ga_id);
		
	dbg_print_lvl(1, "Leaving function cnlm_open_error_file()");
		
	return (SUCCESS);
	
	} /* End of cnlm_open_error_file() */


/**********************************************************************
 * Function    : cnlm_mail_error_file FUNCTION
 *
 * Parameters  : none
 *
 * Called by   : Called by CNLM to email any error messages to user.
 *
 * Calls       : nothing
 *
 * Returns     : Success (0) or Failure (1)
 *
 * Description : This function emails the error file created during
 *               running of program.
 *
 * Assumptions : dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/

int cnlm_mail_error_file(char* user_id)
	{
        VARCHAR l_user_id[10];
	char command[128];
	
	fclose(err_file_ptr);
	
	/*if ((user = getenv("USER")) == (char *) NULL)
		{
		dbg_print_lvl(1,"Error: Cannot retrieve USER environment variable.");
		return (FAILURE);
		}*/
	stov(l_user_id,user_id);	
	dbg_print_lvl(1, "user is %s", (char *)l_user_id.arr);
	
	sprintf(command, "/usr/ucb/mail %s < %s", (char *)l_user_id.arr, err_file_name);
	
	dbg_print_lvl(1, "mail command is %s", command);
	
	system(command);
	
	remove(err_file_name);
	
	return (SUCCESS);
	
	}	/* End of cnlm_mail_error_file() */ 
	
	
/**********************************************************************
 * Function    : cnlm_add_event_and_step FUNCTION
 *
 * Parameters  : lcinfo_ptr
 *               liinfo_ptr
 *               lainfo_ptr
 *
 * Called by   : Called by every function to log errors
 *
 * Calls       : 
 *               
 * Returns     : rc  - Success (0) or Failure (anything else)
 *
 * Description : This function is called to log steps
 *               each time a ppts loan is added to Production tables.
 *
 * Assumptions : dbg_setup() has been called for debug initialization.
 *
 * Notes       : This function was taken from GQ19MADD.pc
 *
 *********************************************************************/	

int cnlm_add_event_and_step(CNLM_INFO *lcinfo_ptr, LOAN_IND_INFO *liinfo_ptr, 
	LOAN_ACCT_INFO* lainfo_ptr, char* user_id)
{
EXEC SQL BEGIN DECLARE SECTION;
   varchar temp_event_type[11];
   varchar temp_step_type[11];
   varchar temp_subj_type[6];
   varchar temp_subj_id[14];
   char l_user_id[10];
   varchar temp_user_id[10];
   varchar temp_wkun_short_name[11];
   unsigned long int     temp_ev_id;
   unsigned long int     temp_master_ev_id;
EXEC SQL END DECLARE SECTION;

	char* user;
	int rc = 0;
	char msgbuf[MAX_BUF_LEN];

	dbg_indent ("add_event_and_step");

	stov(temp_event_type,  "MASS LOAN");
	stov(temp_step_type,   "CNLM");
	stov(temp_subj_type,   "GA");
        /*stov(temp_user_id,     lcinfo_ptr->user_id);*/
	stov(temp_subj_id,     lcinfo_ptr->ga_id);

        stov(temp_user_id, user_id);
        /*strcpy(l_user_id, lcinfo_ptr->user_id);	*/
	temp_master_ev_id = lcinfo_ptr->master_ev_id;

	/*if ((user = getenv("USER")) == (char *) NULL)
		{
		dbg_print_lvl(1,"Error: Cannot retrieve USER environment variable.");
		return (FAILURE);
		}*/

        /*dbg_print_lvl(1, "%s", temp_user_id); */
	
	EXEC SQL 
	SELECT users.wkun_short_name
        INTO :temp_wkun_short_name
        FROM SYSTEM.DUAL, USERS
        WHERE USERS.LOGON_ID = UPPER(:temp_user_id);

  	vtos(temp_wkun_short_name);
	
	EXEC SQL
	SELECT EVENTQ.NEXTVAL
	INTO :temp_ev_id
	FROM DUAL;
	
	dbg_print_lvl(1, "Inserting into EVENT");
	dbg_print_lvl(1, "ID.....................: %ld", temp_ev_id);
	dbg_print_lvl(1, "MASTER_EV_ID...........: %ld", temp_master_ev_id);
	dbg_print_lvl(1, "EVTY_CODE..............: %s",  temp_event_type.arr);
	dbg_print_lvl(1, "RESP_USER_LOGON_ID.....: %s",  temp_user_id.arr);
	dbg_print_lvl(1, "LOG_USER_LOGON_ID......: %s",  temp_user_id.arr);
	dbg_print_lvl(1, "SUBJECT_ID.............: %s",  temp_subj_id.arr);
	dbg_print_lvl(1, "SJTY_CODE..............: %s",  temp_subj_type.arr);
	dbg_print_lvl(1, "WKUN_SHORT_NAME........: %s",  temp_wkun_short_name.arr);
	
   
	EXEC SQL
	INSERT INTO EVENT (
		ID,
		MASTER_EV_ID,
		EVTY_CODE,
                RESP_USER_LOGON_ID,
		LOG_USER_LOGON_ID,
		DPDATE_TIME,
		RECVD_DATE,
		CREATION_SRCE_CODE,
		SUBJECT_ID,
		REJ_IND,
		SJTY_CODE,
		WKUN_SHORT_NAME)
	VALUES (:temp_ev_id,
		:temp_master_ev_id,
                :temp_event_type,
                UPPER(:temp_user_id),
		UPPER(:temp_user_id),
		SYSDATE, 
		SYSDATE, 
		'SYSTEM',
                 :temp_subj_id,
		'N',
                :temp_subj_type,
		:temp_wkun_short_name);

	rc = ODB_chk_norow_rc(NOEXIT,"ERROR - While inserting into event");
  
   if(!rc)
		{
		liinfo_ptr->ev_id = temp_ev_id;
		
		EXEC SQL
		INSERT INTO STEP (
			EV_ID,
			SEQNBR,
			SETY_CODE,
			EVTY_CODE,
			USER_LOGON_ID,
			WKUN_SHORT_NAME,
			DUE_DATE,
			TARGET_DATE,
			REJ_FLAG,
			ON_HOLD_TIME_USED_IND,
			OVERRIDE_IND,
			ASSIGNED_DATE,
			COMPLTN_DATE,
			WORK_OUTSTANDING_IND)
		VALUES (:temp_ev_id,
			1,
			:temp_step_type,
			:temp_event_type,
			UPPER(:temp_user_id),
			:temp_wkun_short_name,
			SYSDATE, 
			SYSDATE, 
			'N',
			'N',
			'N',
			SYSDATE, 
			SYSDATE, 
			'N');
			
		rc = ODB_chk_norow_rc(NOEXIT,"ERROR - While inserting into step");
		
		if (rc)
			{
			rc = SQL_ERROR;
	  
			fprintf(err_file_ptr, "ERROR - Could not create a step for \n");
			fprintf(err_file_ptr, "        ssn %s Orig Loan ID %s\n", 
	            	 liinfo_ptr->ssn, lainfo_ptr->prev_loan_id);
			fprintf(err_file_ptr, "        SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
			fprintf(err_file_ptr, "        Contact Systems for help.\n\n");


   		sprintf(msgbuf,"ERROR -  %d occurred while inserting into step"
                     	  ,sqlca.sqlcode);

   		dbg_print_lvl(1,"%s",msgbuf);

   		cnlm_handle_error("E",
                     		"9999",
                     		"0240",
                     		"0000",
                     		msgbuf,
                     		lcinfo_ptr,
                     		liinfo_ptr);
   		return(rc);
			}
		}
	else /* problem inserting into event table */
		{
		rc = SQL_ERROR;
	  
		fprintf(err_file_ptr, "ERROR - Could not create an event for \n");
		fprintf(err_file_ptr, "        ssn %s Orig Loan ID %s\n", 
	             liinfo_ptr->ssn, lainfo_ptr->prev_loan_id);
		fprintf(err_file_ptr, "        SQL error message is %s\n", sqlca.sqlerrm.sqlerrmc);
		fprintf(err_file_ptr, "        Contact Systems for help.\n\n");


   	sprintf(msgbuf,"ERROR -  %d occurred while inserting into event"
                       ,sqlca.sqlcode);

   	dbg_print_lvl(1,"%s",msgbuf);

   	cnlm_handle_error("E",
                     	"9999",
                     	"0240",
                     	"0000",
                     	msgbuf,
                     	lcinfo_ptr,
                     	liinfo_ptr);
   	return(rc);
		}
		
	dbg_unindent();
		
	return (rc);
	
	
}



/**********************************************************************
 * Function    : HANDLE_ERROR FUNCTION
 *
 * Parameters  : mess_code
 
 *               in_scnd_id,
 *               err_msg,
 *               CNLM_INFO
 *
 * Called by   : Called by every function to log errors
 *
 * Calls       : GQ19BMSG
 *               ERROR_MESSAGE
 *
 * Returns     : rc  - Success (0) or Failure (anything else)
 *
 * Description : This function is called to log errors produced by CNLM
 *
 * Assumptions : dbg_setup() has been called for debug initialization.
 *
 * Notes       :
 *
 *********************************************************************/
int cnlm_handle_error(char *error_code,
                      char *error_prim,
                      char *error_scnd,
                      char *error_tert,
                      char *error_msg,
                      CNLM_INFO *lcinfo_ptr,
                      LOAN_IND_INFO *liinfo_ptr) 
{

  int rc = 0;
  char msgbuf[MAX_BUF_LEN];

  EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR         err_cd[80];
    VARCHAR         v_err_msg[255];
    VARCHAR         bm_ret_msg[255];
    VARCHAR         occ_desc[255];
    VARCHAR         v_error_code[4];
    VARCHAR         v_cnlm_ga_id[13];
    VARCHAR         v_err_type[4];
    VARCHAR         v_cnlm_calling_mod[8];
    VARCHAR         v_the_mod[79];
    int             bm_rc = 0;
    long            l_cnlm_ind_id = 0;
    long            l_cnlm_ev_id = 0;
    int             PROC_SQL_CODE = 0;
  EXEC SQL END DECLARE SECTION;

    stov(err_cd,"");
    stov(v_err_msg,"");
    stov(occ_desc,"");
    stov(v_error_code,"");
    stov(v_cnlm_ga_id,"");
    stov(v_err_type,"");
    stov(v_cnlm_calling_mod,"");

    dbg_print_lvl(1,"ERROR - Entering cnlm_handle_error");
    dbg_print_lvl(1,"----------------------------------");

    if(strlen(error_msg) > 59)
    {
      error_msg[59] = NULL;
    }

    sprintf((char *)err_cd.arr,"%s-%s-%s",error_code,error_prim,error_scnd);
    err_cd.len=strlen((char *)err_cd.arr);

    stov(v_cnlm_ga_id,lcinfo_ptr->ga_id);
    l_cnlm_ind_id = liinfo_ptr->ind_id;
    l_cnlm_ev_id = lcinfo_ptr->master_ev_id;
    stov(v_cnlm_calling_mod,"CNLM");
    stov(v_err_msg,error_msg);
    stov(bm_ret_msg,"");
    stov(v_err_type,error_code);
    stov(v_error_code,error_code);

    sprintf((char *)occ_desc.arr,"%s(%ld)"
            ,(char *)v_cnlm_ga_id.arr,l_cnlm_ind_id);
    occ_desc.len=strlen((char *)occ_desc.arr);

    sprintf((char *)v_the_mod.arr,"The Calling Module is %s"
            ,(char *)v_cnlm_calling_mod.arr);
    v_the_mod.len=strlen((char *)v_the_mod.arr);

    dbg_print_lvl(2, "BMSG Info...");
    dbg_print_lvl(2, " Participant is %d",l_cnlm_ind_id);
    dbg_print_lvl(2, " Group is %s",v_cnlm_ga_id.arr);
    dbg_print_lvl(2, " Error_code is %s",v_error_code.arr);
    dbg_print_lvl(2, " Calling_module is %s",v_cnlm_calling_mod.arr);
    dbg_print_lvl(2, " Calling_ev_id is %d\n",l_cnlm_ev_id);

    if(strcmp(error_code,"E")==0)
    {
      liinfo_ptr->errors++;  
      EXEC SQL ROLLBACK TO SAVEPOINT cnlm_start_new_loan;
    }

    strcpy(rtrn_mod, MODNAME);
    strcpy(rtrn_prim_id,error_prim);
    strcpy(rtrn_scnd_id,error_scnd);
    strcpy(rtrn_tert_id,error_tert);
    strcpy(rtrn_code,error_code);
    strcpy(err_msg,error_msg);

    error_message(rtrn_mod,
                 rtrn_prim_id,
                 rtrn_scnd_id,
                 rtrn_tert_id,
                 rtrn_code,
                 err_msg,
                 sqlca.sqlcode,
                 (char *) &rtrn_code_desc[0],
                 &rtrn_code_desc_len);

    /* EXEC SQL EXECUTE
         BEGIN GQ19BMSG.process_batch_msg
                        (:bm_rc,
                         :bm_ret_msg,
                         'INSERT',
                         'GQ19CNLM',
                         :v_error_code,
                         :occ_desc,
                         :v_err_type,
                         :l_cnlm_ev_id,
                         1,
                         null,null,null,
                         :v_cnlm_ga_id,
                         null,
                         null,null,
                         :l_cnlm_ind_id,
                         null,null,null,
                         :err_cd,
                         :v_err_msg,
                         null,
                         :v_the_mod,
                         null,
                         null,null,null,
                         null,null);

              if SQLCODE != 0 then
                 :PROC_SQL_CODE := SQLCODE;
                 :v_err_msg := 'Failure on insert to BSMG';
              end if;

       END;
     END-EXEC; */

     dbg_print_lvl(1,"sqlcode = %d",sqlca.sqlcode);
     dbg_print_lvl(1,"proc_sql_code = %d",PROC_SQL_CODE);
     dbg_print_lvl(1,"%s",rtrn_code_desc);

     rc = ODB_chk_norow_rc(NOEXIT,"Encountered SQL error %d %s calling BSMG."
                                     ,sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);

     if(rc)
     {
       EXEC SQL ROLLBACK WORK;

       rc = SQL_ERROR;

       sprintf(msgbuf,"Encountered SQL error %d %s calling BSMG."
                    ,sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);

       dbg_print_lvl(1,"%s",msgbuf);

       return(rc);
     }
     else if(PROC_SQL_CODE)
     {
       EXEC SQL ROLLBACK WORK;

       rc = SQL_ERROR;

       sprintf(msgbuf,"Encountered SQL error %d %s calling BSMG."
                    ,sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);

       dbg_print_lvl(1,"%s",msgbuf);

       return(rc);
     }


     if(bm_rc)
     {
       dbg_print_lvl(1,"Error while calling Process Batch Message <%d> <%s>\n"
                    ,bm_rc,bm_ret_msg.arr);
       return(bm_rc);
     }

    dbg_print_lvl(1,"Exiting CNLM handle error function\n");

    return(rc);
}
